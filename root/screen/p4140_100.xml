<?xml version="1.0" encoding="UTF-8"?>
<import filename="plist/root/common/top_title.xml"/> 
<br/>
<!--
 *********************************************************************************
 **
 ** 화면을 그린 후에 필요한 작업을 한다. 
 ** - TR을 배열에 담는다. 전송은 특이한 경우가 아니면 basescreen에서 일괄적으로 전송한다.
 **
 *********************************************************************************
 -->
<action id="screen_contents_onload" value="
	/*
	$setvar(
		bBase64Encode=false
		, bStringLength=false
		, bNetLength=true	// htonl 함수를 사용하는 방법
		, bRecvServerMultiStart=false
	);
	*/
	//$callaction(ssl_connect_clicked);
"/>

<action id="screen_4140_100_onunload" value="
	//$ssl_allclose();
"/>

<action id="ssl_connect_callaction" params="sSocketName,result" value="
	$logvar(m_sSSLSocketName,sSocketName,result);
	if($comparevar(m_sSSLSocketName,sSocketName) != 0) {
		$alert(,ssl_connect_callaction 소켓명이 다르다.)
		return;
	}
	if(!$result) {
		$ssl_close($m_sSSLSocketName);
		$delvar(m_sSSLSocketName);
		$alert(,ssl_connect_callaction,접속 실패);
		return;
	}
	$log(SSL 서버 접속 성공 [$m_sSSLSocketName]);
	if($bStringLength || $bNetLength) {
		$setvar(bRecvServerMultiStart=false);
	}
	else {
		$setvar(bRecvServerMultiStart=true);
	}
"/>

<action id="ssl_close_callaction" params="sSocketName" scope="common" value="
	$log(SSL 서버 접속해제 성공 [$sSocketName]);
	$ssl_delete($sSocketName);
	$delvar(m_sSSLSocketName);
"/>

<action id="ssl_recv_callaction" params="sSocketName,recvDataVar" value="
	if($comparevar(m_sSSLSocketName,sSocketName) != 0) {
		$alert(,ssl_recv_callaction 소켓명이 다르다.)
		return;
	}
	if(!$bRecvServerMultiStart) {
		$delvar(strRecvData,sNewSSLRecvData,iLength);
		$setvar(bRecvServerMultiStart=true);
		if($bNetLength) {
			// 바이너리 길이를 셋팅하는 구조인 경우
			$memcpy(iLength,$recvDataVar,,4);
			$htonl(iLength);
			$memcpy(strRecvData,$recvDataVar,4,$result($getvarlen($recvDataVar) - 4));
			if($getvarlen(strRecvData) < $iLength) {
				$log(아직 데이터가 다 오지 않았다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
				return;
			}
			$log(모든 데이터가 도착했다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
			$setvar(bRecvServerMultiStart=false);
		}
		else if($bStringLength) {
			// 스크링 스타일이 길이를 셋팅하는 구조인 경우..길이의 사이즈가 4일 경우
//			$memcpy(iLength,$recvDataVar,,4);
//			$memcpy(strRecvData,$recvDataVar,4,$result($getvarlen($recvDataVar) - 4));
//			if($getvarlen(strRecvData) < $iLength) {
//				$log(아직 데이터가 다 오지 않았다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
//				return;
//			}
//			$log(모든 데이터가 도착했다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
//			$setvar(bRecvServerMultiStart=false);
		}
		else {
			// 앞에 길이를 셋팅하지 않는 방법이면
//			$setvar(iLength=0);
//			$memcpy(strRecvData,$recvDataVar);
		}
	}
	else {
		$setvar(iRecvDataPos = $getvarlen(strRecvData));
		if($bNetLength || $bStringLength) {
			// 바이너리 길이를 셋팅하는 구조인 경우
			$memcpy(strRecvData,$recvDataVar,0,$getvarlen($recvDataVar),,$iRecvDataPos);
			if($getvarlen(strRecvData) < $iLength) {
				$log(아직 데이터가 다 오지 않았다. 2 LENGTH[$getvarlen(strRecvData)/$iLength]);
				return;
			}
			$log(모든 데이터가 도착했다. 2 LENGTH[$getvarlen(strRecvData)/$iLength]);
			$setvar(bRecvServerMultiStart=false);
		}
		else {
			// 앞에 길이를 셋팅하지 않는 방법이면
//			$setvar(iLength=0);
//			$memcpy(strRecvData,$recvDataVar);
		}
	}
	$logvar(iLength,strRecvData,bBase64Encode);
	if($bBase64Encode) {
		$base64_decode(strRecvData,sNewSSLRecvData);
	}
	else {
		$memcpy(sNewSSLRecvData,strRecvData);
	}
	$getutf8(sNewSSLRecvData);
	$log(ssl_recv_callaction Call Success [$sSocketName][sNewSSLRecvData]);

	$json_create($jsonName);
	$json_parsebuffer($jsonname,sNewSSLRecvData);

	$json_print($jsonname);

	$log(jsondata1 = $json_getdata($jsonname,HDR.CMD));
	$log(arraycount = [$json_getcount($jsonname,BODY.BNKS)]);
	$log(jsondata2 = $json_getdata($jsonname,BODY.BNKS[1].BNK_NM));

	$json_delete($jsonName);

	$logvar(sNewSSLRecvData);
	$delvar($recvDataVar);
"/>

<screen id="screen_4140_100"
	class="cs_screen_contents"
	backcolor="ffffff"
	onload="screen_contents_onload"
	onunload="screen_4140_100_onunload"
	>
	<button 
		value="SSL 접속" 
		width="$w($g_lcdwidth,25)" 
		height="$h($g_lcdHeight,8)" 
		backcolor="ffffff" 
		textcolor="0000ff"
		border_color="0000ff"
		border_width="1"
		onClicked="ssl_connect_clicked" 
		/>
	<button 
		value="SSL 해제" 
		width="$w($g_lcdwidth,25)" 
		height="$h($g_lcdHeight,8)" 
		backcolor="ffffff" 
		textcolor="0000ff"
		border_color="0000ff"
		border_width="1"
		onClicked="ssl_close_clicked" 
		/>
	<button 
		value="SSL 전송" 
		width="$w($g_lcdwidth,25)" 
		height="$h($g_lcdHeight,8)" 
		backcolor="ffffff" 
		textcolor="0000ff"
		border_color="0000ff"
		border_width="1"
		onClicked="ssl_send_clicked" 
		/>
	<button 
		value="JSONTEST" 
		width="$w($g_lcdwidth,25)" 
		height="$h($g_lcdHeight,8)" 
		backcolor="ffffff" 
		textcolor="0000ff"
		border_color="0000ff"
		border_width="1"
		onClicked="json_test" 
		/>
</screen>

<action id="ssl_connect_clicked" value="
	if($getvarlen(m_sSSLSocketName) > 0) {
		if($ssl_isconnect($m_sSSLSocketName)) {
			$alert(,ssl_connect_clicked 소켓[$m_sSSLSocketName]이 이미 접속상태입니다.);
			return;
		}
	}
	
//	$setvar(m_sSSLSocketName=$ssl_connect(172.16.1.220,8000,ssl_connect_callaction,ssl_close_callaction,ssl_recv_callaction));
	$setvar(m_sSSLSocketName=$ssl_connect(14.63.196.29,10110,ssl_connect_callaction,ssl_close_callaction,ssl_recv_callaction));
//	$setvar(m_sSSLSocketName=$ssl_connect(14.63.196.29,10111,ssl_connect_callaction,ssl_close_callaction,ssl_recv_callaction));
	if($getvarlen(m_sSSLSocketName) <= 0) {
		$alert(,ssl_connect_clicked 서버 연결 실패);
		return;
	}
	$logvar(m_sSSLSocketName);
	"/>

<action id="ssl_close_clicked" value="
	$logvar(m_sSSLSocketName);
	if($getvarlen(m_sSSLSocketName) <= 0) {
		$alert(,ssl_close_clicked 서버에 연결이 되어있지 않은 상태);
		return;
	}
	$log(close process Call **************);
	$ssl_close($m_sSSLSocketName);
"/>

<action id="ssl_send_clicked" value="
	$logvar(m_sSSLSocketName);
	if($getvarlen(m_sSSLSocketName) <= 0) {
		$alert(,ssl_send_clicked 미접속 상태);
		return;
	}


	$delvar(strSSLSendData);

	$setvar(
		jsonName=jsonTest
		, strCode=TESTCODE
		, strDetailID=TEST DETAIL ID
	);
	$json_create($jsonName);

	/*
	//휴대폰 연계은행 코드 요청
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_BANK);
	// MO_BANK
	*/

	/*
	//휴대폰 계좌 명의 확인
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_BNKNAME
	// MO_BNKNAME
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,BNK_CODE,,BK09);
	// 은행코드
	$json_setdata($jsonName,BODY,BNK_NO,,1002831573735);
	// 은행계좌번호
	*/

	/*
	//휴대폰 인증번호 발송
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_AUTH_REQ);
	// MO_AUTH_REQ
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,RMN_NO,,8702031018814);
	// 고객주민등록번호
	$json_setdata($jsonName,BODY,TEL_NUM,,01049076475);
	// 고객전화번호
	$json_setdata($jsonName,BODY,TP,,1);
	// 통신사구분(1고정) 1 : SKT, 2 : KT, 3 : LGU+, 4 : SKT알뜰, 5 : KT알뜰, 7 : LGU+알뜰
	$json_setdata($jsonName,BODY,CLNT_NM,,이승준);
	// 고객명
	*/

	/*
	//휴대폰 인증번호 확인
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_AUTH_RSP);
	// MO_AUTH_RSP
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,RMN_NO,,8702031018814);
	// 고객주민등록번호
	$json_setdata($jsonName,BODY,TEL_NUM,,01049076475);
	// 고객전화번호
	$json_setdata($jsonName,BODY,CODE,,);
	// 응답코드
	*/

	/*
	//영상 통화 신청
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_REQUEST);
	// MO_REQUEST
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,DEV_OS,,OS02);
	// OS01 : 안드로이드 OS02 : IOS
	$json_setdata($jsonName,BODY,DEV_TOKEN,,);
	// 디바이스 토큰 (Push 용)
	$json_setdata($jsonName,BODY,CLNT_NM,,이승준);
	// 고객명 (40이하)
	$json_setdata($jsonName,BODY,RMN_NO,,8702031018814);
	// 고객주민등록번호
	$json_setdata($jsonName,BODY,TEL_NUM,,01049076475);
	// 고객전화번호
	$json_setdata($jsonName,BODY,RESV_STDT,,2017060113);
	// 예약시작일시(YYYYMMDDHH)
	$json_setdata($jsonName,BODY,RESV_EDDT,,2017060113);
	// 예약종료일시(YYYYMMDDHH)
	$json_setdata($jsonName,BODY,F1,,);
	// 개인정보선택동의 10 : 수집이용, 20 : 업무위탁, 30 : 식별번호, 40 : 마케팅이용여부 (중복 선택인 경우 이어 붙인다.) 102030, 1030, 2030
	$json_setdata($jsonName,BODY,HOME_INFO,,{});
	// 자택정보
	$json_setdata($jsonName,BODY.HOME_INFO,HP_NUM,,01049076475);
	// 휴대폰
	$json_setdata($jsonName,BODY.HOME_INFO,TEL_NUM,,);
	// 전화번호
	$json_setdata($jsonName,BODY.HOME_INFO,EMAIL,,oofm1234@naver.com);
	// 이메일주소
	$json_setdata($jsonName,BODY.HOME_INFO,HOME_POST_NO,,);		
	$json_setdata($jsonName,BODY.HOME_INFO,HOME_ADDR,,);
	$json_setdata($jsonName,BODY.HOME_INFO,HOME_ADDR2,,);
	// 화면에서는 <roadAddr>값으로 보여주고 <roadAddrPart1>값으로 기본주소를 넣어서 보낸다
	$json_setdata($jsonName,BODY,CMP_INFO,,{});
	// 직장정보(정보가 없으면 기존계좌정보와 동일)
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_NM,,);
	// 직장명(빈값이면 직장없음)
	$json_setdata($jsonName,BODY.CMP_INFO,PART_NM,,);
	// 부서명
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_TEL,,);
	// 직장전화
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_FAX,,);
	// 직장팩스
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_POST_NO,,); 
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_ADDR,,); 
	$json_setdata($jsonName,BODY.CMP_INFO,CMP_ADDR2,,);
	// 화면에서는 <roadAddr>값으로 보여주고 <roadAddrPart1>값으로 기본주소를 넣어서 보낸다
	$json_setdata($jsonName,BODY,PD1,,);
	// 계좌개설 국내선물 10 : 국내선물, 20 : 해외선물 (중복 선택인 경우 이어 붙인다 1020)
	$json_setdata($jsonName,BODY,WON_BNK,,{});
	// 원화계좌
	$json_setdata($jsonName,BODY.WON_BNK,BNK_CODE,,);
	// 은행코드
	$json_setdata($jsonName,BODY.WON_BNK,BNK_NO,,);
	// 은행계좌번호
	$json_setdata($jsonName,BODY,FORE_BNK,,{});
	// 외화계좌
	$json_setdata($jsonName,BODY.FORE_BNK,BNK_CODE,,);
	// 은행코드
	$json_setdata($jsonName,BODY.FORE_BNK,BNK_NO,,);
	// 은행계좌번호
	$json_setdata($jsonName,BODY,NEW_PW,,);
	// 개설계좌 비밀번호
	$json_setdata($jsonName,BODY,ONLINE_ID,,);
	// 온라인 아이디
	$json_setdata($jsonName,BODY,ONLINE_PW,,);
	// 온라인 비밀번호
	$json_setdata($jsonName,BODY,PICTURE,,{});
	// 실명증표
	$json_setdata($jsonName,BODY.PICTURE,IMAGE,,);
	// 실명증표사진 - Base64
	$json_setdata($jsonName,BODY.PICTURE,IDCARD_TYPE,,);
	// ID01 : 주민등록증, ID02 : 운전면허증
	$json_setdata($jsonName,BODY.PICTURE,RMN_DATE,,);
	// 주민등록증 발급일자
	$json_setdata($jsonName,BODY.PICTURE,DRV_NO,,);
	// 운전면허번호
	$json_setdata($jsonName,BODY.PICTURE,DRV_CODE,,);
	// 운전면허증 암호일련번호
	*/

	/*
	//영상예약통화수정
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_RESERV);
	// MO_RESERV
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	$json_setdata($jsonName,BODY,RESV_STDT,,);
	// 예약시작일시(YYYYMMDDHH)
	$json_setdata($jsonName,BODY,RESV_EDDT,,);
	// 예약종료일시(YYYYMMDDHH)
	*/

	/*
	//휴대폰 푸시 수신(휴대폰 푸시 수신시에 AP 서버에 접속해서 요청, 이후 연결 유지)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_RECV);
	// MO_RECV
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	*/

	/*
	//AP서버 재접속(AP서버와의 연결이 끊겼을때 재접속 요청)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_RECONNECT);
	// MO_RECONNECT
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	*/

	/*
	//영상통화시작(영상통화를 하겠다고 AP 서버에게 알려줌)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_PLAY);
	// MO_PLAY
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	*/

	/*
	//영상통화거절(영상통화를 할수 없다고 AP서버에게 알려줌)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_NOPLAY);
	// MO_NOPLAY
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	*/

	/*
	//영상통화중지(사용자에 의해서 영상통화가 중지될때 AP서버에게 알려줌)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_STOP);
	// MO_STOP
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	*/

	/*
	//영상통화종료(상담쪽에서 영상 상담이 완료되었다고 AP 서버를 통해서 전달받음)
	//상담이 완료된 후에는 영상 화면을 닫고 대기 상태 화면으로 이동해서 AP 서버로부터 결과를 기다려야한다.
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_SAVE);
	// MO_SAVE
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	*/

	/*
	//계좌개설결과(AP서버로부터 결과를 전달 받음)
	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0);
	// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,MO_RESULT);
	// MO_RESULT
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,USER_ID,,);
	// 상담사ID
	$json_setdata($jsonName,BODY,WORK_NO,,);
	// 상담번호
	$json_setdata($jsonName,BODY,STAT,,);
	// ST11 : 정상처리완료, ST13 : 영상통화 거절
	$json_setdata($jsonName,BODY,MSG,,);
	// 메시지
	*/





	$json_print($jsonName);
	$json_getfullstring($jsonName,strSSLSendData);

	$json_delete($jsonName);

	$logvar(strSSLSendData);

	$callaction(ssl_datasend,$m_sSSLSocketName,strSSLSendData);
"/>

<action id="ssl_datasend" params="sSocketName,datavarname,data" value="
	if($getvarlen(sSocketName) <= 0) {
		$alert(,ssl_datasend 소켓명이 없습니다.);
		return;
	}
	if(!$ssl_isconnect($sSocketName)) {
		$alert(,ssl_datasend 소켓[$sSocketName]이 미접속상태입니다.);
		return;
	}

	if($getvarlen($datavarname) <= 0) {
		if($getvarlen(data) <= 0) {
			$alert(,ssl_datasend 보낼 데이터가 없습니다.);
			return;
		}
		$setvar(dataname=data);
	}
	else {
		$setvar(dataname=$datavarname);
	}
//	$geteuckr($dataname);

	$delvar(sSSLSendData);
	$delvar(sNewSSLSendData);

	if($bNetLength) {
		// 바이너리 길이를 셋팅하는 구조인 경우
		$addvardata_int(sSSLSendData,$getvarlen($dataname));
	}
	else if($bStringLength) {
		// 스크링 스타일이 길이를 셋팅하는 구조인 경우..길이의 사이즈가 4일 경우
//		$setvar(sSSLSendData=$format('%04d', $getvarlen($dataname)));
	}
	else {
		// 앞에 길이를 셋팅하지 않는 방법이면
//		$setvar(sSSLSendData=);
	}

	$addvar(sSSLSendData,$dataname);

//	$logvar(sSSLSendData);
	if($bBase64Encode) {
		$base64_encode(sSSLSendData,sNewSSLSendData);
	}
	else {
		$memcpy(sNewSSLSendData,sSSLSendData);
	}
	$logvar(sNewSSLSendData,$dataname);
	if(!$ssl_send($sSocketName,sNewSSLSendData)) {
		$alert(,ssl_datasend 소켓[$sSocketName]이 전송실패입니다.);
		return;
	}
"/>

<action id="json_test" value="
	$setvar(
		jsonname=FirstJson
		, rootname=rootdata
	);
	$setvar(jsondata=$({'trcode':'code0001','code':'001','rootdata':{'trcode':'root0001','code':'002'},'rootarray':['aa', 'bb', 'cc'],'subobj':{'rootarray':['11', '22', '33']}}));

	$logvar(jsondata);
	$json_create($jsonname); // json_create(JSONNAME)
//	$json_parsebuffer($jsonname,{'trcode':'code0002'}); // json_parsebuffer(JSONNAME, DATA, VARNAME, ADDFLAG)
	$json_parsebuffer($jsonname,jsondata);

	$json_print($jsonname);

//	$log(jsondata1 = $json_getdata($jsonname,trcode));
//	$log(jsondata2 = $json_getdata($jsonname,code));
//	$log(jsondata3 = $json_getdata($jsonname,rootdata));
//	$log(jsondata4 = $json_getdata($jsonname,rootdata.trcode));
//	$log(jsondata5 = $json_getdata($jsonname,rootarray[1]));
//	$log(jsondata6 = $json_getdata($jsonname,subobj.rootarray[1]));

	$json_cleardata($jsonname);
	$json_print($jsonname);

	$json_setdata($jsonname,,VER,,1.0);
	$json_setdata($jsonname,,CMD,,MO_BANK);
	$json_print($jsonname);

	$json_cleardata($jsonname);
	$json_setdata($jsonname,,CMD,,MO_BANK);
	$json_setdata($jsonname,,RET,,OK);
	$json_setdata($jsonname,,MSG,,MESSAGE);

	$setvar(arraydata=$([{'BNK_CODE':'01','BNK_NM':'TESTBACK1','BNK_WON':'1'},{'BNK_CODE':'02','BNK_NM':'TESTBACK2','BNK_WON':'1'}]));
	$logvar(arraydata);
	$json_setdata($jsonname,,BNKS,arraydata);
	$json_print($jsonname);

	$log(jsondata1 = $json_getdata($jsonname,BNKS[1].BNK_NM));

	$json_getdata($jsonname,BNKS[1].BNK_NM,strBNKName);
	$logvar(strBNKName);
	$delvar(strBNKName);
	$json_getdata($jsonname,BNKS[1].BNK_NM,strBNKName,local);
	$logvar(strBNKName);
	$delvar(strBNKName);
	$json_getdata($jsonname,BNKS[1].BNK_NM,strBNKName,common);
	$logvar(strBNKName);
	$delvar(strBNKName);

	$json_cleardata($jsonname);

	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonname,HDR,CMD,,MO_BANK);
	$json_setdata($jsonname,HDR,RET,,OK);
	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonname,BODY,MSG,,MESSAGE);
	$json_setdata($jsonname,BODY,RESULT,,);
	$json_setdata($jsonname,BODY,BNKS,arraydata);
	$json_setdata($jsonname,BODY,BNKS,,[]);
	$json_setarraydata($jsonname,BODY.BNKS,0,,{});
	$json_setdata($jsonname,BODY.BNKS[0],BNK_CODE,,01);
	$json_setdata($jsonname,BODY.BNKS[0],BNK_NM,,TESTBACK1);
	$json_setdata($jsonname,BODY.BNKS[0],BNK_WON,,1);
	$json_setarraydata($jsonname,BODY.BNKS,1,,{});
	$json_setdata($jsonname,BODY.BNKS[1],BNK_CODE,,02);
	$json_setdata($jsonname,BODY.BNKS[1],BNK_NM,,TEST2);
	$json_setdata($jsonname,BODY.BNKS[1],BNK_WON,,1);
//	$json_setarraydata($jsonname,BODY.BNKS,2,,TEST03);
	$json_setarraydata($jsonname,BODY.BNKS,3,,{});
	$json_setdata($jsonname,BODY.BNKS[3],BNK_CODE,,04);
	$json_setdata($jsonname,BODY.BNKS[3],BNK_NM,,TESTBACK4);
	$json_setdata($jsonname,BODY.BNKS[3],BNK_WON,,4);

	$json_print($jsonname);

	$delvar(strJsonFullString);
	$json_getfullstring($jsonName,strJsonFullString);
	$logvar(strJsonFullString);
	$json_delete($jsonname); // json_delete(JSONNAME)
"/>