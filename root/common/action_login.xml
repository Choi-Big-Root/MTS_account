<?xml version="1.0" encoding="UTF-8" ?>

//<import filename="plist/root/common/error_code.xml" />
<actiondata value="
	$setvar_common(
		,g_channel_type = 2 		// channel type 1:HTS
		,g_connect_type = H		//Connection type H:HTS F:FRONT B:BACKOFFICE
		,g_os_version = $deviceinfo(SYSTEMNAME)

		,g_winwaydatadouble=true
		,g_winwaybuffersize=9

		,g_alarmMsg_time = 3 			// 호스트메세지 알림 시간 - 추후 1초로 변경 
	);

	if($g_isAndroid){
		$setvar_common(
			g_mac_address = $deviceinfo(MACADDRESS)					//  안드로이드는 Mac Address - 전화번호가 나옴.
		);
	}
	else{
		$setvar_common(
			g_mac_address = $replace(-,,$deviceinfo(UUID))				// $deviceinfo(UUID) 넣으면 안됨  아이폰은 UUID,  안드로이드는 Mac Address
		);
	}
	$log(UUID길이:$strlen($g_mac_address),  $g_mac_address);


	$setvar_common(
		bBase64Encode 				= false
		, bStringLength 			= false
		, bNetLength 				= true	// htonl 함수를 사용하는 방법
		, bRecvServerMultiStart 	= false
	);
" />
<!--
// 인증서 로그인 
<action id="Act_Id_Request" scope="common" 
params="
 p_cert_dn
,p_varname_cert
,p_after_action
,p_after_action_user		// 인증서 요청처리 후 액션 
,p_call_id
"
value="
	//$log(Act_Id_Request 함수 시작);
	$setvar(id_buff = $p_call_id);
	$logvar(recv_count_request);
	//$log(if문 통과전 id_buff[$id_buff]);
	if($getvarlen(id_buff) <= 0) {
	//	$log(Act_Id_Request id_buff 없을경우);
		if($recv_count_request >= 2){
			//$log(Act_Id_Request 아이디 두개이상일경우);
			$setvar(id_buff = $select_id);
		}
		else{
			//$log(Act_Id_Request 아이디 하나일경우);
			$setvar(id_buff = $recv_user_id_request);
		}
	}
	//$log(if문 통과후 id_buff[$id_buff]);
	$logvar(p_varname_cert);
	$logvar(select_id);
	$logvar(recv_user_id_request);
	$logvar(id_buff);
	$logvar(p_call_id);
	$logvar(p_cert_dn);
	$setvar(
		,tmp_varname_cert 					= $p_varname_cert
		,tmp_id_request_after_action 		= $p_after_action
		,tmp_id_request_after_action_user 	= $p_after_action_user

		//,IN_wktp 	= 2           //아이디 선택 이전에 사용하던 코드
		,IN_wktp 	= 3           //인증서 로그인시 현재 사용중(usid값 필요함)
		,IN_usid 	= $id_buff
		,IN_cadn	= $p_cert_dn
	);

	//클라우드 분기
	if($g_login_cloud_check_flag){
		$setvar(
			,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,Act_Id_Request_Cloud_After)
		);
	}else{
		$setvar(
			,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,Act_Id_Request_After)
		);
	}
" />
//클라우드
<action id="Act_Id_Request_Cloud_After" scope="common"
value="
	$setvar(
		recv_dn_id_request 			= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_casn_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_capw_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_cass_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_usid_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	$logvar(
		recv_dn_id_request
		,recv_casn_id_request
		,recv_capw_id_request
		,recv_cass_id_request
		,recv_usid_id_request
	);
	$setvar(var_name_id = recv_usid_id_request); 		// 인증서 로그인시 아이디를 받아와서 저장한다. 

	if($isequal_string($recv_cass_id_request,3)
	|| $isequal_string($recv_cass_id_request,4)
	|| $isequal_string($recv_cass_id_request,A)
	|| $isequal_string($recv_cass_id_request,B)
	){
		//$alertaction(,,공동인증서 에러,확인);
		$callaction(fnPopover_AlertAction,,공동인증서 에러,,확인);
		return;
	}
    if($isequal_string($recv_cass_id_request,9))
    {
        $alertaction(,,공동인증서를 등록하지 않았습니다. 홈페이지에서 등록 후 시도하십시오.,확인);
        //$callaction(fnPopover_AlertAction,,공동인증서를 등록하지 않았습니다.\n홈페이지에서 등록 후 시도하십시오.,,확인);
        return;
    }
	if($strlen($recv_usid_id_request) < 1){
		$alertaction(Act_Go_Intro,,서버에서 아이디를  가져오지 못하였습니댜.,확인);
		//$callaction(fnPopover_AlertAction,,서버에서 아이디를  가져오지 못하였습니댜.,,확인);
		return;
	}
	$logvar(
		recv_dn_id_request
		,g_login_cloud_check_flag
	);

	$setvar(
		,tmp_varname_cert = $getvar_common($tmp_varname_cert)
	);

	$callaction(fnCloudCheckCertConnectCommonBefore,true,true,$recv_dn_id_request,,$tmp_varname_cert,Act_Id_Request_Cloud_After_2);
"/>
//$callaction(fnGoLoginScreen,1); 
<action id="Act_Go_Intro" scope="common"
value="
	$openfile(plist/root/intro.xml);
"/>
//함수 이름 변경해야 합니다.
<action id="Act_Id_Request_Cloud_After_2" scope="common"
value="

	if($cloud_common_check_pin){
		$log(***** 공동인증서 비밀번호 정상);
		// 비밀번호 초기화 후 서명검증 TR 보낸다. 
		$callaction(Act_Cloud_Cert_Pass_Init,$cloud_common_dn_idx,$var_name_id,,$tmp_varname_cert,$tmp_id_request_after_action);
		return;
	}

	//완료.
	if(!$cloud_common_check_pin){
		$closescreen(pop_host_msg);
		$log(***** 공동인증서 비밀번호 오류 );
		//$callaction(Act_Cloud_Cert_Pass_Error,$cloud_common_dn_idx,$recv_usid_id_request,Act_Cert_Input_Init_Dn);
		return;
	}

	/* 이거 붙어 있는곳들은 전부 이미 dn 존재하는지 체크 다해놓고 여기서 또하는이유를 모르겠음..
	if($recv_dn_idx < 0){
		$closescreen(pop_host_msg);
		$callaction(fnPopover_AlertAction,fnGoCertifyScreenConfirm,인증서가 존재하지 않습니다.\n공동인증센터로 이동하시겠습니까?,취소,확인);
		return;
	}
	*/
"/>
//로컬
<action id="Act_Id_Request_After" scope="common" 
value="
	$setvar(
		recv_dn_id_request 			= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_casn_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_capw_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_cass_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_usid_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	$logvar(
		recv_dn_id_request
		,recv_casn_id_request
		,recv_capw_id_request
		,recv_cass_id_request
		,recv_usid_id_request
	);
	$setvar(var_name_id = recv_usid_id_request); 		// 인증서 로그인시 아이디를 받아와서 저장한다. 

	if($isequal_string($recv_cass_id_request,3)
	|| $isequal_string($recv_cass_id_request,4)
	|| $isequal_string($recv_cass_id_request,A)
	|| $isequal_string($recv_cass_id_request,B)
	){
		//$alertaction(,,공동인증서 에러,확인);
		$callaction(fnPopover_AlertAction,,공동인증서 에러,,확인);
		return;
	}
    if($isequal_string($recv_cass_id_request,9))
    {
        //$alertaction(,,공동인증서를 등록하지 않았습니다. 홈페이지에서 등록 후 시도하십시오.,확인);
        $callaction(fnPopover_AlertAction,,공동인증서를 등록하지 않았습니다.\n홈페이지에서 등록 후 시도하십시오.,,확인);
        return;
    }
	if($strlen($recv_usid_id_request) < 1){
		//$alertaction(,,서버에서 아이디를  가져오지 못하였습니댜.,확인);
		$callaction(fnPopover_AlertAction,,서버에서 아이디를  가져오지 못하였습니댜.,,확인);
		return;
	}

	$setvar(
		recv_dn_idx = $cert_getdnindex($recv_dn_id_request)
	);
	$logvar(recv_dn_idx);

	if($strlen($recv_dn_idx) < 0){
		//$alertaction(Act_GoScreen_GetCertificate,,등록된 인증서가 없습니다.\n인증서를 가져오세요,확인);
		$callaction(fnPopover_AlertAction,Act_GoScreen_GetCertificate,등록된 인증서가 없습니다.\n인증서를 가져오세요,,확인);
		return;
	}
	$logvar(tmp_varname_cert);
	$setvar(	idx_pass_check	= $callaction(Act_Certify_Pass_Check,$recv_dn_id_request,$tmp_varname_cert)	);

	$logvar(recv_dn_id_request ,idx_pass_check );

	if($idx_pass_check  > -1){ 		// 정상 : 인증서 인덱스 
		$log(***** 공동인증서 비밀번호 정상);
		// 비밀번호 초기화 후 서명검증 TR 보낸다. 
		$callaction(Act_Cert_Pass_Init,$idx_pass_check,$var_name_id,,$tmp_varname_cert, $tmp_id_request_after_action); 	
		return;
	}
	elseif($idx_pass_check  == -1){ 		// 비밀번호 오류 
		$closescreen(pop_host_msg);
		$log(***** 공동인증서 비밀번호 오류 );
		$callaction(Act_Cert_Pass_Error, $recv_dn_idx,$recv_usid_id_request, Act_Cert_Input_Init_Dn); 	
		return;
	}
	elseif($idx_pass_check  == -2){ 		// 인증서 없음. 
		$closescreen(pop_host_msg);
		if($g_cert_login_status){
			$callaction(fnGoLoginScreen,1); 
			$callaction(fnPopover_AlertAction,,인증서가 존재하지 않습니다.\n로그아웃 됩니다.,,확인);
			return;	
		}
		//$alertaction(fnGoCertifyScreenConfirm,,인증서가 존재하지 않습니다.\n공동인증센터로 이동하시겠습니까?,취소,확인);
		$callaction(fnPopover_AlertAction,fnGoCertifyScreenConfirm,인증서가 존재하지 않습니다.\n공동인증센터로 이동하시겠습니까?,취소,확인);
		return;
	}
	else{
		$closescreen(pop_host_msg);
		$log(***** 공동인증서 에러 );
		return;
	}
"/>

// 공동인증서 로그인 가능 아이디 호출
<action id="Act_Id_Select" scope="common" 
params="
	p_dn_key
"
value="
	$setvar(value_dn = $p_dn_key);
	$setvar(
		,IN_CADN 							= $p_dn_key

		,reqid_CSBLDNTR = $callaction(FNSEND_ORDERDATA,CSBLDNTR,Input,,,,Act_Id_Select_After)
	);
	$logvar(IN_CADN);
" />
<action id="Act_Id_Select_After" scope="common" 
value="
	$setvar(
		recv_count_request 			= $recvmap_data(CSBLDNTR,PageBlock.count,$reqid_CSBLDNTR,trim)
		,recv_user_id_request 		= $recvmap_data(CSBLDNTR,OutBlock.user_id,$reqid_CSBLDNTR,trim)
	);

	// 테스트용 이후 주석처리해야함.
	//$setvar(recv_count_request=000003);

	$logvar(recv_count_request);
	$logvar(recv_user_id_request);

	if($var_select_div == 1){		// 인증서 로그인의 경우
		$setvar(value_cert = g_user_pw_cert_var_kind_2);
		$logvar(g_user_pw_cert_var_kind_2);
		$logvar(value_cert);
		if($strlen($g_user_pw_cert_var_kind_2) <= 0){
			$alert(,,비밀번호를 입력하세요.,확인);
			$closescreen(pop_host_msg);
			return;
		}
	}
	elseif($var_select_div == 2){	// 지문 로그인의 경우
		$setvar(value_cert = g_fingerprint_login_cert_pwd_enc);
	}

	if($recv_count_request >= 1){
		if($recv_count_request == 1){
			$log(######기존로그인절차);

			

			$setvar(
				var_name_id 		=  				// 아이디  변수명 
				,var_name_pwd 		=  				// 비밀번호  변수명 
				,var_name_cert 		= $value_cert	// 공동인증서 변수명 
				,var_login_type 	= $vg_login_kind.selectkey 	// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
				,var_login_kind 	= $tmp_in_user_kind 		//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
				,var_is_id_save 	= $check_saveId.checked 	// 아이디 저장여부 
				,var_dn_value  		= $value_dn 		// dn값 
			);
			if($var_select_div == 3){		// 지문등록 액션호출
				$callaction(fnFingerPrintCertRegist);
				return;
			}
			$setvar(
				tmp_login_gubun = 2
			);
			$callaction(Act_Server_IP_Check_action_login);
			
		}
		elseif($recv_count_request >= 2){
			
			$log(######아이디 선택화면 띄움.);
			$setuserinfo(CSBLDNTR,$reqid_CSBLDNTR,tr_CSBLDNTR);
			$MakeUserQuery(tr_CSBLDNTR_outblock,tr_CSBLDNTR,OutBlock,1);
			$makeuserarray(tr_CSBLDNTR_outblock,arr_id_list);
			$logarrayvar(arr_id_list);
			$closescreen(pop_host_msg);
			$popscreen(popscreen_select_id);
		}
	}
	elseif($recv_count_request <= 0){
		$log(######인증서 로그인 가능 아이디 없음.);
		//$alertaction(,,인증서 로그인 가능 아이디 없음.,확인);
		$callaction(fnPopover_AlertAction,,인증서 로그인 가능 아이디 없음,,확인);
		$closescreen(pop_host_msg);
		return;
	}
"/>
// 아이디 로그인 
<action id="Act_Sise_Login_d" scope="common" 
params="
p_varname_id
, p_varname_pwd
, p_after_action
" 
value="
	$setvar(
		,tmp_sise_login_after_action = $p_after_action
		,IN_ctyp 	= $g_channel_type				// 접속매체구분(1:HTS, 2:MTS, 3:WTS)
		,IN_cont 	= $g_connect_type				// 접속사용자구분(H:HTS, F:FRONT, B:BACKOFFICE)
		//,IN_loip 	= $deviceinfo(IPADDRESS)			// 로컬IP
		,IN_loip 	= $g_ip_local					// 로컬IP
		,IN_maca 	= $g_mac_address 				// 하드웨어MAC
		,IN_clnm 	=  						// ClientPcName
		,IN_usid 	= $getvar($p_varname_id) 					// 사용자아이디
		,IN_pswd 	= $getvar($p_varname_pwd)  				// 사용자패스워드
		,IN_lutp 	=  1						// 로그인구분(1:일반,2:인증서)
		,IN_cadn 	=  						// 인증서DN값

		

		,reqid_CSBLOGIN = $callaction(FNSEND_ORDERDATA,CSBLOGIN,Input,,,,Act_Sise_Login_d_after)
	);
"/>
// 인증서  로그인 
<action id="Act_Sise_Login_cert_d" scope="common" 
params="
p_varname_id
, p_dn
, p_after_action
" 
value="
	$setvar(
		,tmp_sise_login_after_action = $p_after_action
		,IN_ctyp 	= $g_channel_type				// 접속매체구분(1:HTS, 2:MTS, 3:WTS)
		,IN_cont 	= $g_connect_type				// 접속사용자구분(H:HTS, F:FRONT, B:BACKOFFICE)
		//,IN_loip 	= $deviceinfo(IPADDRESS)			// 로컬IP
		,IN_loip 	= $g_ip_local					// 로컬IP
		,IN_maca 	= $g_mac_address 				// 하드웨어MAC
		,IN_clnm 	=  						// ClientPcName
		,IN_usid 	= $getvar($p_varname_id) 					// 사용자아이디
		,IN_pswd 	=   				// 사용자패스워드
		,IN_lutp 	=  2						// 로그인구분(1:일반,2:인증서)
		,IN_cadn 	=  $p_dn						// 인증서DN값

		

		,reqid_CSBLOGIN = $callaction(FNSEND_ORDERDATA,CSBLOGIN,Input,,,,Act_Sise_Login_d_after)
	);

"/>

<action id="Act_Server_IP_Check_action_login" scope="common"
value="

	$callaction(Act_Id_Request, $var_dn_value, $var_name_cert ,Act_Login_End);
	/*
	$log(%%%%%%%%%%%%%%%%%%% ip주소 SEND %%%%%%%%%%%%%%%%%%%);
	$delvar(strSendData,strTrHeader);

	$setsocketaction($g_SiseSocketName_DOMESTIC,Act_Network_RecvData_IP_xml_action_login,); 	// RecvAction 을 변경하여 보낸다. 

	$setvar(
		LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
		,MYMQ_TH_PKT_LEN=$result($LEN_MYMQ_TH)
	);
	$logvar(
		,LEN_MYMQ_TH 	
		,MYMQ_TH_PKT_LEN
	);

	// Packet Indicator OR 연산으로 추가 
	$setbit(MYMQ_HEADER_PKTI_1,0x01);	// RHI Following RH
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator
	$setbit(MYMQ_HEADER_FUNC,0x01);
	//$setvar(MYMQ_HEADER_FUNC=C); 		// A:Sign-on B:Notify signed user's id, C:General REquest for transactions

	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가

	$logvar_binary(strSendData,strSendData);

	$sendvardata($g_SiseSocketName_DOMESTIC,,strSendData,$MYMQ_RH_WKEY,,,TRUE);	

	return $MYMQ_RH_WKEY;
	*/
"/>
<action id="Act_Sise_Login_d_after" scope="common" 
value="	
	$setvar_common(
		g_recv_UserName 	= $recvmap_data(CSBLOGIN,PageBlock.UserName,$reqid_CSBLOGIN,trim)  //사용자이름
		,g_recv_stat 	= $recvmap_data(CSBLOGIN,PageBlock.stat,$reqid_CSBLOGIN,trim) 			//ID상태
		,g_recv_mutl 	= $recvmap_data(CSBLOGIN,PageBlock.mutl,$reqid_CSBLOGIN,trim) 			//중복로그인여부
		,g_recv_warn 	= $recvmap_data(CSBLOGIN,PageBlock.warn,$reqid_CSBLOGIN,trim) 			//위험고지
		,g_recv_ltim	= $recvmap_data(CSBLOGIN,PageBlock.ltim,$reqid_CSBLOGIN,trim) 			//직전 접속시간
		,g_recv_otim	= $recvmap_data(CSBLOGIN,PageBlock.otim,$reqid_CSBLOGIN,trim) 			//직전 접속해제시간
		,g_recv_ipad	= $recvmap_data(CSBLOGIN,PageBlock.ipad,$reqid_CSBLOGIN,trim) 			//직전 접속 IP정보
		,g_recv_jgtp	= $recvmap_data(CSBLOGIN,PageBlock.jgtp,$reqid_CSBLOGIN,trim) 			//국내선물 장구분 1:야간장 2:주간장
		,g_recv_kodt	= $recvmap_data(CSBLOGIN,PageBlock.kodt,$reqid_CSBLOGIN,trim) 			//국내선물 영업일자
		,g_g_recv_gldt	= $recvmap_data(CSBLOGIN,PageBlock.gldt,$reqid_CSBLOGIN,trim) 			//해외선물 영업일자
		,g_recv_idno	= $recvmap_data(CSBLOGIN,PageBlock.idno,$reqid_CSBLOGIN,trim) 			//WEB -주민등록번호
		,g_recv_cadn	= $recvmap_data(CSBLOGIN,PageBlock.cadn,$reqid_CSBLOGIN,trim) 			//WEB -CA DN value
	);
	// 256byte 헤더 복사해서 함. 
	//$callaction(Act_Sise_Login, $tmp_name_id, $tmp_name_pwd, Act_Sise_Login_after);  		// 서버응답 없음.
	$callaction(Act_Sise_Login, $tmp_name_id, $tmp_name_pwd, );  		// 서버응답 없음.

	$log(애프터:$tmp_sise_login_after_action);
	$callaction($tmp_sise_login_after_action, $tmp_name_id,$tmp_name_pwd, $tmp_name_cert, $tmp_login_kind,$tmp_is_id_save);
	return;
	// 주문체결 서버 연결은 로그인 이후로 변경함.

	/*
	if($g_OrderServerCheckSimulation){
		if($g_is_server_separate_simulation){
			// 주문체결 서버 연결 
			$callaction(Act_Network_Connect
				, $g_RealSocketName_Order
				, $g_RealServerIP_Order
				, $g_RealServerPort_Order
				, 256
				, 511
				, 0		
				, Act_Network_RecvData_OrderReal 	// 주문체결만 분리함
				, Act_Server_Connect_ORDER 			// 연결 후 액션 
			);
		}
		else{
			$callaction($tmp_sise_login_after_action, $tmp_name_id,$tmp_name_pwd, $tmp_name_cert, $tmp_login_kind,$tmp_is_id_save);
		}
	}
	else{
		if($g_is_server_separate){
			// 주문체결 서버 연결 
			$callaction(Act_Network_Connect
				, $g_RealSocketName_Order
				, $g_RealServerIP_Order
				, $g_RealServerPort_Order
				, 256
				, 511
				, 0		
				, Act_Network_RecvData_OrderReal 	// 주문체결만 분리함
				, Act_Server_Connect_ORDER 			// 연결 후 액션 
			);
		}
		else{
			$callaction($tmp_sise_login_after_action, $tmp_name_id,$tmp_name_pwd, $tmp_name_cert, $tmp_login_kind,$tmp_is_id_save);
		}
	}	
	*/
" />
<action id="Act_Server_Connect_ORDER" scope="common" 
params="p_socket_name, p_socket_no"
value="
	if($p_socket_no<0){
		$log(************* 주문체결 실시간 서버 연결에러 );
		$stopnstimer(TIMER_POLLING);  $log(***** 폴링중지 9);
		return;
	}
	$callaction(Act_MaploadNSetpath
		, $p_socket_name
		, $g_path_map
		, g_arrLoadmapFile
		, g_arrMapPathFile
		, xml
	);

	$setvar_common(g_iSocketNumber_ORDERREAL=$p_socket_no);

	$log(******* 현재 서버연결 : g_RealServerIP_Order:$g_RealServerIP_Order);
	$setvar(
		lbl_tmp_connect_ip.value = $g_RealServerIP_Order
	);
	
	$callaction(Act_Real_Login, $tmp_name_id, $tmp_name_pwd, );  		// 서버응답 없음.
	//$log(애프터:$tmp_sise_login_after_action);
	$callaction($tmp_sise_login_after_action, $tmp_name_id,$tmp_name_pwd, $tmp_name_cert, $tmp_login_kind,$tmp_is_id_save);
" />
<action id="Act_Real_Login" scope="common" 
params="
p_name_id
, p_name_pwd
, p_after_action
"
value="
	// 256byte 그냥 보낸다.
	$setvar(strDataLength=$getvarlen(strApHeaderData));
	$setvar(
		LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
		,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH )
	);
	// Packet Indicator OR 연산으로 추가 
	$setbit(MYMQ_HEADER_PKTI_1,0x00);	
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator
	$setvar(MYMQ_HEADER_FUNC=B); 		// A:Sign-on B:Notify signed user's id, C:General REquest for transactions
	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가
	$addvar(strSendData,strApHeaderData, , , ,false,true);  // 마지막인자  scope
	$sendvardata($g_RealSocketName_Order,,strSendData,0,,$p_after_action,TRUE);	
" />
<action id="Act_Dn_Request" scope="common" 
params="
 p_varname_id
 ,p_varname_pwd
 ,p_varname_cert
,p_after_action 		// 로그인까지 처리함. 

"
value="
	$setvar(
		,tmp_varname_id 		= $p_varname_id
		,tmp_varname_pwd 		= $p_varname_pwd
		,tmp_varname_cert 		= $p_varname_cert
		,tmp_dn_request_after_action 	= $p_after_action
	);
	$logvar(
		,tmp_varname_id 		
		,tmp_varname_pwd 		
		,tmp_varname_cert 		
		,tmp_dn_request_after_action 	
	);

	$setvar(
		,IN_wktp 	= 1
		,IN_usid 	= $getvar($p_varname_id)
		,IN_cadn	= 
	);
	if($g_login_cloud_check_flag){
		$setvar(
			,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,Act_Dn_Request_Cloud_After)	
		);
	}else{
		$setvar(
			,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,Act_Dn_Request_After)	
		);
	}
" />
<action id="Act_Dn_Request_Cloud_After" scope="common"
value="
	$log(여기까지 오면 일단 거의 끝);
	$setvar(
		recv_dn 	= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_casn 	= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_capw 	= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_cass 	= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_usid 	= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	

	$logvar(
		recv_dn
		,recv_casn
		,recv_capw
		,recv_cass
		,recv_usid
	);
	if($isequal_string($recv_cass,3)
	|| $isequal_string($recv_cass,4)
	|| $isequal_string($recv_cass,A)
	|| $isequal_string($recv_cass,B)
	){
		//$alertaction(,,공동인증서 에러,확인);
		$callaction(fnPopover_AlertAction,,공동인증서 에러,,확인);
		return;
	}

	if($strlen($recv_dn) < 1){
		$closescreen(pop_host_msg);
		//$alertaction(,,서버에서 dn값 가져오지 못하였습니댜.,확인);
		$callaction(fnPopover_AlertAction,,서버에서 dn값 가져오지 못하였습니댜.,,확인);
		return;
	}

	$setvar(
		tmp_varname_cert = $getvar_common($tmp_varname_cert)
	);
	$logvar(tmp_varname_cert);

	$callaction(fnCloudCheckCertConnectCommonBefore,true,true,$recv_dn,,$tmp_varname_cert,Act_Dn_Request_Cloud_After2);
	return;
" />
<action id="Act_Dn_Request_Cloud_After2" scope="common"
value="
	
	$logvar(cloud_common_check_pin,cloud_common_dn_idx);
	$logvar(recv_dn ,cloud_common_dn_idx );

	if($cloud_common_check_pin){ 		// 정상 : 인증서 인덱스
		$log(***** 공동인증서 비밀번호 정상 - DN값 저장함 : Cloud);
		$log(일단 대기);
		// 비밀번호 초기화 후 서명검증 TR 보낸다. 
		$callaction(fnConfig_SetValue,g_recv_dn,$recv_dn); 		// 축약서명에 사용하기 위해 dn값 저장 

		$logvar(g_recv_dn);
		$callaction(Act_Cloud_Cert_Pass_Init,$cloud_common_dn_idx,$tmp_varname_id,$tmp_varname_pwd,$tmp_varname_cert, $tmp_dn_request_after_action); 	

		return;
	}
	else{ 		// 비밀번호 오류 
		$log(***** 공동인증서 비밀번호 오류 );
		$closescreen(pop_host_msg);
		//$callaction(Act_Cloud_Cert_Pass_Error, $cloud_common_dn_idx,$g_user_id_var, Act_Cert_Input_Init); 	
		return;
	}
"/>
<action id="Act_Dn_Request_After" scope="common" 
value="
	$setvar(
		recv_dn 	= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_casn 	= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_capw 	= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_cass 	= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_usid 	= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	

	$logvar(
		recv_dn
		,recv_casn
		,recv_capw
		,recv_cass
		,recv_usid
	);
	if($isequal_string($recv_cass,3)
	|| $isequal_string($recv_cass,4)
	|| $isequal_string($recv_cass,A)
	|| $isequal_string($recv_cass,B)
	){
		//$alertaction(,,공동인증서 에러,확인);
		$callaction(fnPopover_AlertAction,,공동인증서 에러,,확인);
		return;
	}

	if($strlen($recv_dn) < 1){
		$closescreen(pop_host_msg);
		//$alertaction(,,서버에서 dn값 가져오지 못하였습니댜.,확인);
		$callaction(fnPopover_AlertAction,,서버에서 dn값 가져오지 못하였습니댜.,,확인);
		return;
	}
	$setvar(
		recv_dn_idx = $cert_getdnindex($recv_dn)
	);
	$logvar(recv_dn_idx);

	if($recv_dn_idx < 0){
		$closescreen(pop_host_msg);
		//$alertaction(Act_GoScreen_GetCertificate,,등록된 인증서가 없습니다.\n인증서를 가져오세요,확인);
		$callaction(fnPopover_AlertAction,,등록된 인증서가 없습니다.\n인증서를 가져오세요,,확인);
		return;
	}
	
	$setvar(	idx_pass_check	= $callaction(Act_Certify_Pass_Check,$recv_dn,$tmp_varname_cert)	);

	$logvar(recv_dn ,idx_pass_check );

	if($idx_pass_check  > -1){ 		// 정상 : 인증서 인덱스 
		$log(***** 공동인증서 비밀번호 정상 - DN값 저장함.);
		// 비밀번호 초기화 후 서명검증 TR 보낸다. 
		$callaction(fnConfig_SetValue,g_recv_dn,$recv_dn); 		// 축약서명에 사용하기 위해 dn값 저장 
		$callaction(Act_Cert_Pass_Init,$idx_pass_check,$tmp_varname_id,$tmp_varname_pwd,$tmp_varname_cert, $tmp_dn_request_after_action); 	
		return;
	}
	elseif($idx_pass_check  == -1){ 		// 비밀번호 오류 
		$log(***** 공동인증서 비밀번호 오류 );
		$closescreen(pop_host_msg);
		$callaction(Act_Cert_Pass_Error, $recv_dn_idx,$g_user_id_var, Act_Cert_Input_Init); 	
		return;
	}
	elseif($idx_pass_check  == -2){ 		// 인증서 없음. 
		$closescreen(pop_host_msg);
		//$alertaction(fnGoCertifyScreenConfirm,,인증서가 존재하지 않습니다.\n공동인증센터로 이동하시겠습니까?,취소,확인);
		$callaction(fnPopover_AlertAction,fnGoCertifyScreenConfirm,인증서가 존재하지 않습니다.\n공동인증센터로 이동하시겠습니까?,취소,확인);
		return;
	}
	else{
		$log(***** 공동인증서 에러 );
		$closescreen(pop_host_msg);
		return;
	}
" />
// 로그인 프로세스 도중 에러가 나면 무조건 호출한다. 
<action id="Act_Login_Error" scope="common" 
//params="p_cert_idx"
value="
	$closescreen(pop_host_msg);
	if($g_menuCode==1920){		return;		}
	$callaction(fnConfig_SetValue,g_menuCode 	,1920); 
	$callaction(Act_Network_Disconnect_All);

	$openfile(plist/root/intro.xml); 
" />
// 계좌번호 가져오는데 실패함. 
<action id="Act_Account_Get_Error" scope="common" 
value="
	//$exit();		
" />
// 공동인증서(클라우드) 비밀번호 정상 
<action id="Act_Cloud_Cert_Pass_Init" scope="common" 
params="
p_cert_idx
,p_varname_id
,p_varname_pwd
,p_varname_cert
,p_after_action
"
value="
	$logarrayvar(cloud_arr_user_all_list);

	$setvar(
		,tmp_varname_id 			= $p_varname_id
		,tmp_varname_pwd 			= $p_varname_pwd
		,tmp_varname_cert 			= $p_varname_cert
		,tmp_cert_pass_init_after_action 	= $p_after_action
	);

	$setvar(
		,iCertCount 			= $getarrayvarcount(cloud_arr_user_all_list)
		,init_cert_Policy 		= 클라우드
		,init_cert_SubjectName	= $callaction(fnGetCertSubjectInfo,false,cn,$getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4))
		,init_cert_IssuerName	= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,3)
		,init_cert_Version 		= 없음
		,init_cert_SerialNumber	= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,6)
		,init_cert_Algorithm	= 없음
		,init_cert_Issuer 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,2)
		,init_cert_Subject 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4)
		,init_cert_ValidFrom	= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,7)
		,init_cert_ValidTo 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,8)
		,init_cert_ValidTo2		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,8)
		,init_cert_Organizationname 	= $callaction(fnGetCertSubjectInfo,false,o,$getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4))
		,init_cert_CheckExpired 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,9)
	);
	$logvar(
		,tmp_varname_id 	
		,tmp_varname_pwd 	
		,tmp_varname_cert 	
		,tmp_cert_pass_init_after_action 
		,iCertCount
		,init_cert_Policy 		
		,init_cert_SubjectName	
		,init_cert_IssuerName		
		,init_cert_Version 		
		,init_cert_SerialNumber	
		,init_cert_Algorithm		
		,init_cert_Issuer 		
		,init_cert_Subject 		
		,init_cert_ValidFrom		
		,init_cert_ValidTo 		
		,init_cert_ValidTo2		
		,init_cert_Organizationname 	
		,init_cert_CheckExpired 	

		,recv_cass
	);
	$log(갯수:$iCertCount);

	//$logvar(p_cert_idx);
	//$cert_getpublickey($p_cert_idx,IN_pkey1,false);
	//$logvar_binary(IN_pkey1,IN_pkey1);
	
	$logvar(p_cert_idx,);

	$log(아이디:$tmp_varname_id );
	$log(공동인증:$tmp_varname_cert );
	$logvar_binary(IN_SIGN,IN_SIGN);

	//마지막 인자값 KOSCOMCMSSIGN(3) 으로 하는게 맞는건지 확인.
	$cloudnpki_sign(Act_Cloud_Cert_Pass_Init2,
						$p_cert_idx,
						tmp_varname_cert,
						$tmp_varname_id,
						IN_SIGN,
						IN_SIGN_LEN,
						false,
						true,
						true,
						false,
						3
	);		
"/>
<action id="Act_Cloud_Cert_Pass_Init2" scope="common"
params="p_result,p_varName,p_errMsg"
value="
	 //확인
	if($p_result){
		$logvar_binary(IN_SIGN,IN_SIGN);
		$setvar(
			,IN_usid = $getvar($tmp_varname_id)
			,IN_usdn = $init_cert_Subject
		);
		$logvar(IN_usid,IN_usdn);

		$setvar(
			reqid_CSBOSIGN02= $callaction(FNSEND_ORDERDATA,CSBOSIGN02,Input,,,,Act_Cert_Pass_Init_After)
		);

	}else{
		$callaction(fnPopover_AlertAction,fnLoginProcessFail,전자서명에 실패하였습니다.,,확인);
		return;
	}
"/>
// 공동인증서 비밀번호 정상 
<action id="Act_Cert_Pass_Init" scope="common" 
params="
p_cert_idx
,p_varname_id
,p_varname_pwd
,p_varname_cert
,p_after_action
"
value="
	$setvar(
		,tmp_varname_id 			= $p_varname_id
		,tmp_varname_pwd 			= $p_varname_pwd
		,tmp_varname_cert 			= $p_varname_cert
		,tmp_cert_pass_init_after_action 	= $p_after_action
	);
	$setvar(

		,iCertCount 	= 	$cert_getalldata(cert_list)
		,init_cert_Policy 		= $getarrayvar(cert_list,$p_cert_idx,0)
		,init_cert_SubjectName		= $getarrayvar(cert_list,$p_cert_idx,1)
		,init_cert_IssuerName		= $getarrayvar(cert_list,$p_cert_idx,2)
		,init_cert_Version 		= $getarrayvar(cert_list,$p_cert_idx,3)
		,init_cert_SerialNumber	= $getarrayvar(cert_list,$p_cert_idx,4)
		,init_cert_Algorithm		= $getarrayvar(cert_list,$p_cert_idx,5)
		,init_cert_Issuer 		= $getarrayvar(cert_list,$p_cert_idx,6)
		,init_cert_Subject 		= $getarrayvar(cert_list,$p_cert_idx,7)
		,init_cert_ValidFrom		= $getarrayvar(cert_list,$p_cert_idx,8)
		,init_cert_ValidTo 		= $getarrayvar(cert_list,$p_cert_idx,9)
		,init_cert_ValidTo2		= $getarrayvar(cert_list,$p_cert_idx,10)
		,init_cert_Organizationname 	= $getarrayvar(cert_list,$p_cert_idx,11)
		,init_cert_CheckExpired 	= $getarrayvar(cert_list,$p_cert_idx,12)
	);
	$logvar(
		,tmp_varname_id 	
		,tmp_varname_pwd 	
		,tmp_varname_cert 	
		,tmp_cert_pass_init_after_action 
		,iCertCount
		,init_cert_Policy 		
		,init_cert_SubjectName	
		,init_cert_IssuerName		
		,init_cert_Version 		
		,init_cert_SerialNumber	
		,init_cert_Algorithm		
		,init_cert_Issuer 		
		,init_cert_Subject 		
		,init_cert_ValidFrom		
		,init_cert_ValidTo 		
		,init_cert_ValidTo2		
		,init_cert_Organizationname 	
		,init_cert_CheckExpired 	

		,recv_cass
	);
	$log(갯수:$iCertCount);

	//$logvar(p_cert_idx);
	//$cert_getpublickey($p_cert_idx,IN_pkey1,false);
	//$logvar_binary(IN_pkey1,IN_pkey1);
	
	$logvar(p_cert_idx,);


	$log(아이디:$getvar($tmp_varname_id) );
	$log(공동인증:$getvar($p_varname_cert) );
	$logvar_binary(IN_SIGN,IN_SIGN);

	$log(여기1);
	if($cert_getfulldata($p_cert_idx,$p_varname_cert,$tmp_varname_id,IN_SIGN,IN_SIGN_LEN,false,true,true, $g_cert_is_enc_flag)) {     // 공동인증서 비밀번호 원문으로 들어감.
		//$logvar_binary(IN_SIGN,IN_SIGN);
		$log(여기2);
		$setvar(
			,IN_usid = $getvar($tmp_varname_id) 		// dn값
			,IN_usdn = $init_cert_Subject
			//,IN_sign = 
		);
		$logvar(
			,IN_usid 
			,IN_usdn 
			//,IN_sign
		);
		$setvar(
			reqid_CSBOSIGN02= $callaction(FNSEND_ORDERDATA,CSBOSIGN02,Input,,,,Act_Cert_Pass_Init_After)
		);
	} 
	else{
		//$alertaction(fnLoginProcessFail,,전자서명에 실패하였습니다.,확인,);
		$callaction(fnPopover_AlertAction,fnLoginProcessFail,전자서명에 실패하였습니다.,,확인);
		return;
	}

"/>
<action id="Act_Cert_Pass_Init_Error" 
scope="common" 
value="
	// 로그인 정보 삭제 
	$callaction(fnConfig_SetValue,g_login_id,);
	$callaction(fnConfig_SetValue,g_login_pwd,);
	$callaction(fnConfig_SetValue,g_login_cert,);
	$callaction(fnConfig_SetValue,g_login_type,);
	$callaction(fnConfig_SetValue,g_login_kind,);
	//$callaction(fnConfig_SetValue,g_login_id_save ,$var_is_id_save);
	$callaction(fnConfig_SetValue,g_login_dn,);

	$callaction(fnConfig_SetValue,g_cert_login_status,); 		//공동인증서 로그인 상태

	$callaction(fnConfig_SetValue,g_recv_dn,);
	$setvar_common(g_recv_dn = );

	$logvar(g_login_id, g_login_pwd, g_login_cert, g_login_type, g_login_kind, g_login_id_save,g_login_dn);

	
	// 계좌번호 삭제
	$setvar_common(
		g_default_account = 
		,g_default_account_f = 
		,g_default_account_d = 
		,g_default_account_f_l = 
		,g_default_account_f_g = 
	);
	$callaction(fnConfig_SetValue,g_default_account 	,$g_default_account); 
	$callaction(fnConfig_SetValue,g_default_account_f 	,$g_default_account_f); 
	$callaction(fnConfig_SetValue,g_default_account_d 	,$g_default_account_d); 
	$callaction(fnConfig_SetValue,g_default_account_f_l 	,$g_default_account_f_l); 
	$callaction(fnConfig_SetValue,g_default_account_f_g 	,$g_default_account_f_g); 

	$delarrayvar(g_arr_account,);
	$delarrayvar(g_arr_account_f);
	$delarrayvar(g_arr_account_d);
	$delarrayvar(g_arr_account_f_l);
	$delarrayvar(g_arr_account_f_g);


	$delarrayvar(arr_screenHistory);
	
	$openfile(plist/root/intro.xml);
" />
<action id="Act_Cert_Pass_Init_After" 
scope="common" 
value="
	$setvar(
		recv_rtyp 	= $recvmap_data(CSBOSIGN02,PageBlock.rtyp,$reqid_CSBOSIGN02,trim)  	// Type
		,recv_rcod 	= $recvmap_data(CSBOSIGN02,PageBlock.rcod,$reqid_CSBOSIGN02,trim) 	// ErrorCode
		,recv_stat 	= $recvmap_data(CSBOSIGN02,PageBlock.stat,$reqid_CSBOSIGN02,trim) 	// CA State
		,recv_pkey 	= $recvmap_data(CSBOSIGN02,PageBlock.pkey,$reqid_CSBOSIGN02,trim)  	// CA Primary Key
	);
	
	$log(***** 여기다 CSBOSIGN02: $recv_rcod);
	if(!$isequal_string($recv_rcod,00000)){
		$setvar(recv_error_msg = $callaction(Act_Error_Message,$recv_RTYP,$recv_rcod));
		$setvar(tmp_error_str = $recv_error_msg);
		$closescreen(pop_host_msg); 
		//$alertaction(Act_Cert_Pass_Init_Error,,$tmp_error_str,확인);	
		$callaction(fnPopover_AlertAction,Act_Cert_Pass_Init_Error,$tmp_error_str,,확인);
		return;
	}

	// 축약서명시 사용하는 공개키 
	$callaction(fnConfig_SetValue,g_publickey,$recv_pkey);
	
	$logvar(
		recv_rtyp 	
		,recv_rcod 	
		,recv_stat 	
		,recv_pkey 	
	);
	$logvar(tmp_cert_pass_init_after_action);
	
	$logvar(
		,tmp_varname_id 	
		,tmp_varname_pwd 	
		,tmp_varname_cert 	
		,tmp_cert_pass_init_after_action 
	);
	
	$log(************* 여기서 로그인 $tmp_id_request_after_action_user *********** );
	
	if($strlen($tmp_id_request_after_action_user) > 0){
		$callaction($tmp_id_request_after_action_user, $tmp_varname_id, $tmp_varname_pwd);  		// 인증서 및 비밀번호 검증만 함. 
	}
	else{
		//  인증서 로그인 처리해야함. 
		/*
		$callaction(fnConfig_SetValue,g_login_id 	,$getvar($var_name_id));
		$callaction(fnConfig_SetValue,g_login_pwd 	,$getvar($var_name_pwd));
		$callaction(fnConfig_SetValue,g_login_cert 	,$getvar($var_name_cert));
		$callaction(fnConfig_SetValue,g_login_type 	,$var_login_type);
		$callaction(fnConfig_SetValue,g_login_kind 	,$var_login_kind);
		$callaction(fnConfig_SetValue,g_login_id_save ,$var_is_id_save);
		$callaction(fnConfig_SetValue,g_login_dn 	,$var_dn_value);
		$callaction(fnConfig_SetValue,g_login_date 	,$getTimeInterval());
		*/
		$log(아이디: $getvar($var_name_id));
		$log(비밀번호: $getvar($var_name_pwd));
		$log(인증서비밀번호: $getvar($var_name_cert));
		$log(로그인타입: $var_login_type);
		$log(로그인종류: $var_login_kind);
		$log(비밀번호 저장여부: $var_is_id_save);
		$log(dn값: $var_dn_value);

		if($var_login_type == 2 || $var_login_type == 3){
			$callaction(Act_Sise_Login_cert_d, $tmp_varname_id, $var_dn_value, $tmp_cert_pass_init_after_action);  	// 로그인 처리함. 
		}
		else{
			$callaction(Act_Sise_Login_d, $tmp_varname_id, $tmp_varname_pwd, $tmp_cert_pass_init_after_action);  	// 로그인 처리함. 
		}
		

	}
	
" />

// 클라우드 인증서 비밀번호  오류
<action id="Act_Cloud_Cert_Pass_Error" scope="common" 
params="
p_cert_idx, p_after_action
"
value="
	$logvar(p_cert_idx);
	$logarrayvar(cloud_arr_user_all_list);
	//확인 : $recv_dn_idx 

	
	$setvar(
		tmp_cert_error_after_action 	= $p_after_action
		,iCertCount				= $getarrayvarcount(cloud_arr_user_all_list)
		,error_cert_Policy 		= 클라우드
		,error_cert_SubjectName	= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,1)
		,error_cert_IssuerName		= $callaction(fnGetCertSubjectInfo,false,cn,$getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4))
		//,error_cert_Version 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,3)
		,error_cert_SerialNumber	= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,6)
		//,error_cert_Algorithm		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,5)
		,error_cert_Issuer 			= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,2)
		,error_cert_Subject 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4)
		,error_cert_ValidFrom		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,7)
		,error_cert_ValidTo 		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,8)
		,error_cert_ValidTo2		= $getarrayvar(cloud_arr_user_all_list,$p_cert_idx,8)
		,error_cert_Organizationname 	= $callaction(fnGetCertSubjectInfo,false,o,$getarrayvar(cloud_arr_user_all_list,$p_cert_idx,4))

		,error_cert_CheckExpired 	= $getarrayvar(tmp_arr_cloud_cert_list,$p_cert_idx,9)
	);
	
	$setvar(
		,IN_cadn = $error_cert_Subject
		,reqid_CSBLSIGN03 = $callaction(FNSEND_ORDERDATA,CSBLSIGN03,Input,,,,Act_Cert_Pass_Error_After)
	)
"/>

// 공동인증서 비밀번호  오류
<action id="Act_Cert_Pass_Error" scope="common" 
params="
p_cert_idx, p_after_action
"
value="
	$logvar(
		p_cert_idx
		,p_after_action
	);
	$logarrayvar(cert_list);
	$setvar(
		tmp_cert_error_after_action 	= $p_after_action
		,iCertCount=$cert_getalldata(cert_list)
		,error_cert_Policy 		= $getarrayvar(cert_list,$p_cert_idx,0)
		,error_cert_SubjectName	= $getarrayvar(cert_list,$p_cert_idx,1)
		,error_cert_IssuerName		= $getarrayvar(cert_list,$p_cert_idx,2)
		,error_cert_Version 		= $getarrayvar(cert_list,$p_cert_idx,3)
		,error_cert_SerialNumber	= $getarrayvar(cert_list,$p_cert_idx,4)
		,error_cert_Algorithm		= $getarrayvar(cert_list,$p_cert_idx,5)
		,error_cert_Issuer 		= $getarrayvar(cert_list,$p_cert_idx,6)
		,error_cert_Subject 		= $getarrayvar(cert_list,$p_cert_idx,7)
		,error_cert_ValidFrom		= $getarrayvar(cert_list,$p_cert_idx,8)
		,error_cert_ValidTo 		= $getarrayvar(cert_list,$p_cert_idx,9)
		,error_cert_ValidTo2		= $getarrayvar(cert_list,$p_cert_idx,10)
		,error_cert_Organizationname 	= $getarrayvar(cert_list,$p_cert_idx,11)
		,error_cert_CheckExpired 	= $getarrayvar(cert_list,$p_cert_idx,12)
	);

	$setvar(
		,IN_cadn = $error_cert_Subject
		,reqid_CSBLSIGN03 = $callaction(FNSEND_ORDERDATA,CSBLSIGN03,Input,,,,Act_Cert_Pass_Error_After)
	)
"/>
<action id="Act_Cert_Pass_Error_After" scope="common" 
value="
	$closescreen(pop_host_msg);
	$setvar(
		recv_capw 	= $recvmap_data(CSBLSIGN03,PageBlock.capw,$reqid_CSBLSIGN03,trim) 
		,tmp_error_str 	= $addstring(공동인증서 비밀번호 ,$recv_capw,회 오류입니다.)
	);
	$logvar(recv_capw);
	
	if($g_menuCode==1920
	|| $g_menuCode==8190 // 미국주식옵션 실시간 시세신청
	){
		//$alertaction(,,$tmp_error_str,확인);
		$callaction(fnPopover_AlertAction,,$tmp_error_str,,확인);
		return;
	}

	$callaction(fnOpenAlarmScreenMsg,$tmp_error_str);
	$setvar(
		lbl_cert_password_info.value = $tmp_error_str
	);
	
	//여기 잘봐둬야 할듯합니다.기존 등록되어있는 앱에서도 이상합니다.
	if($tmp_SISE_login_cert_confirm_flag){
		$setvar_common(
			tmp_SISE_login_cert_confirm_flag = false
		);
		$callaction($tmp_cert_error_after_action); 
		$alert(,,$tmp_error_str,확인);
		return;
	}
	$callaction($tmp_cert_error_after_action); 
	$alert(Act_Cert_Pass_Error_ToLogin,,$tmp_error_str,확인);
" />

<action id="Act_Cert_Pass_Error_ToLogin" scope="common" 
value="
	$callaction(fnGoLoginScreen,1);
//	$openfile(plist/root/login.xml);
" />

// 공동인증서 비밀번호 입력 초기화 
<action id="Act_Cert_Input_Init" scope="common" 
value="

" />

// 공동인증서 비밀번호 체크 
<action id="Act_Certify_Pass_Check" scope="common" 
params="
p_dn
,p_varname_cert
"
value="
	$setvar(    tmp_cert_index = $cert_getdnindex($p_dn)     );
	$logvar(tmp_cert_index);
	if($tmp_cert_index < 0){
		return -2;
	}
	$setvar(
		tmp_value_cert = $getvar($p_varname_cert)
	);
	$logvar(tmp_value_cert);
	$setvar(
		//tmp_is_check_pass = $cert_ispassword($tmp_cert_index,$p_varname_cert)
		tmp_is_check_pass = $cert_ispassword($tmp_cert_index,$p_varname_cert, $g_cert_is_enc_flag)
	);
	$logvar(
		tmp_is_check_pass
	);
	if($tmp_is_check_pass){
		return $tmp_cert_index;
	}
	else{
		return -1;
	}
" />
<action id="Act_Sign_Verify" scope="common" 
params="
p_dn_idx , p_name_user_id, p_name_cert_pass
"
value="
	if($cert_getfulldata($p_dn_idx,$p_name_cert_pass,$p_name_user_id,IN_SIGN,IN_SIGN_LEN,false,true,true,$g_cert_is_enc_flag)) {     
		$log(***** 전자서명 성공 );
		$logvar(IN_SIGN, IN_SIGN_LEN);
		$cert_getpublickey($p_dn_idx,IN_USDN,false);
		$logvar_binary(IN_USDN,IN_USDN);

		$log(***** 서명검증 TR요청해야함.  );
		// 임시사용 
		$callaction(Act_Sign_Verify_After);
	}
	else{
		//$alertaction(fnLoginProcessFail,,전자서명에 실패하였습니다.,확인,);
		$callaction(fnPopover_AlertAction,fnLoginProcessFail,전자서명에 실패하였습니다.,,확인);
		return;
	}
"/>
<action id="Act_Sign_Verify_After" scope="common" 
value="
	$callaction(Act_Network_Connect_Domestic);
" />

<action id="Act_Sise_Login" scope="common" 
params="
p_name_id
, p_name_pwd
, p_after_action
"
 value="
	$logvar_binary(strApHeaderData,strApHeaderData);
	$setvar(strDataLength=$getvarlen(strApHeaderData));
	$setvar(
		LEN_MYMQ_TH 		= $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
		,MYMQ_TH_PKT_LEN	= $result($strDataLength+$LEN_MYMQ_TH )
	);
	$logvar(
		LEN_MYMQ_TH 
		,strDataLength
		,MYMQ_TH_PKT_LEN
	);
	// Packet Indicator OR 연산으로 추가 
	$setbit(MYMQ_HEADER_PKTI_1,0x00);	
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator
	$setvar(MYMQ_HEADER_FUNC=B); 		// A:Sign-on B:Notify signed user's id, C:General REquest for transactions
	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가
	$addvar(strSendData,strApHeaderData, , , ,false,true);  // 마지막인자  scope
	$sendvardata($g_SiseSocketName,,strSendData,0,,$p_after_action,TRUE);	
" />
-->
// 시세에서 데이터 가져올 경우 필요할 수 있음. - 수정필요
<action id="Act_Network_SendData" scope="common" params="
p_socket_name
, p_trcode
, p_blockcode
, p_name_data
, p_func
, p_before_action
, p_after_action
" 
value="
	if($g_is_background){	return;	}

	if(!$isconnect($p_socket_name)){	
		$callaction(Act_Connect_Alarm, 해외시세 Send, fnExit_Timer);
		return;	
	}

	$log(*******FNSEND_SISEDATA_DOMESTIC);
	$setvar(
		strTrCode=$p_trcode
		, strBlockCode=$p_blockcode
		, strSiseDataVarName=$p_name_data
		, strFunc=$p_func
		, strBeforeActionName=$p_before_action
		, strAfterActionName=$p_after_action
		, strDataLength=$getvarlen(strSiseDataVarName)
		, COMM_HEADER_MSGL=0
		, COMM_HEADER_FUNC=$strFunc
	);

	$delvar(strSendData);

	if($strlen($strSiseDataVarName) <= 0) {
		$map_getstructsenddata($p_socket_name,$strTrCode,$strBlockCode,strSiseDataVarName);
		$setvar(strDataLength=$getvarlen(strSiseDataVarName));
	}
	$logvar(strDataLength,strSiseDataVarName);



	$setvar(
		LEN_MYMQ_TH = $result($map_getstructsize($p_socket_name,MYMQ_TH)-4)
		,LEN_MYMQ_RH = $map_getstructsize($p_socket_name,MYMQ_RH)
		,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH + $LEN_MYMQ_RH)
		,MYMQ_RH_RKEY=$strTrCode
	);
	$logvar(
		LEN_MYMQ_TH 
		,LEN_MYMQ_RH
		,strDataLength
		,MYMQ_TH_PKT_LEN
	);
		
	// Packet Indicator OR 연산으로 추가 
	$setbit(MYMQ_HEADER_PKTI_1,0x01);	// RHI Following RH
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator
	
	$setvar(MYMQ_HEADER_FUNC=C); 		// A:Sign-on B:Notify signed user's id, C:General REquest for transactions
	$setbit(MYMQ_RH_FLAG,0x00);

	$setvar( MYMQ_RH_EXCODE = ); 		//주문TR에서는 LEDGER을 넣는다.

	if($isequal_string($p_socket_name, $g_SiseSocketName)){
		$setvar(MYMQ_RH_WKEY=$callaction(FNNETWORK_SISESOCKET_GETREQUESTID));
	}
	else{
		$setvar(MYMQ_RH_WKEY=$callaction(FNNETWORK_SISESOCKET_DOMESTIC_GETREQUESTID));
	}
	

	//$setbit(MYMQ_RH_FLAG,$BIT_RH_FLAG);	
	if($getvarlen(BIT_RH_FLAG)<1){
		$log(--- 없다.BIT_RH_FLAG);
		$setbit(BIT_RH_FLAG,0x00); 		 	
	}
	$log(********** 비트플래그 :$BIT_RH_FLAG **********);
	$logvar_binary( SEND BIT FLAG ,BIT_RH_FLAG);
	if($isbit_and(BIT_RH_FLAG,0x01) ) { 
		$setbit(BIT_RH_FLAG,0x00);
	}
	$memcpy(MYMQ_RH_FLAG,BIT_RH_FLAG);
	


	if($getvarlen(SEND_NEXTKEY_HEADER_DATA)>0){	
		$setvar(
			tmp_header_len = $getvarlen(SEND_NEXTKEY_HEADER_DATA)
			,MYMQ_TH_PKT_LEN = $result($MYMQ_TH_PKT_LEN + $tmp_header_len)	// 패킷 총길이 계산
		);
	}
	if($getvarlen(SEND_PREKEY_HEADER_DATA)>0){	
		$setvar(
			tmp_header_len = $getvarlen(SEND_PREKEY_HEADER_DATA)
			,MYMQ_TH_PKT_LEN = $result($MYMQ_TH_PKT_LEN + $tmp_header_len)	// 패킷 총길이 계산
		);
	}
	

	$map_getstructsenddata($p_socket_name,MYMQ_TH,,strSendData); 	// TH 헤더 추가
	$map_getstructsenddata($p_socket_name,MYMQ_RH,,strTrHeader); 	
	$addvar(strSendData,strTrHeader); 							// TR 헤더 추가

	//if($getvarlen(SEND_NEXTKEY_HEADER_DATA)>0){
	if($isbit_and(MYMQ_RH_FLAG,0x04) ) { 				//  다음처리가 있으면 
		$addvar(strSendData,SEND_NEXTKEY_HEADER_DATA); //다음키
		$logvar_binary( SEND_NEXTKEY_HEADER_DATA ,SEND_NEXTKEY_HEADER_DATA);
	}
	//if($getvarlen(SEND_PREKEY_HEADER_DATA)>0){
	if($isbit_and(MYMQ_RH_FLAG,0x02) ) { 				//  다음처리가 있으면 
		$addvar(strSendData,SEND_PREKEY_HEADER_DATA); // 이전키
		$logvar_binary( SEND_PREKEY_HEADER_DATA ,SEND_PREKEY_HEADER_DATA);
	}
	
	$addvar(strSendData,strSiseDataVarName);

	$sendvardata($p_socket_name,$strTrCode,strSendData,$MYMQ_RH_WKEY,$strBeforeActionName,$strAfterActionName,TRUE);	

	$setbit(BIT_RH_FLAG,0x00); 		 	// 처음 조회 시  
	$setbit(MYMQ_RH_FLAG,0x00); 		 	// senddata 가 두개이기 때문에 같이 초기화를 시켜준다.
	
	// 이전, 다음 제거
	$delvar(SEND_NEXTKEY_HEADER_DATA);
	$delvar(SEND_PREKEY_HEADER_DATA);

	return $MYMQ_RH_WKEY;
" />
<!--
//확인
<action id="Act_Network_SendData_Order" scope="common" 
paramlog="false"
params="
p_socket_name
, p_trcode
, p_blockcode
, p_name_data
, p_func
, p_before_action
, p_after_action
" 
value="
	if($g_is_background){	return;	}

	//$log(*******Act_Network_SendData_Order);
	/*
	if(!$isconnect($p_socket_name)){	
		$callaction(Act_Connect_Alarm, 국내시세 Send, fnExit_Timer);
		return;	
	}
	*/

	$setvar(
		strTrCode 		= $p_trcode
		, strBlockCode 		= $p_blockcode
		, strSiseDataVarName 	= $p_name_data
		, strFunc 		= $p_func
		, strBeforeActionName	= $p_before_action
		, strAfterActionName	= $p_after_action
		, strDataLength 	= $getvarlen(strSiseDataVarName)
	);
	/*
	$logvar(
		strTrCode
		, strBlockCode
		, strSiseDataVarName
		, strFunc
		, strBeforeActionName
		, strAfterActionName
		, strDataLength
	);
	*/
	$setvar(
		,g_recv_BRCD	 	= 001	//부서 - 필수
		,g_recv_epwd 		= 1					//패스워드 구분 1:계좌 2:팀비밀번호   - 필수
	);

	if( $isequal_string($strTrCode,GSOB390411__)	// 
	){

		$setvar(
			tmp_IN_CTYPE = H
		);
	}
	else{
		$setvar(
			tmp_IN_CTYPE = J
		);
	}
	//$logvar(tmp_IN_CTYPE);
	
	
	
	
	if($isequal_string($strTrCode,DSBB000102) 	// CME야간선물 일반주문
	|| $isequal_string($strTrCode,DSBB000203)	// CME 취소 주문을 처리
	|| $isequal_string($strTrCode,DSBB000301)	// CME야간선물  정정 주문을 처리
	
	
	|| $isequal_string($strTrCode,DSBB000201)	// KOSPI200 취소 주문을 처리 		//256 적용안됨 
	|| $isequal_string($strTrCode,DSBB000104)	// KOSPI200 일반주문

	|| $isequal_string($strTrCode,DSBB000304)	// KOSPI200 전부가격정정 주문을 처리
	|| $isequal_string($strTrCode,DSBB000305)	// KOSPI200 부분가격정정 주문을 처리
	|| $isequal_string($strTrCode,DSBB000303)	// 수량일부취소처리
	|| $isequal_string($strTrCode,DSBB000901)	// 주문가능수량산출

	|| $isequal_string($strTrCode,DSBE121301)	// 기간별 손익조회

	

	// 이체출금 - 국내 
	|| $isequal_string($strTrCode,DSBD190301)	// 연계 계좌 정보 조회     		g_channel_type = 1 변경시 동작함.
	|| $isequal_string($strTrCode,DSBD190302)	// 연계 은행입출금 신청 처리 	g_channel_type = 1 변경시 동작함.
	|| $isequal_string($strTrCode,DSBD190303)	// 연계 은행입출금 신청 처리 	g_channel_type = 1 변경시 동작함.
	|| $isequal_string($strTrCode,DSBD190304)	// 연계 은행계좌 예수금 조회 	g_channel_type = 1 변경시 동작함.

	|| $isequal_string($strTrCode,CSBC700411)	// 접속비밀번호변경   	
	|| $isequal_string($strTrCode,GSBA400811)	// 계좌유형 변경신청   	
	|| $isequal_string($strTrCode,CSBC700101)	// 실거래 HTS ID 가입 처리
	|| $isequal_string($strTrCode,CSBC710111)	// HTS중복접속관리[신청]

	|| $isequal_string($strTrCode,CSBA000801)	// 회원탈퇴

	//|| $isequal_string($strTrCode,DSBE121001)	// 예탁자산 종합조회(자산 현황)
	//|| $isequal_string($strTrCode,DSBB120201)	// 예수금잔고

	//|| $isequal_string($strTrCode,CSBLSIGN01)	// DN요청인증서 조회
	//|| $isequal_string($strTrCode,CSBLSIGN02)	// 인증서내역갱신 - 비밀번호 정상
	//|| $isequal_string($strTrCode,CSBLSIGN03)	// 인증서 비밀번호 오류횟수

	//|| $isequal_string($strTrCode,DSBD190601)	// 국내 입출금내역조회FORHTS
	//|| $isequal_string($strTrCode,DSBD190301)	// 연계 계좌 정보 조회

	//|| $isequal_string($strTrCode,CSBO000101)	// 

	//|| $isequal_string($strTrCode,GSOB390401)	// 

	//|| $isequal_string($strTrCode,GSOB390401)	// HTS ID 오류횟수 초기화 / 임시비밀번호 발급	

	//|| $isequal_string($strTrCode,GSBB000201)	// 신규 해외 통합 주문

	
	
	){
		// 테스트 헤더 
		/*
		$setvar_common(
			//,g_ip_local 		=  192.168.2.115	//로컬 IP
			//,g_ip_au 		= 183.111.94.21	//공 IP
			//,g_mac_address 	= 58:94:6B:39:7F:10	//하드웨어 MAC
			//,g_user_id 		=  SYTNET		//사용자 아이디
			,g_channel_type 	= 1			//Channel type
			//,g_connect_type 	= H			//접속사용자구분
			//,g_os_version 		= Windows 7
			//,g_tmp_rocde 		= 00000			
			//,g_recv_CUSE 		= 0X000405D0		//Client 사용 영역 		- 주문(DSBB000104)
			//,g_recv_CUSE 		= 0X00010552		//Client 사용 영역 		- 연계 계좌 정보 조회(DSBD190301)
		);
		*/
		// 국내쪽에 있는 헤더 
		$setvar(
			//,IN_pcinfo =  							// 헤더
			,IN_TRNAME 		=  $strTrCode				// TR명
			,IN_USERID 		= $g_user_id				// 유저아이디
			,IN_CTYPE 		=  $tmp_IN_CTYPE			// 주문타입( 주문:J, 은행업무:H)
			,IN_HANDLE 		=  					// 폼핸들 예약주문시 예약일자 hwnd (window handle)
			,IN_srvinfo 		= 					//예약주문시 예약번호 srvinfo (server information area )
			,IN_reserved 		= 					//reserved area : client space padding
			,IN_errtp 		= 					// 0: OK else error U: oracle & 사용자 T: tmax error,   S: system message
			,IN_errcd 		= 					//00000: 정상 그외 에러
			,IN_clid 		= 					//client
			,IN_pdef 		= 					//여유분
			// 헤더 끝 pcinfo
		);

		
		// 비밀번호 셋팅 - 테스트 후 삭제해야함.
		/*
		$setvar(
			IN_APWD	= 9F4B36E6AE8CA4EBA7B18BF33D637A62D86E370A4F798CE03FF26EC8AC111A4F 		//1111
			,IN_ord_pswd 	= 9F4B36E6AE8CA4EBA7B18BF33D637A62D86E370A4F798CE03FF26EC8AC111A4F 		//1111
			//,IN_orgn_acct_pswd = 9F4B36E6AE8CA4EBA7B18BF33D637A62D86E370A4F798CE03FF26EC8AC111A4F 		//1111

			//,IN_APWD	= FD74379D20FFB8AF3F32F0EE0314EE7DD865A1F8B8944ABD32A6BDF06EF19041 		//1234
			//,IN_APWD	=23153591FF0C81D1504B494BE8EB6D0916A9DC5EC543D08CF1B22C77A2FD1A4FE2F7150957596DF8255227BE0873BE2CD9F5140AA3B5D4803AECAF48DBD32856 
			
		);
		*/
		
	}

	$setvar(
		map_encrypt 		= $map_getattrvalue($p_socket_name,$strTrCode,SECURITYTYPE) 	// ENCRYPT와 맵핑 
		,map_certificate 	= $map_getattrvalue($p_socket_name,$strTrCode,SIGNTYPE) 		//CERTIFICATE
	);	
	/*
	$logvar(
		map_encrypt 
		,map_certificate
		,p_socket_name
	);
	*/

	$setbit(MYMQ_HEADER_PKTI_1,0x01);	// RHI Following RH
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator

	$setvar(MYMQ_HEADER_FUNC=C); 		// A:Sign-on B:Notify signed user's id, C:General REquest for transactions

	if($getvarlen(BIT_RH_FLAG)<1){
		$log(--- 없다.BIT_RH_FLAG);
		$setbit(BIT_RH_FLAG,0x01); 		 	
	}
	$memcpy(MYMQ_RH_FLAG,BIT_RH_FLAG);

	$setvar(
		MYMQ_RH_WKEY 	= $callaction(FNNETWORK_SISESOCKET_DOMESTIC_GETREQUESTID)
		, MYMQ_RH_SVCODE 	= SERV   					// 뭘로 채워야 하나?
		,MYMQ_RH_RKEY  	= $strTrCode
	);

	// changeCMEAuthority_20191128
	$delvar(MYMQ_RH_EXCODE);
	$mapstruct_getattrvalue($p_socket_name,$strTrCode,MYMQ_RH_EXCODE,MYMQ_RH_EXCODE);
	//$log(TRCODE[$strTrCode] MYMQ_RH_EXCODE is Check ********* [$MYMQ_RH_EXCODE]);
	if($getvarlen(MYMQ_RH_EXCODE) > 0) {
		$log(TRCODE[$strTrCode] MYMQ_RH_EXCODE is Setting [$MYMQ_RH_EXCODE]);
	} else {
		$setvar(	MYMQ_RH_EXCODE 	= $callaction(Act_Excode_Get, $strTrCode)	);
	}
	//$setvar(	MYMQ_RH_EXCODE 	= $callaction(Act_Excode_Get, $strTrCode)	);
	

	if($isequal_string($strTrCode,CSBOSIGN02 ) 	// 인증서 인코딩값 전송 및 단축인증키 수신 (공동인증 성공 시 수행)
	//|| $isequal_string($strTrCode,DSBC863701 )
	|| $isequal_string($strTrCode,pibmlrac )
	
	){
		$setvar(
			, MYMQ_RH_SVCODE 	= SERV   					// 뭘로 채워야 하나?
		);

	}

	// 검증해봐야 함. - 모의투자는 축약서명 안함. GSBB000101 테스트함.
	if($isequal_string($map_certificate,Y) && !$g_OrderServerCheckSimulation && $g_cert_login_status){ 				// 축약서명 
		$setvar(
			, MYMQ_RH_SVCODE 	= SERV   					// 뭘로 채워야 하나?
			,MYMQ_RH_EXCODE 	= 
		);
	}

	
	if($isequal_string($strTrCode,CSBLOGIN) 	// 로그인
	){
		$setbit(MYMQ_RH_FLAG,0x00);	// RHI Following RH
		$setvar(MYMQ_HEADER_FUNC=A); 
		$setvar(
			, MYMQ_RH_SVCODE 	= LOGON   					
			//,MYMQ_RH_EXCODE 	= ledger
		);
	}
	
	if($isequal_string($strTrCode,CSBOSIGN02) 	// 인증서 인코딩값 전송 및 단축인증키 수신 (공동인증 성공 시 수행)
	){
		$setbit(MYMQ_RH_FLAG,0x00);	// RHI Following RH 		// 인증서 비밀번호 초기화는 0x00으로 올라가야 한다.
	}
	
	// Application Header 값 셋팅 
	$setvar(
		MYMQ_AH_TRCODE 	= $p_trcode 			//전문 코드
		,MYMQ_AH_SCNO 	=  $g_menuCode  		//화면번호
		//,MYMQ_AH_LOIP 	= $g_ip_local			//로컬 IP
		//,MYMQ_AH_AUIP 	= $g_ip_au			//공동 IP
		,MYMQ_AH_LOIP 	= $g_recv_AUIP			//로컬 IP
		,MYMQ_AH_AUIP 	= $g_recv_AUIP			//공동 IP
		,MYMQ_AH_MACA 	= $g_mac_address		//하드웨어 MAC
		,MYMQ_AH_USID 	= $g_user_id 			//사용자 아이디
		,MYMQ_AH_CTYP 	= $g_channel_type		//Channel type
		,MYMQ_AH_CONT 	= $g_connect_type		//접속사용자구분
		,MYMQ_AH_OVER 	= $g_os_version
		,MYMQ_AH_RTYP 	= 				//응답코드 타입
		,MYMQ_AH_RCOD 	= $g_tmp_rocde		//응답코드
		,MYMQ_AH_PFLG 	= 				//팝업여부
		,MYMQ_AH_MEMB 	= $g_recv_MEMB		//회원사코드
		//,MYMQ_AH_MEMB 	= 
		,MYMQ_AH_BRCD 	= $g_recv_BRCD		//부서
		,MYMQ_AH_AUTH 	=$g_recv_AUTH		//권한정보
		,MYMQ_AH_CUSE 	= $g_recv_CUSE		//Client 사용 영역
		,MYMQ_AH_epwd 	= $g_recv_epwd		//패스워드 구분 1:계좌 2:팀비밀번호
		,MYMQ_AH_eflg 	= 0				//업무 완료 여부 '0' 정상 '1' 오류
		,MYMQ_AH_UDEF 	= $g_recv_UDEF		//FILLER
	);
	/*
	$logvar(
		MYMQ_AH_TRCODE 
		,MYMQ_AH_SCNO 
		,MYMQ_AH_LOIP 
		,MYMQ_AH_AUIP 
		,MYMQ_AH_MACA 
		,MYMQ_AH_USID 
		,MYMQ_AH_CTYP 
		,MYMQ_AH_CONT
		,MYMQ_AH_OVER
		,MYMQ_AH_RTYP
		,MYMQ_AH_RCOD 
		,MYMQ_AH_PFLG 
		,MYMQ_AH_MEMB 
		,MYMQ_AH_BRCD 
		,MYMQ_AH_AUTH 
		,MYMQ_AH_CUSE 
		,MYMQ_AH_UDEF 
	);
	*/
	// 값은 위에서 전부 셋팅한 후
	$delvar(strSendData, strThHeader, strTrHeader, strApHeader,strSendData_Enc,strOrderEncDataVarName, strOrderShortCert);
	
	$map_getstructsenddata($p_socket_name,MYMQ_RH,,strTrHeader); 				// TR 헤더 
	$map_getstructsenddata($p_socket_name,MYMQ_APPLICATION_HEADER,,strApHeader); 	// Application 헤더 	
	$map_getstructsenddata($p_socket_name,$strTrCode,$strBlockCode,strSiseDataVarName); 	// 데이터 
	//$logvar(strTrCode,strBlockCode,strSiseDataVarName);

	$delvar(strSendData_Enc, strSendData_ShortSign);
	
	if($isequal_string($map_certificate,Y) && !$g_OrderServerCheckSimulation && $g_cert_login_status){ 			
		$logvar(g_publickey, g_recv_dn, g_login_cert);
		//클라우드 분기
		if($g_login_cloud_check_flag){
			$delvar(tmp_order_p_socket_name);
			$delvar(tmp_order_p_trcode);
			$delvar(tmp_order_p_blockcode);
			$delvar(tmp_order_p_name_data);
			$delvar(tmp_order_p_func);
			$delvar(tmp_order_p_before_action);
			$delvar(tmp_order_p_after_action);

			$setvar(
				tmp_order_p_socket_name = $p_socket_name
				, tmp_order_p_trcode	= $p_trcode
				, tmp_order_p_blockcode = $p_blockcode
				, tmp_order_p_name_data = $p_name_data
				, tmp_order_p_func		= $p_func
				, tmp_order_p_before_action = $p_before_action
				, tmp_order_p_after_action = $p_after_action
			);

			$callaction(fnCloudCertBriefSign);

			//이렇게는 사용 불가.
			//$callaction(fnCloudCertBriefSign,$p_socket_name,$p_trcode,$p_blockcode,$p_name_data,$p_func,$p_before_action,$p_after_action);
			return;
		}
		// 축약서명 
		$log(********* 축약서명 추가 작업해야함. ); 
		$logvar(g_publickey, g_recv_dn, g_login_cert); 	//공개키 
		$setvar(
			tmp_cert_publickey_len 	= $getvarlen(g_publickey)
			,tmp_cert_index 		= $cert_getdnindex($g_recv_dn)
		);
		if($tmp_cert_index < 0){	
			//$alertaction(,,인증서가 없습니다.,확인);	
			$callaction(fnPopover_AlertAction,,인증서가 없습니다.,,확인);
			return;		
		}
		
		// Application Header 까지 암호화 
		$addvar(strOrderShortCert,strSiseDataVarName);				

		// 현재 암호화 되어 있어서 임시로 사용 
		//$setvar(tmp_cert = 1q2w3e4r!@);
		$setvar(tmp_cert = $g_login_cert);

		$log(*****   인증서 비번 );
		$logvar(g_login_cert);

		//$logvar_binary(SIGN Data Before, strOrderShortCert);
		$cert_getshortdata($tmp_cert_index,tmp_cert,strOrderShortCert,tr_signShortdata,,false,true,true,$g_cert_is_enc_flag);

		$logvar(g_publickey, g_recv_dn, g_login_cert); 	//공개키 
		$logvar_binary(tr_signShortdata, tr_signShortdata);

		$setvar(
			tmp_cert_publickey_len_padding 	= $padding_num($tmp_cert_publickey_len,5)
			,tmp_signshort_len 			= $getvarlen(tr_signShortdata)
			,tmp_signshort_len_padding 		= $padding_num($tmp_signshort_len,5)
		);

		//$log(인증서인덱스	:[$tmp_cert_index]);
		//$log(공개키길이		:[$tmp_cert_publickey_len]);
		//$log(공개키길이 패딩	:[$tmp_cert_publickey_len_padding]);
		//$log(축약서명길이	:[$tmp_signshort_len]);
		//$log(축약서명길이패딩	:[$tmp_signshort_len_padding]);

		if($tmp_cert_publickey_len < 1){	
			//$alertaction(fnGoLoginScreen,공개키길이 에러,다시 로그인하세요.,확인);  
			$callaction(fnPopover_AlertAction,fnGoLoginScreen,공개키길이 에러\n다시 로그인하세요.,,확인);
			return;	
		}
		if($tmp_signshort_len < 1){		
			//$alertaction(fnGoLoginScreen,축약서명길이 에러,다시 로그인하세요.,확인);  
			$callaction(fnPopover_AlertAction,fnGoLoginScreen,축약서명길이 에러\n다시 로그인하세요.,,확인);
			return;	
		}
		
		$logvar(tmp_cert_index,tmp_cert_publickey_len,tmp_cert_publickey_len_padding, tmp_signshort_len,tmp_signshort_len_padding);

		$addvar(strSendData_Enc,strApHeader);						// ApHeader 추가 
		//$logvar_binary(Add strApHeader, strSendData_Enc);

		$addvar(strSendData_Enc,tmp_cert_publickey_len_padding); 				// 인증서 공캐키길이 추가 
		//$logvar_binary(tmp_cert_publickey_len_padding SING, tmp_cert_publickey_len_padding);

		$addvar(strSendData_Enc,g_publickey,,,,,true);  					// 공개키 추가
		//$logvar_binary(g_publickey  SING SING, g_publickey);
		
		$addvar(strSendData_Enc,tmp_signshort_len_padding); 				// 전자서명 길이 추가 
		//$logvar_binary(tmp_signshort_len  , tmp_signshort_len_padding);

		$addvar(strSendData_Enc,tr_signShortdata); 						// 전자서명데이터 추가
		//$logvar_binary(CERTIFICATE SING, tr_signShortdata);

		$addvar(strSendData_Enc,strSiseDataVarName);					// 데이터추가

	}
	else{
		// Application 헤더를 추가하지 않는다. 
		if(!$isequal_string($strTrCode,CSBOSIGN02) 	// 인증서 인코딩값 전송 및 단축인증키 수신 (공동인증 성공 시 수행)
		&& !$isequal_string($strTrCode,CSBLOGIN)
		&& !$isequal_string($strTrCode,CSBLOGOFF)
		//&& !$isequal_string($strTrCode,CSBLDNTR)
		){
			//$logvar_binary(strApHeader, strApHeader);
			$addvar(strSendData_Enc,strApHeader);							// ApHeader 추가 
		}
		$addvar(strSendData_Enc,strSiseDataVarName);							// ApHeader 추가 
	}

	//$logvar_binary(Act_Network_SendData_Order[$strTrCode] strSiseDataVarName Original, strSiseDataVarName);
	//$logvar_binary(Act_Network_SendData_Order strSendData_Enc Original, strSendData_Enc);
	
	
	
	// 모의투자는 암호화 하지 않는다. 
	if($isequal_string($map_encrypt,Y) && $isequal_string($g_login_kind,2)){ 				// 암호화 
		$setbit_or(MYMQ_HEADER_PKTI_1,0x40);			// End Packet Indicator	
		$security_encrypt(strSendData_Enc,strOrderEncDataVarName);

		if($getvarlen(strOrderEncDataVarName) > 0) {
			$log(서버데이터 암호화 성공);
			$delvar(strSiseDataVarName);
			$memcpy(strSiseDataVarName,strOrderEncDataVarName);
		}
		else {
			$log(************ 서버데이터 암호화 실패);
			//$alertaction(,,서버데이터 암호화 실패.,확인);
			$callaction(fnPopover_AlertAction,,서버데이터 암호화 실패.,,확인);
			return;
		}
	}
	else{
		
		$delvar(strSiseDataVarName);
		$memcpy(strSiseDataVarName,strSendData_Enc);
	}


	$setvar(
		strDataLength 		= $getvarlen(strSiseDataVarName)  					//  APHeader포함한 데이터 길이임.
		,LEN_MYMQ_TH 	= $result($map_getstructsize($p_socket_name,MYMQ_TH)-4)
		,LEN_MYMQ_RH 	= $map_getstructsize($p_socket_name,MYMQ_RH)
		,LEN_NEXTKEY 	= $getvarlen(SEND_NEXTKEY_HEADER_DATA)
		,LEN_PREKEY 		= $getvarlen(SEND_PREKEY_HEADER_DATA)
		,MYMQ_TH_PKT_LEN	= $result($LEN_MYMQ_TH + $LEN_MYMQ_RH + $LEN_NEXTKEY + $LEN_PREKEY + $strDataLength) 		// 패킷 총길이 
		,MYMQ_RH_RKEY	=$strTrCode
	);
	
	$logvar(
		LEN_MYMQ_TH 
		,LEN_MYMQ_RH
		,strDataLength
		,MYMQ_TH_PKT_LEN
	);
	
	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strThHeader); 				// TH 헤더 
	
	$addvar(strSendData,strThHeader); 							// TH 헤더 데이터 추가	
	$addvar(strSendData,strTrHeader);							// TR 헤더 데이터 추가	

	// 다음처리 
	if($isbit_and(MYMQ_RH_FLAG,0x04) ) { 				//  다음처리가 있으면 
		$log(***** 다음처리 있음.******);
		$addvar(strSendData,SEND_NEXTKEY_HEADER_DATA); 	//다음키
		//$logvar_binary( SEND_NEXTKEY_HEADER_DATA ,SEND_NEXTKEY_HEADER_DATA);
	}
	if($isbit_and(MYMQ_RH_FLAG,0x02) ) { 				//  이전처리가 있으면 
		$addvar(strSendData,SEND_PREKEY_HEADER_DATA); 	// 이전키
		//$logvar_binary( SEND_PREKEY_HEADER_DATA ,SEND_PREKEY_HEADER_DATA);
	}
	$addvar(strSendData,strSiseDataVarName);						// APHeader 포함 데이터 추가 

	//$sendvardata($g_SiseSocketName_DOMESTIC,$strTrCode,strSendData,$MYMQ_RH_WKEY,$p_before_action,$p_after_action,TRUE);	// before액션 추가 
	$sendvardata($g_SiseSocketName_DOMESTIC,$strTrCode,strSendData,$MYMQ_RH_WKEY,$p_before_action,$p_after_action,FALSE);	// before액션 추가 

	$setbit(BIT_RH_FLAG,0x01); 		 		// 처음 조회 시  
	$setbit(MYMQ_RH_FLAG,0x01); 		 	// senddata 가 두개이기 때문에 같이 초기화를 시켜준다.

	$delvar(SEND_NEXTKEY_HEADER_DATA);
	$delvar(SEND_PREKEY_HEADER_DATA);
	

	return $MYMQ_RH_WKEY;

" />
//클라우드 분기
<action id="fnCloudCertBriefSign" scope="common"
value="
		$logvar(
			tmp_order_p_socket_name 
			, tmp_order_p_trcode	
			, tmp_order_p_blockcode 
			, tmp_order_p_name_data 
			, tmp_order_p_func		
			, tmp_order_p_before_action 
			, tmp_order_p_after_action 
		);

		// 축약서명 
		$log(********* 축약서명 추가 작업해야함.  : CLOUD****************************); 
		$logvar(g_publickey, g_recv_dn, g_login_cert,g_cert_is_enc_flag); 	//공개키 
		$delvar(tmp_cert_index);
		$setvar(
			tmp_cert_publickey_len 	= $getvarlen(g_publickey)
			,tmp_cert_index 		= $cloudnpki_getdnindex($g_recv_dn,true)
		);
		$logvar(g_login_cloud_check_flag,tmp_cert_index);

		if($tmp_cert_index < 0){	
			//$alertaction(,,인증서가 없습니다.,확인);	
			$callaction(fnPopover_AlertAction,,인증서가 없습니다.,,확인);
			return;		
		}
		
		// Application Header 까지 암호화 
		$addvar(strOrderShortCert,strSiseDataVarName);				

		// 현재 암호화 되어 있어서 임시로 사용 
		//$setvar(tmp_cert = 1q2w3e4r!@);
		$setvar(tmp_cert = $g_login_cert);

		$log(*****   인증서 비번 );
		$logvar(g_login_cert);

		if($g_login_cloud_check_flag){
			$cloudnpki_sign(fnCloudCertBriefSign2,
						$tmp_cert_index,
						tmp_cert,
						strOrderShortCert,
						tr_signShortdata,
						,
						false,
						true,
						true,
						$g_cert_is_enc_flag,
						4
			);
			return;
		}
"/>
<action id="fnCloudCertBriefSign2" scope="common"
value="
	$log(fnCloudCertBriefSign2**********);
	$logvar(
		tmp_order_p_socket_name 
		, tmp_order_p_trcode	
		, tmp_order_p_blockcode 
		, tmp_order_p_name_data 
		, tmp_order_p_func		
		, tmp_order_p_before_action 
		, tmp_order_p_after_action 
	);
	$logvar(g_publickey, g_recv_dn, g_login_cert); 	//공개키 
		$logvar_binary(tr_signShortdata, tr_signShortdata);

		$setvar(
			tmp_cert_publickey_len_padding 	= $padding_num($tmp_cert_publickey_len,5)
			,tmp_signshort_len 			= $getvarlen(tr_signShortdata)
			,tmp_signshort_len_padding 		= $padding_num($tmp_signshort_len,5)
		);

		$log(인증서인덱스	:[$tmp_cert_index]);
		$log(공개키길이		:[$tmp_cert_publickey_len]);
		$log(공개키길이 패딩	:[$tmp_cert_publickey_len_padding]);
		$log(축약서명길이	:[$tmp_signshort_len]);
		$log(축약서명길이패딩	:[$tmp_signshort_len_padding]);

		if($tmp_cert_publickey_len < 1){	
			//$alertaction(fnGoLoginScreen,공개키길이 에러,다시 로그인하세요.,확인);  
			$callaction(fnPopover_AlertAction,fnGoLoginScreen,공개키길이 에러\n다시 로그인하세요.,,확인);
			return;	
		}
		if($tmp_signshort_len < 1){		
			//$alertaction(fnGoLoginScreen,축약서명길이 에러,다시 로그인하세요.,확인);  
			$callaction(fnPopover_AlertAction,fnGoLoginScreen,축약서명길이 에러\n다시 로그인하세요.,,확인);
			return;	
		}
		
		$logvar(tmp_cert_index,tmp_cert_publickey_len,tmp_cert_publickey_len_padding, tmp_signshort_len,tmp_signshort_len_padding);

		$addvar(strSendData_Enc,strApHeader);						// ApHeader 추가 
		//$logvar_binary(Add strApHeader, strSendData_Enc);

		$addvar(strSendData_Enc,tmp_cert_publickey_len_padding); 				// 인증서 공캐키길이 추가 
		//$logvar_binary(tmp_cert_publickey_len_padding SING, tmp_cert_publickey_len_padding);

		$addvar(strSendData_Enc,g_publickey,,,,,true);  					// 공개키 추가
		//$logvar_binary(g_publickey  SING SING, g_publickey);
		
		$addvar(strSendData_Enc,tmp_signshort_len_padding); 				// 전자서명 길이 추가 
		//$logvar_binary(tmp_signshort_len  , tmp_signshort_len_padding);

		$addvar(strSendData_Enc,tr_signShortdata); 						// 전자서명데이터 추가
		//$logvar_binary(CERTIFICATE SING, tr_signShortdata);

		$addvar(strSendData_Enc,strSiseDataVarName);					// 데이터추가


	//$logvar_binary(Act_Network_SendData_Order[$strTrCode] strSiseDataVarName Original, strSiseDataVarName);
	//$logvar_binary(Act_Network_SendData_Order strSendData_Enc Original, strSendData_Enc);
	
	
	
	// 모의투자는 암호화 하지 않는다. 
	if($isequal_string($map_encrypt,Y) && $isequal_string($g_login_kind,2)){ 				// 암호화 
		$setbit_or(MYMQ_HEADER_PKTI_1,0x40);			// End Packet Indicator	
		$security_encrypt(strSendData_Enc,strOrderEncDataVarName);

		if($getvarlen(strOrderEncDataVarName) > 0) {
			$log(서버데이터 암호화 성공);
			$delvar(strSiseDataVarName);
			$memcpy(strSiseDataVarName,strOrderEncDataVarName);
		}
		else {
			$log(************ 서버데이터 암호화 실패);
			//$alertaction(,,서버데이터 암호화 실패.,확인);
			$callaction(fnPopover_AlertAction,,서버데이터 암호화 실패.,,확인);
			return;
		}
	}
	else{
		
		$delvar(strSiseDataVarName);
		$memcpy(strSiseDataVarName,strSendData_Enc);
	}


	$setvar(
		strDataLength 		= $getvarlen(strSiseDataVarName)  					//  APHeader포함한 데이터 길이임.
		,LEN_MYMQ_TH 	= $result($map_getstructsize($tmp_order_p_socket_name,MYMQ_TH)-4)
		,LEN_MYMQ_RH 	= $map_getstructsize($tmp_order_p_socket_name,MYMQ_RH)
		,LEN_NEXTKEY 	= $getvarlen(SEND_NEXTKEY_HEADER_DATA)
		,LEN_PREKEY 		= $getvarlen(SEND_PREKEY_HEADER_DATA)
		,MYMQ_TH_PKT_LEN	= $result($LEN_MYMQ_TH + $LEN_MYMQ_RH + $LEN_NEXTKEY + $LEN_PREKEY + $strDataLength) 		// 패킷 총길이 
		,MYMQ_RH_RKEY	=$strTrCode
	);
	
	$logvar(
		LEN_MYMQ_TH 
		,LEN_MYMQ_RH
		,strDataLength
		,MYMQ_TH_PKT_LEN
	);
	
	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strThHeader); 				// TH 헤더 
	
	$addvar(strSendData,strThHeader); 							// TH 헤더 데이터 추가	
	$addvar(strSendData,strTrHeader);							// TR 헤더 데이터 추가	

	// 다음처리 
	if($isbit_and(MYMQ_RH_FLAG,0x04) ) { 				//  다음처리가 있으면 
		$log(***** 다음처리 있음.******);
		$addvar(strSendData,SEND_NEXTKEY_HEADER_DATA); 	//다음키
		//$logvar_binary( SEND_NEXTKEY_HEADER_DATA ,SEND_NEXTKEY_HEADER_DATA);
	}
	if($isbit_and(MYMQ_RH_FLAG,0x02) ) { 				//  이전처리가 있으면 
		$addvar(strSendData,SEND_PREKEY_HEADER_DATA); 	// 이전키
		//$logvar_binary( SEND_PREKEY_HEADER_DATA ,SEND_PREKEY_HEADER_DATA);
	}
	$addvar(strSendData,strSiseDataVarName);						// APHeader 포함 데이터 추가 

	//$sendvardata($g_SiseSocketName_DOMESTIC,$strTrCode,strSendData,$MYMQ_RH_WKEY,$tmp_orderp_before_action,$tmp_order_p_after_action,TRUE);	// before액션 추가 
	$sendvardata($g_SiseSocketName_DOMESTIC,$strTrCode,strSendData,$MYMQ_RH_WKEY,$tmp_order_p_before_action,$tmp_order_p_after_action,FALSE);	// before액션 추가 

	$setbit(BIT_RH_FLAG,0x01); 		 		// 처음 조회 시  
	$setbit(MYMQ_RH_FLAG,0x01); 		 	// senddata 가 두개이기 때문에 같이 초기화를 시켜준다.

	$delvar(SEND_NEXTKEY_HEADER_DATA);
	$delvar(SEND_PREKEY_HEADER_DATA);
	

	return $MYMQ_RH_WKEY;
"/>
//헤더의 Exchange Code 를 반환한다. 
<action id="Act_Excode_Get" scope="common" 
paramlog="false"
params="p_trcode"
value="
	if($isequal_string($strTrCode,CSBOSIGN02 ) 
	|| $isequal_string($strTrCode,CSBOSIGN03 )
	|| $isequal_string($strTrCode,pibmlrac )
	){
		return;
	}
	elseif($isequal_string($p_trcode, GSBA400801)
	|| $isequal_string($p_trcode, GSBA400811)
	|| $isequal_string($p_trcode, GSBA911201)
	|| $isequal_string($p_trcode, GSBA911202)
	|| $isequal_string($p_trcode, GSBA911203)
	|| $isequal_string($p_trcode, GSBA911404)
	|| $isequal_string($p_trcode, GSBB000101)
	|| $isequal_string($p_trcode, GSBB000102)
	|| $isequal_string($p_trcode, GSBB000103)
	|| $isequal_string($p_trcode, GSBB000201)
	|| $isequal_string($p_trcode, GSBB000301)
	|| $isequal_string($p_trcode, GSBB000601)
	|| $isequal_string($p_trcode, GSBB000602)
	|| $isequal_string($p_trcode, GSBB010010)
	|| $isequal_string($p_trcode, GSBB010020)
	|| $isequal_string($p_trcode, GSBB010030)
	|| $isequal_string($p_trcode, GSBB010040)
	|| $isequal_string($p_trcode, GSBB010050)
	|| $isequal_string($p_trcode, GSBB010060)
	|| $isequal_string($p_trcode, GSBB020201)
	|| $isequal_string($p_trcode, GSBB020202)
	|| $isequal_string($p_trcode, GSBB020301)
	|| $isequal_string($p_trcode, GSBB020401)
	|| $isequal_string($p_trcode, GSBB020402)
	|| $isequal_string($p_trcode, GSBB310002)
	|| $isequal_string($p_trcode, GSBB310008)
	|| $isequal_string($p_trcode, GSBB320301)
	|| $isequal_string($p_trcode, GSBB321301)
	|| $isequal_string($p_trcode, GSBB322001)
	|| $isequal_string($p_trcode, GSBB331801)
	|| $isequal_string($p_trcode, GSBB331802)
	|| $isequal_string($p_trcode, GSBB331803)
	|| $isequal_string($p_trcode, GSBC390301)
	|| $isequal_string($p_trcode, GSBC390302)
	|| $isequal_string($p_trcode, GSBC390303)
	|| $isequal_string($p_trcode, GSBD390301)
	|| $isequal_string($p_trcode, GSBD390302)
	|| $isequal_string($p_trcode, GSBD390303)
	|| $isequal_string($p_trcode, GSBD921301)
	|| $isequal_string($p_trcode, GSBO000101)
	|| $isequal_string($p_trcode, GSBP900106)
	|| $isequal_string($p_trcode, GSOB390401)
	|| $isequal_string($p_trcode, GSOB390402)
	|| $isequal_string($p_trcode, GSOB390411)
	|| $isequal_string($p_trcode, GSOB390412)
	|| $isequal_string($p_trcode, GSOB390801)
	|| $isequal_string($p_trcode, GSOB390802)
	|| $isequal_string($p_trcode, GSOB390811)

	|| $isequal_string($p_trcode, GSBB320601)
	|| $isequal_string($p_trcode, GSBB321901)
	|| $isequal_string($p_trcode, GSBB321902)

	|| $isequal_string($p_trcode, GSBB010110)
	|| $isequal_string($p_trcode, GSBB010160)
	|| $isequal_string($p_trcode, GSBB010130)
	|| $isequal_string($p_trcode, GSBB341701)
	|| $isequal_string($p_trcode, GSBB455001)
	|| $isequal_string($p_trcode, GSBB455003)

	|| $isequal_string($p_trcode, GSBB331701)
	|| $isequal_string($p_trcode, GSBB331702)

	|| $isequal_string($p_trcode, GSBB332801)
	|| $isequal_string($p_trcode, GSBB332802)

	|| $isequal_string($p_trcode, GSBA942401)
	|| $isequal_string($p_trcode, GSBA921003)
	|| $isequal_string($p_trcode, GSBA921004)
	|| $isequal_string($p_trcode, GSBA921005)
	|| $isequal_string($p_trcode, GSBA921006)
	|| $isequal_string($p_trcode, GSBA921007)
	|| $isequal_string($p_trcode, GSBA921008)
	|| $isequal_string($p_trcode, GSBA942401)
	|| $isequal_string($p_trcode, GSBA942402)
	|| $isequal_string($p_trcode, GSBA942403)
	|| $isequal_string($p_trcode, GSBA942404)
	|| $isequal_string($p_trcode, GSBD920201)

	|| $isequal_string($p_trcode, GSBA410001)

	|| $isequal_string($p_trcode, GSBH371201)

	){
		return GLB; 			// 해외
	}
	else{
		
		return DOM;			// 나머지 국내 
	}
" />
<action id="Act_Duplication_Exit" scope="common" 
value="
	$callaction(FNEXITBTNCLICKED, 1);
" />

<action id="FnExitBtnClicked" scope="common" 
value="
	$delvar_common(tmp_tradeweb);		// 트레이딩 커뮤니티 웹 접속유지
	//$delarrayvar(g_arr_ipf_search_name);
	if($FnExitBtnClicked_param1==0){
		$setvar_common(	
			g_bLoginStatus = false 			// 현재 로그인 상태 
		);
		$callaction(fnGoLoginScreen_confirm,1);
	}
	else{
		$log(아이디 저장해야 하는지 확인:$g_user_id, $g_login_id);
		// 계좌번호 삭제
		$setvar_common(
			g_default_account = $g_default_account
			,g_default_account_f = $g_default_account_f
			,g_default_account_d = $g_default_account_d
		);
		$callaction(fnConfig_SetValue,g_menuCode,$g_menuCode); 

		$callaction(fnConfig_SetValue,g_default_account 	,$g_default_account); 
		$callaction(fnConfig_SetValue,g_default_account_f 	,$g_default_account_f); 
		$callaction(fnConfig_SetValue,g_default_account_d 	,$g_default_account_d); 
		$callaction(fnConfig_SetValue,g_default_account_f_l 	,); 
		$callaction(fnConfig_SetValue,g_default_account_f_g 	,); 


		$delarrayvar(g_arr_account,);
		$delarrayvar(g_arr_account_f);
		$delarrayvar(g_arr_account_d);
		$delarrayvar(g_arr_account_f_l);
		$delarrayvar(g_arr_account_f_g);
		
		$logarrayvar(g_arr_account);
		$logarrayvar(g_arr_account_f);
		$logarrayvar(g_arr_account_d);
		$logarrayvar(g_arr_account_f_l);
		$logarrayvar(g_arr_account_f_g);

		// 종목정보 삭제 
		//$callaction(fnConfig_SetValue,g_itemCode 	,); 	// 이 액션에는 빈값이 들어가면 안된다. - 염이사 확인 
		//$callaction(fnConfig_SetValue,g_itemCode_d 	,);
		//$callaction(fnConfig_SetValue,g_itemCode_n 	,);

		$logvar(g_itemCode, g_itemCode_d, g_itemCode_n);

		$delarrayvar(arr_screenHistory);

		$exit();
	}
" />
// 서버 연결이 끊어졌을 때 처리
<action id="Act_Server_Disconnected" scope="common" 
value="
	$callaction(FnExitBtnClicked,2); 	// 정보를 저장하고 종료한다. 
" />
<action id="Act_Network_RecvData_OrderReal" scope="common" 
//paramlog="false" 
params="p_socket_name, p_varname_recv, p_err_no, p_socketnum" 
value="
	//$log(Act_Network_RecvData OrderReal:$p_socket_name);
	//$logvar_binary(Act_Network_RecvData_OrderReal All ,$p_varname_recv); 
	

	if($isequal_string($p_err_no,200)){ 			// 연결이 끊어짐.
		$log(************** 연결 끊어짐 주문체결서버 :$p_socket_name, $p_socketnum, $g_iSocketNumber_ORDERREAL);
		if($isequal_string($p_socket_name,$g_RealSocketName_Order)) {
			$setvar_common(N_g_disconnect_real = true);
			if($getvarlen(p_socketnum) > 0 && $p_socketnum != $g_iSocketNumber_ORDERREAL) {
				$log(Act_Network_RecvData_OrderReal 200 Error SocketNum Check p_socketnum[$p_socketnum] g_iSocketNumber_ORDERREAL[$g_iSocketNumber_ORDERREAL]);
				return;
			}
		}
		return;
	}
	//if($g_is_background){	
	//	$log(Act_Network_RecvData_OrderReal:백그라운드 리턴[$p_socket_name]); 		
	//	return;	
	//}
	if($strlen($p_varname_recv) < 1){		
		$setvar_common(g_polling_r_fail_cnt = 0);
		$log(======== 폴링응답 Act_Network_RecvData_OrderReal:[$p_socket_name]:g_polling_r_fail_cnt:[$g_polling_r_fail_cnt]);
		return;
	}

	$setvar(
		tmp_socketName = $p_socket_name
		, strRecvVarName=$p_varname_recv
		, iErrCode = $p_err_no

		, iStructSize=$map_getstructsize($p_socket_name,HANSISE_RECV_HEADER)
		
		,LEN_PACKET_LENGTH = 4 									// 제일 앞단 헤더 길이 
		,POS_MYMQ_TH = 0
		,LEN_MYMQ_TH = $map_getstructsize($p_socket_name,MYMQ_TH) 
		,POS_MYMQ_RH = $result($POS_MYMQ_TH + $LEN_MYMQ_TH)
		,LEN_MYMQ_RH = $map_getstructsize($p_socket_name,MYMQ_RH)
		,POS_MYMQ_RU = $result($POS_MYMQ_RH + $LEN_MYMQ_RH)

		,LEN_MYMQ_FILE = $map_getstructsize($p_socket_name,MYMQ_FILE) 
		,POS_MYMQ_FILE = $result($POS_MYMQ_RH + $LEN_MYMQ_RH)
	);
	/*
	$logvar(
		tmp_socketName 
		, strRecvVarName
		, iErrCode 
		, iStructSize
		,LEN_PACKET_LENGTH 
		,POS_MYMQ_TH 
		,LEN_MYMQ_TH 
		,POS_MYMQ_RH 
		,LEN_MYMQ_RH 
		,POS_MYMQ_RU 
		,LEN_MYMQ_FILE 
		,POS_MYMQ_FILE 
	
	);
	*/
	//$logvar(LEN_PACKET_LENGTH, LEN_MYMQ_TH,LEN_MYMQ_RH,POS_MYMQ_TH,POS_MYMQ_RH,POS_MYMQ_RU);
	//$logvar_binary(RecvData OrderReal ,$strRecvVarName);

	$delvar(strHeaderData_MYMQ_TH, strHeaderData_MYMQ_RH, strRu_Data,strRecvData_RU,LEN_ZIP_OIR_DATA,strRecvData, strSiseRealData);
	$memcpy(strHeaderData_MYMQ_TH,$strRecvVarName,$POS_MYMQ_TH,$LEN_MYMQ_TH);
	//$logvar_binary(RecvData MYMQ_TH ,strHeaderData_MYMQ_TH); 			// 패킷 길이포함 
	//$log(p_socket_name,$p_socket_name);

	$map_getfielddata($p_socket_name,strPKT_LEN,MYMQ_TH,PKT_LEN,strHeaderData_MYMQ_TH); //받은데이터 패킷길이 
	$map_getfielddata($p_socket_name,strPKI_1,MYMQ_TH,PKI_1,strHeaderData_MYMQ_TH); //  Packet Indicator 1
	$map_getfielddata($p_socket_name,strPKI_2,MYMQ_TH,PKI_2,strHeaderData_MYMQ_TH); //  Packet Indicator 2 - 현재 사용 안함.
	$map_getfielddata($p_socket_name,strFUNC,MYMQ_TH,FUNC,strHeaderData_MYMQ_TH); //  Function Code
	/*
	$log(MYMQ_TH.PKT_LEN:$strPKT_LEN);
	$log(MYMQ_TH.PKI_1:$strPKI_1);
	$log(MYMQ_TH.PKI_2:$strPKI_2);
	$log(MYMQ_TH.FUNC:$strFUNC);
	$log(******* 뭐냐 도대체 );
	$logvar_binary(strFUNC);
	*/
	//SM =================  실시간 주문/체결
	if($isequal_string($strFUNC,I)) {
		$setvar( 	
			POS_REALTYPE	= $LEN_MYMQ_TH
			,LEN_REALTYPE 	= 2
			,POS_REALDATA	= $result($POS_REALTYPE + $LEN_REALTYPE)
			,LEN_REALDATA 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH)  	
		);
		// 실시간 타입:2byte
		$memcpy(strRecvData_realtype,$strRecvVarName,$POS_REALTYPE,$LEN_REALTYPE);
		//$logvar(strRecvData_realtype);
		$memcpy(strSiseRealData,$strRecvVarName,$POS_REALDATA,$LEN_REALDATA);
		$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,12);
		
		//=================  실시간 주문/체결 [YUJIN_ORDER_REAL] [O1]  [YUJIN_ORDER_REAL_RECVDATA_5]
		$log(=================  실시간 주문/체결 [$p_socket_name] [$strRecvData_realtype]  [$strRecvVarName]);
		//$logvar_binary(strSiseRealData ,strSiseRealData);
		$map_parsebuffer($p_socket_name,$strRecvData_realtype,PageBlock,0,strSiseRealData,TRUE,TRUE,);
		$callaction(Act_Recv_Real_Ordrer_Local, $p_socket_name,$strRecvData_realtype,strSiseRealData);
		return;
	}

"/>
-->
<!--
// 시세에서 데이터 가져올 경우 필요할 수 있음. - 수정필요
<action id="Act_Network_RecvData" scope="common" 
//paramlog="false" 
params="p_socket_name, p_varname_recv, p_err_no, p_socketnum" 
value="
	//$logvar_binary(RecvData All ,$p_varname_recv); 
	if($isequal_string($p_err_no,200)){ 			// 연결이 끊어짐.
		$log(************** 연결 끊어짐[$p_socket_name][$p_varname_recv][$p_err_no][$p_socketnum]);
		return;
	}
	// 폴링: 길이가 0인경우 
	if($strlen($p_varname_recv) < 1){		
		$setvar_common(g_polling_fail_cnt = 0);
		$log(======== 폴링응답 Act_Network_RecvData:[$p_socket_name] ,g_polling_d_fail_cnt:[$g_polling_d_fail_cnt],g_polling_fail_cnt:[$g_polling_fail_cnt],g_polling_r_fail_cnt:[$g_polling_r_fail_cnt]);
		return;
	}
	$setvar(
		tmp_socketName = $p_socket_name
		, strRecvVarName=$p_varname_recv
		, iErrCode = $p_err_no

		, iStructSize=$map_getstructsize($p_socket_name,HANSISE_RECV_HEADER)
		
		,LEN_PACKET_LENGTH = 4 									// 제일 앞단 헤더 길이 
		,POS_MYMQ_TH = 0
		,LEN_MYMQ_TH = $map_getstructsize($p_socket_name,MYMQ_TH) 
		,POS_MYMQ_RH = $result($POS_MYMQ_TH + $LEN_MYMQ_TH)
		,LEN_MYMQ_RH = $map_getstructsize($p_socket_name,MYMQ_RH)
		,POS_MYMQ_RU = $result($POS_MYMQ_RH + $LEN_MYMQ_RH)

		,LEN_MYMQ_FILE = $map_getstructsize($p_socket_name,MYMQ_FILE) 
		,POS_MYMQ_FILE = $result($POS_MYMQ_RH + $LEN_MYMQ_RH)
	);

	//$logvar(LEN_PACKET_LENGTH, LEN_MYMQ_TH,LEN_MYMQ_RH,POS_MYMQ_TH,POS_MYMQ_RH,POS_MYMQ_RU);
	//$logvar_binary(RecvData All ,$strRecvVarName);

	$delvar(strHeaderData_MYMQ_TH, strHeaderData_MYMQ_RH, strRu_Data,strRecvData_RU,LEN_ZIP_OIR_DATA,strRecvData, strSiseRealData);

	$memcpy(strHeaderData_MYMQ_TH,$strRecvVarName,$POS_MYMQ_TH,$LEN_MYMQ_TH);
	//$logvar_binary(RecvData MYMQ_TH ,strHeaderData_MYMQ_TH); 			// 패킷 길이포함 

	$map_getfielddata($p_socket_name,strPKT_LEN,MYMQ_TH,PKT_LEN,strHeaderData_MYMQ_TH); //받은데이터 패킷길이 
	$map_getfielddata($p_socket_name,strPKI_1,MYMQ_TH,PKI_1,strHeaderData_MYMQ_TH); //  Packet Indicator 1
	$map_getfielddata($p_socket_name,strPKI_2,MYMQ_TH,PKI_2,strHeaderData_MYMQ_TH); //  Packet Indicator 2 - 현재 사용 안함.
	$map_getfielddata($p_socket_name,strFUNC,MYMQ_TH,FUNC,strHeaderData_MYMQ_TH); //  Function Code
	
	//$log(MYMQ_TH.PKT_LEN:$strPKT_LEN);
	//$log(MYMQ_TH.PKI_1:$strPKI_1);
	//$log(MYMQ_TH.PKI_2:$strPKI_2);
	//$log(MYMQ_TH.FUNC:$strFUNC);
	//$log(******* 뭐냐 도대체 );
	//$logvar_binary(strFUNC);
	
	// 실시간 데이터 
	if($isequal_string($strFUNC,H) || $isequal_string($strFUNC,F)) {
		$setvar( 	
			POS_REALTYPE	= $LEN_MYMQ_TH
			,LEN_REALTYPE 	= 2
			,POS_REALDATA	= $result($POS_REALTYPE + $LEN_REALTYPE)
			,LEN_REALDATA 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH)  	
		);

		// 실시간 타입:2byte
		$memcpy(strRecvData_realtype,$strRecvVarName,$POS_REALTYPE,$LEN_REALTYPE);
		//$logvar(strRecvData_realtype);
		$memcpy(strSiseRealData,$strRecvVarName,$POS_REALDATA,$LEN_REALDATA);
		//$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,12);
		//$logvar_binary(strSiseRealData ,strSiseRealData);
		//$logvar(strRealCODE);
		if($isequal_string($strRecvData_realtype, KA)){			// 시세 
			$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,12);
			//$log(=================  실시간 데이터  : 국내 시세 [$strRealCODE] );
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$map_parsebuffer($p_socket_name,REALSISE_D,PageBlock,0,strSiseRealData,TRUE,TRUE,strRealCODE);
		}
		elseif($isequal_string($strRecvData_realtype, KB)){		// 호가 
			$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,12);
			//$log(=================  실시간 데이터  : 국내 호가 [$strRealCODE] );
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$map_parsebuffer($p_socket_name,REALHOGA_D,PageBlock,0,strSiseRealData,TRUE,TRUE,strRealCODE);
		}
		elseif($isequal_string($strRecvData_realtype, FA)){		// 해외시세
			$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,20);
			//$log(=================  실시간 데이터  : 해외시세 [$strRealCODE]);
			//$logvar_binary(RecvData All ,$strRecvVarName);
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$map_parsebuffer($p_socket_name,REALSISE,PageBlock,0,strSiseRealData,TRUE,TRUE,strRealCODE);

			//메뉴코드가 8180이며 
			if( ($isequal_string($g_menuCode , 8180) && $isequal_string($strRealCODE , $g_item_a_Stock_Symbol_N)) ||  ($isequal_string($g_menuCode , 8210) && $isequal_string($strRealCODE , $g_item_a_Stock_Symbol_N)) ){
				$setvar(
					recv_real_atm_last 			= $recvmap_realdata($p_socket_name,REALSISE,PageBlock,last,trim,,,strSiseRealData)
				);


				//157.26라는 데이터가 있다고 치고 1번째 변수는 소수점첫번째 2를 찾고 , 2번째 변수는 157를 갖고있는다.
				$setvar(
					tmp_first_decimal_place = $substring($recv_real_atm_last,$result($find($recv_real_atm_last,.)+1),1) 
					,tmp_integer = $substring($p_price,0,$find($recv_real_atm_last,.)) 
				);

				//소수점 첫재자리가 5보다 작으면 157.0 크면 157.5
				if($tmp_first_decimal_place > 5 ){
					$setvar(
						tmp_last_real_amt_data = $addstring($tmp_integer,.0)
					);
				}elseif($tmp_first_decimal_place<5){
					$setvar(
						tmp_last_real_amt_data = $addstring($tmp_integer,.5)
					);
				}

				//전역변수 tmp_atm_real_last과 현재 실시간 내려와 작업된 데이터 tmp_last_real_amt_data가 같지 않을때 함수 호출.
				if($isequal_string($tmp_atm_real_last,$tmp_last_real_amt_data)){
					$callaction(fnATM_Draw_Backcolor,$recv_real_atm_last); 
				}

				//바뀐 행사가 저장.
				$setvar_common(
					tmp_atm_real_last = $tmp_last_real_amt_data
				);

			}//end if
		}
		elseif($isequal_string($strRecvData_realtype, FB)){		// 해외호가 
			$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,20);
			//$log(=================  실시간 데이터  : 해외호가 [$strRealCODE]);
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$map_parsebuffer($p_socket_name,REALHOGA,PageBlock,0,strSiseRealData,TRUE,TRUE,strRealCODE);
		}
		elseif($isequal_string($strRecvData_realtype, FC)){		// 민감도 실시간 
			$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,20);
			//$log(=================  실시간 데이터  : 민감도 [$strRealCODE]);
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$map_parsebuffer($p_socket_name,REAL_FC,PageBlock,0,strSiseRealData,TRUE,TRUE,strRealCODE);
		}
		else{
			//$log(******************************************************** );
			//$log(=================  실시간 데이터  : [$strRecvData_realtype] );
			//$log(******************************************************** );
			//$logvar_binary(strSiseRealData ,strSiseRealData);
			$callaction(fnViewRealMsg,$p_socket_name, $strRecvData_realtype, strSiseRealData);

			$memcpy(strRealTRCODE,$strRecvVarName,$POS_REALDATA,6);
			//$logvar(strRealTRCODE);
			$map_parsebuffer($p_socket_name,$strRecvData_realtype,PageBlock,0,strSiseRealData,TRUE,TRUE,$strRealTRCODE);
		}	
		return;
	}
	
	//SM
	if($isequal_string($strFUNC,I)) {
		$setvar( 	
			POS_REALTYPE	= $LEN_MYMQ_TH
			,LEN_REALTYPE 	= 2
			,POS_REALDATA	= $result($POS_REALTYPE + $LEN_REALTYPE)
			,LEN_REALDATA 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH)  	
		);

		// 실시간 타입:2byte
		$memcpy(strRecvData_realtype,$strRecvVarName,$POS_REALTYPE,$LEN_REALTYPE);
		//$logvar(strRecvData_realtype);
		$memcpy(strSiseRealData,$strRecvVarName,$POS_REALDATA,$LEN_REALDATA);
		$memcpy(strRealCODE,$strRecvVarName,$POS_REALDATA,12);
		
		$log(=================  실시간 주문/체결 [$strRecvData_realtype]  [$strRecvVarName]);
		//$logvar_binary(strSiseRealData ,strSiseRealData);
		$map_parsebuffer($p_socket_name,$strRecvData_realtype,PageBlock,0,strSiseRealData,TRUE,TRUE,);

		$callaction(Act_Recv_Real_Ordrer_Local, $p_socket_name,$strRecvData_realtype,strSiseRealData);
		


		return;
	}
	
	if($isequal_string($strFUNC,Z)) { 		// 이중접속처리 
		$setvar( 	
			POS_REALTYPE	= $LEN_MYMQ_TH
			,LEN_REALTYPE 	= 0
			,POS_REALDATA	= $result($POS_REALTYPE + $LEN_REALTYPE)
			,LEN_REALDATA 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH)  	
		);
		$memcpy(strSiseRealData,$strRecvVarName,$POS_REALDATA,$LEN_REALDATA);
		//$logvar(strSiseRealData);

		$setvar_common( g_is_exit = true );
		$callaction(Act_Network_Disconnect_All);
		//$alertaction(Act_Duplication_Exit,,$strSiseRealData,확인);
		$callaction(fnPopover_AlertAction,Act_Duplication_Exit,$strSiseRealData,,확인);
		return;
	}

	if($isequal_string($strFUNC,E)) { 		// 공지  - 20170810에 추가 
		$setvar( 	
			POS_REALTYPE	= $LEN_MYMQ_TH
			,LEN_REALTYPE 	= 0
			,POS_REALDATA	= $result($POS_REALTYPE + $LEN_REALTYPE)
			,LEN_REALDATA 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH)  	
		);
		$memcpy(strSiseRealData,$strRecvVarName,$POS_REALDATA,$LEN_REALDATA);
		//$logvar(strSiseRealData);

		$setvar_common( g_is_exit = true );
		$callaction(Act_Network_Disconnect_All);
		//$alertaction(Act_Duplication_Exit,,$strSiseRealData,확인);
		$callaction(fnPopover_AlertAction,Act_Duplication_Exit,$strSiseRealData,,확인);
		return;
	}

	$logvar_binary(strPKI_1 ,strPKI_1);
	if($isbit_and(strPKI_1,0x01) ) { 				//  RH 헤더가 있으면 
		
		$memcpy(strHeaderData_MYMQ_RH,$strRecvVarName,$POS_MYMQ_RH,$LEN_MYMQ_RH);
		//$logvar_binary(strHeaderData_MYMQ_RH ,strHeaderData_MYMQ_RH);

		$map_getfielddata($p_socket_name,strFLAG,MYMQ_RH,FLAG,strHeaderData_MYMQ_RH); 
		$map_getfielddata($p_socket_name,strWKEY,MYMQ_RH,WKEY,strHeaderData_MYMQ_RH); 	// reqid
		$map_getfielddata($p_socket_name,strSVCODE,MYMQ_RH,SVCODE,strHeaderData_MYMQ_RH); 
		$map_getfielddata($p_socket_name,strEXCODE,MYMQ_RH,EXCODE,strHeaderData_MYMQ_RH); 
		$map_getfielddata($p_socket_name,strRKEY,MYMQ_RH,RKEY,strHeaderData_MYMQ_RH); 		// TR Code
		
		//$log(MYMQ_RH.FLAG:$strFLAG);
		//$logvar_binary(strFLAG ,strFLAG);
		//$log(MYMQ_RH.WKEY:$strWKEY);
		//$log(MYMQ_RH.SVCODE:$strSVCODE);
		//$log(MYMQ_RH.EXCODE:$strEXCODE);
		//$log(MYMQ_RH.RKEY:$strRKEY);
		
	}

	if($isbit(strFUNC,0x02) ) { 				//  키교환 데이터 
		$log(************** Act_Network_RecvData Act_KeyChange_Send Recv : g_recv_dn[$g_recv_dn]);
		$logvar_binary(RecvData All_Enc ,$strRecvVarName);
		
		//$logvar_binary(strFUNC ,strFUNC);
		$setvar(
			POS_KEYCHANGE	= $LEN_MYMQ_TH
			,LEN_KEYCHANGE 	= $result($strPKT_LEN - $POS_KEYCHANGE + $LEN_PACKET_LENGTH)
		);
		//$logvar(POS_KEYCHANGE,LEN_KEYCHANGE );
		$delvar(strRecvData_keyChange);
		$memcpy(strRecvData_keyChange,$strRecvVarName,$POS_KEYCHANGE,$LEN_KEYCHANGE);
		$logvar_binary(strRecvData_keyChange,strRecvData_keyChange);
		$setvar(strResult=$security_finalkeytoken(strRecvData_keyChange)); 		//KS_Decode_KeyFinal_Token
		//$log(=======  키교환 받음 KS_Decode_KeyFinal_Token :[strResult]  );
		if($isequal_string($strResult,-100)){ //키교환 재시도
			$log(************** Act_Network_RecvData Act_KeyChange_Send KEY CHANGE RETRY KS_Decode_KeyFinal_Token:[$strResult] ***************** );
			$setnstimer(TIMER_ORDERKEY,0.001,Act_KeyChange_Send,FALSE);
		}
		else {
			//$log(ELSE KEY CHANGE RETRY ***************** [$strResult]);
			
			if($int($strResult) < 0) {
				//$alert(,키교환 에러..어떻게..);
				$log(************** Act_Network_RecvData Act_KeyChange_Send_Fail  KS_Decode_KeyFinal_Token:[$strResult] ***************** );
				$setvar_common(g_OrderServerKeyChangeResult = false);
				$setnstimer(TIMER_ORDERKEY,0.001,Act_KeyChange_Send_Fail,FALSE);
			}
			else {
				$setvar_common(g_OrderServerKeyChangeResult = true);
				//$log(********** 키교환 성공 ***************** );
				$log(************** Act_Network_RecvData Act_KeyChange_Send Success  Call Act_KeyChange_Send_after ***************** );
				$setnstimer(TIMER_ORDERKEY,0.001,Act_KeyChange_Send_after,FALSE);
			}
		}	
		return;
	}

	if($isequal_string($strFUNC,F) ) {
		//$logvar_binary(RecvData All ,$strRecvVarName);
		$log(******************************************************** );
		$log(**************************** Unsolicitied Messages 작업해야함. );
		$log(******************************************************** );
		$delvar(strRealData_F);
		$setvar(
			,LEN_REALDATA_F 	= $result($strPKT_LEN - $POS_REALDATA + $LEN_PACKET_LENGTH) 
		);
		$memcpy(strRealData_F,$strRecvVarName,$POS_MYMQ_RH,$LEN_REALDATA_F);
		//$logvar_binary(RecvData All ,$strRecvVarName);

		return;
	}

	if($isequal_string($strEXCODE,SYS) || $isequal_string($strEXCODE,SYSTEM)){
		$memcpy(strHeaderData_MYMQ_FILE,$strRecvVarName,$POS_MYMQ_FILE,$LEN_MYMQ_FILE);

		//$logvar_binary(strHeaderData_MYMQ_FILE ,strHeaderData_MYMQ_FILE);

		$map_getfielddata($p_socket_name,strFile_path,MYMQ_FILE,PATH,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_seqn,MYMQ_FILE,SEQN,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_size,MYMQ_FILE,SIZE,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_sent,MYMQ_FILE,SENT,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_date,MYMQ_FILE,DATE,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_zipf,MYMQ_FILE,ZIPF,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_errf,MYMQ_FILE,ERRF,strHeaderData_MYMQ_FILE); 
		$map_getfielddata($p_socket_name,strFile_emsg,MYMQ_FILE,EMSG,strHeaderData_MYMQ_FILE); 

		$logvar(strFile_path, strFile_seqn, strFile_size, strFile_sent, strFile_date, strFile_zipf, strFile_errf, strFile_emsg);

		if($strFile_errf==1){
			//$alertaction(,마스터다운로드 실패,$strFile_emsg,확인); 
			$log(strFile_path-마스터다운로드 실패:[$strFile_emsg] [$strFile_path]);
			$callaction(fnPopover_AlertAction,,$addstring($strFile_emsg,:,$strFile_path),,확인);
			return;
		}

		$setvar(
			tmp_iFileSize = $int($strFile_size)
			,tmp_iSentSize = $int($strFile_sent)
			,POS_FILEDATA	= $result($POS_MYMQ_FILE + $LEN_MYMQ_FILE)
			,LEN_FILEDATA 	= $result($strPKT_LEN - $POS_FILEDATA + $LEN_PACKET_LENGTH)
		);
		
		$memcpy(strRecvData_1,$strRecvVarName,$POS_FILEDATA,$LEN_FILEDATA);
		$logvar_binary(strRecvData_1,strRecvData_1);
		
		if($tmp_iFileSize > $tmp_iSentSize ){		


		}
		else{					
			// 파일 다운로드 완료 
			if($strFile_zipf==1){		// 압축되어있다.
				$memcpy(LEN_ZIP_OIR_DATA,$strRecvVarName,$POS_FILEDATA,4);
				//$logvar_binary(LEN_ZIP_OIR_DATA,LEN_ZIP_OIR_DATA);
				$setvar(
					POS_FILEDATA = $result($POS_FILEDATA + 4)	
					,LEN_FILEDATA = $result($LEN_FILEDATA - 4)
				); 
				$htonl(LEN_ZIP_OIR_DATA);
				//$log(ZIP Data Ori Size:$LEN_ZIP_OIR_DATA);
				$memcpy(strRecv_File_ZIP,$strRecvVarName,$POS_FILEDATA,$LEN_FILEDATA);
				//$logvar_binary(strRecv_File_ZIP ,strRecv_File_ZIP); 		
				$decompressvar(strRecv_File_ZIP,$LEN_ZIP_OIR_DATA);	
				//$logvar_binary(strRecv_File_ZIP UNZIP ,strRecv_File_ZIP); 	
				//$log(=================);
				//$logvar(strRecv_File_ZIP);
				$writefile(plist/data/log/realdata.log,strRecv_File_ZIP,false,false,false);	 
				//$writefileVersion(tknNewVersion,$g_path_down/$strVersionDataVarName,$strVersionDataVarName,2:$strPATH,1:$strName,$g_path_down,3,FNVERSION_PROCESS);
			}
			else{
				$setvar(
					POS_FILEDATA = $result($POS_FILEDATA + 0)	
					,LEN_FILEDATA = $result($LEN_FILEDATA - 0)
				); 

				$memcpy(strRecv_File,$strRecvVarName,$POS_FILEDATA,$LEN_FILEDATA);
				//$logvar_binary(strRecv_File ,strRecv_File); 		
				//$log(=================);
				//$logvar(strRecv_File);
				$writefile(plist/data/log/realdata.log,strRecv_File,false,false,false);	 
			}

		}
		return;
	}


	if($isbit_and(strPKI_1,0x20) ) { 				//  에러 
		if($isbit_and(strPKI_1,0x01) ) { 				//  RH 헤더가 있으면 
			$log(********* 여기 에러다);
			if($isequal_string($strFUNC,A) || $isequal_string($strFUNC,C) ) { 					//  Error Reply Message	
				$setvar(strRU_Len = $result($strPKT_LEN  - $LEN_MYMQ_TH -  $LEN_MYMQ_RH));
				$memcpy(strRu_Data,$strRecvVarName,$POS_MYMQ_RU,$strRU_Len);
				// 업무계(주문) 일경우 Application Header가 포함되어 있다.
				//$alertaction(,에러TR:[$strRKEY],$strRu_Data,확인); 
				$callaction(fnPopover_AlertAction,,$strRu_Data,,확인);
			}
		}
		else{
			$log(********* 시스템 에러다);
			if($isequal_string($strFUNC,D) ) { 				//  System Error
				$setvar(
					strRU_Len = $result($strPKT_LEN  - $LEN_MYMQ_TH )
					,POS_MYMQ_TH =  $LEN_MYMQ_TH
				);
				$memcpy(strRu_Data,$strRecvVarName,$POS_MYMQ_TH,$strRU_Len);
				//$alertaction(,Server Recv Error,$strRu_Data,확인); 
				$callaction(fnPopover_AlertAction,,$strRu_Data,,확인);
				//$log(***************** $strRu_Data);
				// 서버에서 연결을 끊는다. - 소켓쪽 에러에서 체크한다.
				$setvar_common(g_serverToDisconnect = true);
			}
			else{
				//$alertaction(,,확인필요_No_001,확인); 
				$callaction(fnPopover_AlertAction,,확인필요_No_001,,확인);
			}
		}
		return;
	}

	

	// strPKT_LEN = TH + RH + RU Length(Big endian integer) -> header.xml에서 INT_NET으로 정의 	
	$setvar( 	LEN_MYMQ_RU = $result($strPKT_LEN - $POS_MYMQ_RU + $LEN_PACKET_LENGTH)  	);
	$memcpy(strRecvData_RU,$strRecvVarName,$POS_MYMQ_RU,$LEN_MYMQ_RU);

	//$logvar_binary(strRecvData_RU ,strRecvData_RU);

	$setvar(POS_CUR_BODYDATA = $POS_MYMQ_RU);
	if($isbit_and(strFLAG,0x02)) { 				//  이전키
		$log(이전키 있음);
		$setvar(LEN_CUR_BODYDATA = 1);
		$memcpy(strRHFlag_Pre,$strRecvVarName,$POS_CUR_BODYDATA,$LEN_CUR_BODYDATA);
		$setvar(	LEN_PRENEXTKEY = $result($ascvar(strRHFlag_Pre) + + $LEN_CUR_BODYDATA)	);
		// 이전키 복사함. - After에서 셋팅함.
		$delvar(PREKEY_HEADER_DATA);
		$memcpy(PREKEY_HEADER_DATA,$strRecvVarName,$POS_CUR_BODYDATA,$LEN_PRENEXTKEY);		// 앞의 길이 1byte를 포함하여 복사
		$setvar(	POS_CUR_BODYDATA = $result($POS_CUR_BODYDATA + $LEN_PRENEXTKEY)	);
		//$logvar_binary(PREKEY_HEADER_DATA ,PREKEY_HEADER_DATA);
		//$log(이전키:$PREKEY_HEADER_DATA);
	}
	else{
		$delvar(PREKEY_HEADER_DATA);
	}
	if($isbit_and(strFLAG,0x04)){ 				//  다음키
		$log(다음키 있음);
		$setvar(LEN_CUR_BODYDATA = 1);

		//$logvar_binary(data recv next data,$strRecvVarName);
		$memcpy(strRHFlag_Next,$strRecvVarName,$POS_CUR_BODYDATA,$LEN_CUR_BODYDATA);
		//$logvar(POS_CUR_BODYDATA,LEN_CUR_BODYDATA,strRHFlag_Next);
		$setvar(	LEN_PRENEXTKEY = $result($ascvar(strRHFlag_Next) + $LEN_CUR_BODYDATA)	);
		// 다음키 복사함. - After에서 셋팅함.
		$delvar(NEXTKEY_HEADER_DATA);
		$memcpy(NEXTKEY_HEADER_DATA,$strRecvVarName,$POS_CUR_BODYDATA,$LEN_PRENEXTKEY);  	// 앞의 길이 1byte를 포함하여 복사
		$setvar(	POS_CUR_BODYDATA = $result($POS_CUR_BODYDATA + $LEN_PRENEXTKEY)	);
		//$logvar_binary(NEXTKEY_HEADER_DATA ,NEXTKEY_HEADER_DATA);
		//$log(다음키:$NEXTKEY_HEADER_DATA);
		$logvar_binary(다음키,NEXTKEY_HEADER_DATA);
	}
	else{
		$log(다음키 없음);
		$delvar(NEXTKEY_HEADER_DATA);
	}


	
	// 다음데이터가 있을 경우 연속패킷
	if($isbit_and(strPKI_1,0x02) ) { 	
		$log(*********** 데이터 More 0x02);
		// 타켓, 소스명, 소스시작, 소스길이,타켓스코프,타켓시작위치 
		$memcpy(strTmpContinus,$strRecvVarName,$POS_CUR_BODYDATA,,FALSE,$getvarlen(strTmpContinus));
		
		//$delvar(strTmp_Unit);
		//$memcpy(strTmp_Unit,$strRecvVarName,$POS_CUR_BODYDATA);
		//$logvar_binary(strTmp_Unit, strTmp_Unit);l
		//$logvar_binary(strTmpContinus, strTmpContinus);

		return;
	}
	// 마지막 데이터일 경우 
	if($isbit_and(strPKI_1,0x08) ) { 
		$log(*********** 데이터 End);
		$delvar(strTmp_Unit);
		$memcpy(strTmp_Unit,$strRecvVarName,$POS_CUR_BODYDATA);
		//$logvar_binary(strTmp_Unit, strTmp_Unit);l

		$memcpy(strTmpContinus,$strRecvVarName,$POS_CUR_BODYDATA,,FALSE,$getvarlen(strTmpContinus));
		//$logvar_binary(strTmpContinus Last,strTmpContinus);
	}
	else{
		$log(*********** 데이터 더있다. 0x08이 없다.);
		// 타켓, 소스명, 소스시작, 소스길이,타켓스코프,타켓시작위치 
		$memcpy(strTmpContinus,$strRecvVarName,$POS_CUR_BODYDATA,,FALSE,$getvarlen(strTmpContinus));
		//$logvar_binary(strTmpContinus More,strTmpContinus);

		//$delvar(strTmp_Unit);
		//$memcpy(strTmp_Unit,$strRecvVarName,$POS_CUR_BODYDATA);
		//$logvar_binary(strTmp_Unit, strTmp_Unit);l
		
		return;
	}

	$delvar(strRecvData_Zip);
	$memcpy(strRecvData_Zip,strTmpContinus);
	$delvar(strTmpContinus);

	if($isbit_and(strPKI_1,0x10) ) { 				//  압축되어있다.
		// 압축해제 
		$log(압축되었다.);

		// 4Byte:원본길이
		$memcpy(LEN_ZIP_OIR_DATA,strRecvData_Zip,0,4);
		$htonl(LEN_ZIP_OIR_DATA);
		$log(ZIP Data Ori Size:$LEN_ZIP_OIR_DATA);
		$delvar(strRecvData);
		// 타켓, 소스명, 소스시작, 소스길이,타켓스코프,타켓시작위치 
		$memcpy(strRecvData,strRecvData_Zip,4,$getvarlen(strRecvData_Zip));

		//$log(******* 4byte 땐거 );
		//$logvar_binary(strRecvData, strRecvData);

		$decompressvar(strRecvData,$LEN_ZIP_OIR_DATA);

		//$logvar_binary(strRecvData UnZip,strRecvData);
	}
	else{
		$memcpy(strRecvData,strRecvData_Zip);
	}

	 $logvar_binary(strRecvData,strRecvData);
	

	if($isbit_and(strPKI_1,0x40) ) { 	
		$security_decrypt(strRecvData,strOrderDecData);
		if($getvarlen(strOrderDecData) > 0) {
			$delvar(strRecvData);
			$memcpy(strRecvData,strOrderDecData);
			$log(서버 데이터 복호화 성공..);
		}
		else {
			$log(서버 데이터 복호화 실패..);
		}
		//$logvar_binary(strRecvData);
	}

	// changeCMEAuthority_20191128
	$mapstruct_getattrvalue($p_socket_name,$strRKEY,RECVTYPE,strRecvType);
	//$logvar(strRecvType);

	// Unsolicitied Message  처리해야함. 

	if($isequal_string($strRKEY,pibm1003)       // 체결추이
	|| $isequal_string($strRKEY,pibm1004)       // 일별추이
	|| $isequal_string($strRKEY,pibm1012m)       // 투자자별 
	|| $isequal_string($strRKEY,pibm2101)       // 틱차트
	|| $isequal_string($strRKEY,pibm2102)       // 분차트
	|| $isequal_string($strRKEY,pibm2103)       // 일차트
	|| $isequal_string($strRKEY,pibm2104)       // 주차트
	|| $isequal_string($strRKEY,pibm2105)       // 월차트	
	|| $isequal_string($strRKEY,pibm3006)       // 옵션종합(옵션결제월별종합시세)	
	|| $isequal_string($strRKEY,pibm3022)       // 기초자산코드 조회 
	|| $isequal_string($strRKEY,pibm3001)       // 오늘의 핫딜

	|| $isequal_string($strRKEY,pibo7932)       // 해외-현재가 조회
	|| $isequal_string($strRKEY,pibo7011)       // 해외-관심종목 
	|| $isequal_string($strRKEY,pibo7013)       // 해외-TICK data
	|| $isequal_string($strRKEY,pibo7014)       // 해외-Daily data
	|| $isequal_string($strRKEY,pibo7014a)       // 해외-Weekly/Monthly data
	|| $isequal_string($strRKEY,pibo7015)       // 해외-Minute data
	|| $isequal_string($strRKEY,pibo7021)       // 해외-상품별 시세조회
	|| $isequal_string($strRKEY,pibo7022)       // 해외-거래소별 시세조회
	|| $isequal_string($strRKEY,pibo7023)       // 해외-시세전광판
	|| $isequal_string($strRKEY,pibo7025)       // FUTURE 상품별 등락률
	|| $isequal_string($strRKEY,pibo7051)       // OPTION 종합시세
	|| $isequal_string($strRKEY,pibo7933)       // FUTURE/OPTION 호가조회
	|| $isequal_string($strRKEY,pibo7501)       // FUTUREs/OPTION 챠트조회(Tick)
	|| $isequal_string($strRKEY,pibo7502)       // FUTUREs/OPTION 챠트조회(Minute)
	|| $isequal_string($strRKEY,pibo7503)       // FUTUREs/OPTION 챠트조회(Daily)
	|| $isequal_string($strRKEY,pibo7504)       // FUTUREs/OPTION 챠트조회(Weekly,Monthly)

	|| $isequal_string($strRKEY,pibo8001)		// 미국주식 시세조회

	|| $isequal_string($strRKEY,pibo8501)       // FUTUREs/OPTION 챠트조회(Tick)
	|| $isequal_string($strRKEY,pibo8502)       // FUTUREs/OPTION 챠트조회(Minute)
	|| $isequal_string($strRKEY,pibo8503)       // FUTUREs/OPTION 챠트조회(Daily)
	|| $isequal_string($strRKEY,pibo8504)       // FUTUREs/OPTION 챠트조회(Weekly,Monthly)
	|| $isequal_string($strRKEY,pibo8512)		// 미국주식당일전일

	|| $isequal_string($strRKEY,pibm1001)       // 관심종목 시세 
	|| $isequal_string($strRKEY,pibo3018)       // ATM전일종가
	|| $isequal_string($strRKEY,pibm3031)       // 주식선물총거래량
	|| $isequal_string($strRKEY,pibm3032)       // 투자자별
	

	|| $isequal_string($strRKEY,pibm1002)       // 국내 - 호가 
	){
		

		$setvar(
			//pageBlockCode=$getvar(strRKEY).PageBlock
			//,outBlockCode=$getvar(strRKEY).OutBlock
			pageBlockCode=$addstring($strRKEY,.PageBlock)
			,outBlockCode=$addstring($strRKEY,.OutBlock)
			,iPageBlockSize=$map_getstructsize($p_socket_name,$pageBlockCode)
			,iOutBlockSize=$map_getstructsize($p_socket_name,$outBlockCode)
			,iPageStartPos=0
			,iOutStartPos=$result($iPageStartPos + $iPageBlockSize)
		);
		$logvar(
			pageBlockCode
			,outBlockCode
			,iPageBlockSize
			,iOutBlockSize
			,iPageStartPos
			,iOutStartPos
		);

		//$logvar_binary(strRecvData_unzip,strRecvData);

		$delvar(strPageData,strOutBlockData);
		// 페이지 블록만큼 메모리에서 복사한다.
		$memcpy(strPageData,strRecvData,$iPageStartPos,$iPageBlockSize);
		$map_getfielddata($p_socket_name,iOCCURS,$pageBlockCode,nrec,strPageData);		// 반복데이터 갯수 
		$map_getfielddata($p_socket_name,recv_nextkey_nkey,$pageBlockCode,nkey,strPageData);	// 다음키 

		$logvar(iOCCURS, recv_nextkey_nkey);
		// 다른 블록이 있을 경우 마지막 인자에 FALSE로 한다.
		$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,FALSE);

		$memcpy(strOutBlockData,strRecvData,$iOutStartPos,$result($iOutBlockSize*$iOCCURS));
		//$logvar_binary(strOutBlockData,strOutBlockData);
		// 마지막 블록일 경우 마지막 인자에 TRUE
		$map_parsebuffer($p_socket_name,$strRKEY,OutBlock,$strWKEY,strOutBlockData,FALSE,TRUE);
	}
	elseif($isequal_string($strRKEY,pibo7012)       // 호가 
	){
		$setvar(
			//pageBlockCode=$getvar(strRKEY).PageBlock
			//,outBlockCode=$getvar(strRKEY).OutBlock
			pageBlockCode=$addstring($strRKEY,.PageBlock)
			,outBlockCode=$addstring($strRKEY,.OutBlock)
			,iPageBlockSize=$map_getstructsize($p_socket_name,$pageBlockCode)
			,iOutBlockSize=$map_getstructsize($p_socket_name,$outBlockCode)
			,iPageStartPos=0
			,iOutStartPos=$result($iPageStartPos + $iPageBlockSize)
		);
		//$logvar(
		//	pageBlockCode
		//	,outBlockCode
		//	,iPageBlockSize
		//	,iOutBlockSize
		//	,iPageStartPos
		//	,iOutStartPos
		//);

		$delvar(strPageData,strOutBlockData);
		// 페이지 블록만큼 메모리에서 복사한다.
		$memcpy(strPageData,strRecvData,$iPageStartPos,$iPageBlockSize);
		$map_getfielddata($p_socket_name,iOCCURS,$pageBlockCode,nrec,strPageData);		// 반복데이터 갯수 
		$map_getfielddata($p_socket_name,recv_nextkey_nkey,$pageBlockCode,nkey,strPageData);	// 다음키 

		//$logvar(iOCCURS, recv_nextkey_nkey);
		// 다른 블록이 있을 경우 마지막 인자에 FALSE로 한다.
		$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,FALSE);

		$memcpy(strOutBlockData,strRecvData,$iOutStartPos,$result($iOutBlockSize*1));
		//$logvar_binary(OutBlock,strOutBlockData);
		// 마지막 블록일 경우 마지막 인자에 TRUE
		$map_parsebuffer($p_socket_name,$strRKEY,OutBlock,$strWKEY,strOutBlockData,FALSE,TRUE);
	}
	elseif($isequal_string($strRKEY,pibo8004)       // 미주옵션주문 현재가 
	){
		//$logvar(strRecvData);
		$setvar( 	strRecvData_tmp = $replace(%24,|,$strRecvData)	);
		$logvar(strRecvData_tmp);
		$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strRecvData_tmp,FALSE,TRUE);	
	}
	elseif($isequal_string($strRecvType,AP)		// RECVTYPE이 APPLICATION_HEADER 에 해당하는것..changeCMEAuthority_20191128
	|| $isequal_string($strRKEY,PINPAD)       	// 암복호화 테스트 
	|| $isequal_string($strRKEY,CSBL0000)      	 // 로그인
	|| $isequal_string($strRKEY,CSBA000101)      	 // 계좌정보 조회
	//|| $isequal_string($strRKEY,GSBA911201)      	 // 양건계좌정보 관리(개별조회)
	//|| $isequal_string($strRKEY,GSBA911202)      	 // 양건계좌정보 관리 (등록)

	|| $isequal_string($strRKEY,GSBA400801)      	 // 양건계좌정보 관리(개별조회)
	|| $isequal_string($strRKEY,GSBA400811)      	 // 양건계좌정보 관리 (등록)

	|| $isequal_string($strRKEY,GSBA911203)      	 // 양건계좌정보 관리(조회)
	|| $isequal_string($strRKEY,GSBB020201)      	 // 실시간 미체결 조회
	|| $isequal_string($strRKEY,GSBB020202)      	 // 청산실시간 미체결 조회
	|| $isequal_string($strRKEY,GSBB020301)      	 // 실시간 체결 조회
	|| $isequal_string($strRKEY,GSBB020401)      	 // 실시간 미결제약정 조회
	|| $isequal_string($strRKEY,GSBB020402)      	 // 실시간 미결제약정 조회
	|| $isequal_string($strRKEY,GSBB310002)      	 // 주문가능수량 조회
	|| $isequal_string($strRKEY,GSBB310008)			 // dxFeed 주문가능수량 조회
	|| $isequal_string($strRKEY,GSBB320301)      	 // 예탁자산(환산통화)[조회]
	|| $isequal_string($strRKEY,GSBB321301)      	 // 장중손익현황 
	|| $isequal_string($strRKEY,GSBB322001)      	 // 보유포지션 FND/만기일자 잔여일조회 
	|| $isequal_string($strRKEY,GSBB331801)      	 // 옵션매수미결제 만기행사관리
	|| $isequal_string($strRKEY,GSBB331802)      	 // 옵션매수미결제 만기행사관리_행사예약처리
	|| $isequal_string($strRKEY,GSBB331803)      	 // 옵션매수미결제 만기행사관리_행사예약취소처리
	|| $isequal_string($strRKEY,GSBC390303)      	 // 국내/FX 자금대체(약정계좌조회)
	|| $isequal_string($strRKEY,GSBD390303)      	 // 국내/FX 자금대체(약정계좌조회)
	|| $isequal_string($strRKEY,GSBD921301)      	 // 입출금내역 - 해외 
	|| $isequal_string($strRKEY,DSBD190601)      	 // 입출금내역 - 국내 
	|| $isequal_string($strRKEY,GSOB390401)      	 // 은행이체출금계좌 (1:조회)
	|| $isequal_string($strRKEY,GSOB390801)      	 // 환전입금/출금 (고객조회)
	|| $isequal_string($strRKEY,GSOB390811)      	 // 환전입출금 - 고객용 (입출금)
	|| $isequal_string($strRKEY,GSBB000101)      	 // 해외선물 매도/매수 주문(주문전자서명 검증)
	|| $isequal_string($strRKEY,GSBB000102)      	 // 해외선물 정정/취소 주문(주문전자서명 검증)

	|| $isequal_string($strRKEY,GSOB390402)      	 // 이체수수료 조회 (1:조회)
	|| $isequal_string($strRKEY,GSOB390411)      	 // 은행이체출금 처리
	//|| $isequal_string($strRKEY,GSBC390301)      	 // 국내/FX 자금대체(출금가능금액조회)
	|| $isequal_string($strRKEY,GSBD390301)      	 // 국내/FX 자금대체(출금가능금액조회)

	|| $isequal_string($strRKEY,GSBC390302)      	 // 국내/FX 자금대체(출금)
	|| $isequal_string($strRKEY,GSBD390302)      	 // 대체출금 (출금)

	|| $isequal_string($strRKEY,DSBD190301)      	 // 연계 계좌 정보 조회 - 국내
	|| $isequal_string($strRKEY,DSBD190302)      	 // 당사 계좌 연계은행 입출금시 예수금 조회 - 국내
	|| $isequal_string($strRKEY,DSBD190303)      	 // 연계 은행입출금 신청 처리 - 국내
	|| $isequal_string($strRKEY,DSBD190304)      	 // 연계 은행계좌 예수금 조회 - 국내

	|| $isequal_string($strRKEY,DSBD810812)      	 // 국내-국내 대체출금
	|| $isequal_string($strRKEY,DSBD190202)      	 // 국내-해외 대체출금

	|| $isequal_string($strRKEY,CSBC190402)      	 // 계좌간 대체 등록 계좌 목록 조회
	|| $isequal_string($strRKEY,CSBC190401)      	 // 계좌간 대체 등록 계좌 목록 조회


	|| $isequal_string($strRKEY,CSBC170101)      	 // 뉴스 및 시황 목록 조회
	|| $isequal_string($strRKEY,CSBC170102)      	 // 뉴스 및 시황 내용 조회
	
	|| $isequal_string($strRKEY,CSBC170301)      	 // 경제지표 조회
	|| $isequal_string($strRKEY,CSBC170302)      	 // 경제지표 조회

	//|| $isequal_string($strRKEY,GSBP900106)      	 // 비밀번호조회
	|| $isequal_string($strRKEY,CSBA000501)      	 // 비밀번호조회
	//|| $isequal_string($strRKEY,GSBA911404)      	 // HTS 거래소별 시세조회 관리[종목선택시 사용]
	|| $isequal_string($strRKEY,CSBA000105)      	 // HTS 거래소별 시세조회 관리[종목선택시 사용]

	|| $isequal_string($strRKEY,GSBB010010)      	 // 해외 - 신) 주문.체결.미체결주문내역 조회
	|| $isequal_string($strRKEY,GSBB010020)      	 // 해외 - 참조주문내역 조회 
	|| $isequal_string($strRKEY,GSBB000201)      	 // 해외 - 신규 해외 통합 주문

	|| $isequal_string($strRKEY,GSBB000601)			 // 미주옵션 - dxFeed 주문
	|| $isequal_string($strRKEY,GSBB000602)			 // 미주옵션 - dxFeed 정정,취소
	
	|| $isequal_string($strRKEY,GSBB010030)      	 //  실시간 미결제 약정 조회(종목별합산)
	|| $isequal_string($strRKEY,GSBB010040)      	 //  실시간 미결제 약정 조회(POSITON별)

	|| $isequal_string($strRKEY,GSBB010060)      	 //  실시간 주문, 미체결, 체결 내역 조회 (건별)


	//|| $isequal_string($strRKEY,DSBB130101)      	 //  신) 주문.체결.미체결주문내역 조회(국내)
	//|| $isequal_string($strRKEY,DSBB130102)      	 //  (신) 체결 (건별 ) 내역 조회 (국내)
	//|| $isequal_string($strRKEY,DSBB130301)      	 //  (신) 미결제잔고 화면번호
	//|| $isequal_string($strRKEY,DSBB130302)      	 //  (신) 예탁자산  

	|| $isequal_string($strRKEY,DSBB010010)      	 //  신) 주문.체결.미체결주문내역 조회(국내)
	|| $isequal_string($strRKEY,DSBB010020)      	 //  (신) 체결 (건별 ) 내역 조회 (국내)
	|| $isequal_string($strRKEY,DSBB010030)      	 //  (신) 미결제잔고 화면번호
	|| $isequal_string($strRKEY,DSBB010040)      	 //  (신) 예탁자산  
	|| $isequal_string($strRKEY,DSBB010050)      	 //  OMS 주문내역
	|| $isequal_string($strRKEY,DSBB000801)      	 //  신규 국내 통합 주문

	
	|| $isequal_string($strRKEY,DSBB000901)      	 //  주문가능수량산출

	|| $isequal_string($strRKEY,DSBB000104)      	 // KOSPI200 일반주문
	|| $isequal_string($strRKEY,OMS0002)      	 // OMS 국내/해외 주문내역,미체결내역,체결내역 조회
	|| $isequal_string($strRKEY,DSBB000201)      	 // KOSPI200 취소 주문을 처리
	|| $isequal_string($strRKEY,DSBB000304)      	 // KOSPI200 전부가격정정 주문을 처리
	|| $isequal_string($strRKEY,DSBB000305)      	 // KOSPI200 전부가격정정 주문을 처리
	|| $isequal_string($strRKEY,DSBB000303)      	 // 수량일부취소처리
	|| $isequal_string($strRKEY,DSBB120501)      	 //장중손익 조회(계좌별)

	|| $isequal_string($strRKEY,DSBE121301)      	 //기간별 손익조회

	|| $isequal_string($strRKEY,CSBC700411)      	 //접속비밀번호변경
	
	|| $isequal_string($strRKEY,CSBC700101)      	 //실거래 HTS ID 가입 처리
	|| $isequal_string($strRKEY,CSBC710101)      	 //HTS중복접속관리[조회]
	|| $isequal_string($strRKEY,CSBC710111)      	 //HTS중복접속관리[신청]

	|| $isequal_string($strRKEY,CSBA000801)			// 회원탈퇴

	|| $isequal_string($strRKEY,CSBLSIGN01)      	 //DN요청인증서 조회
	|| $isequal_string($strRKEY,CSBLSIGN02)      	 //인증서내역갱신 - 오류카운트 서버에서 체킹함.
	|| $isequal_string($strRKEY,CSBOSIGN02)      	 //인증서 인코딩값 전송 및 단축인증키 수신 (공동인증 성공 시 수행)
	|| $isequal_string($strRKEY,CSBLSIGN03)      	 //인증서비밀번호 오류횟수 초기화
	|| $isequal_string($strRKEY,CSBLOGIN)      	 //로그인
	|| $isequal_string($strRKEY,CSBLOGOFF)			//로그오프
	|| $isequal_string($strRKEY,CSBLDNTR)      	 //DN요청인증서 조회

	
	|| $isequal_string($strRKEY,GSBB010050)      	 //   예탁자산  
	|| $isequal_string($strRKEY,DSBE121001)      	 //예탁자산 종합조회(자산 현황)
	|| $isequal_string($strRKEY,DSBB120201)      	 //예수금잔고 조회

	|| $isequal_string($strRKEY,GSBO000101)      	 //축약서명 테스트

	|| $isequal_string($strRKEY,CSBC600201)      	 //홈페이지 고객확인
	|| $isequal_string($strRKEY,CSBC600601)      	 //KB은행 연계계좌 개설 확인  조회
	|| $isequal_string($strRKEY,CSBC600501)      	 //인증요청/결과조회
	|| $isequal_string($strRKEY,CSBC190111)      	 //HTS ID 오류횟수 초기화 / 임시비밀번호 발급

	|| $isequal_string($strRKEY,DSBB000102)      	 //CME야간선물 일반주문
	|| $isequal_string($strRKEY,DSBB000203)      	 //CME 취소 주문을 처리
	|| $isequal_string($strRKEY,DSBB000301)	// CME야간선물  정정 주문을 처리

	|| $isequal_string($strRKEY,GSBB000103)	// 지정청산에 사용 

	|| $isequal_string($strRKEY,DSBC863701)	// 기초자산 증거금율 조회(MTS)

	|| $isequal_string($strRKEY,DSBA201501)	// CME/EUREX 야간선물 조회
	|| $isequal_string($strRKEY,DSBA201511)	// CME/EUREX 야간선물/옵션 계좌참여신청
	
	|| $isequal_string($strRKEY,DSBD810811)	// 대체입출금 조회

	|| $isequal_string($strRKEY,CSBA000601)      	 // 영업일자 조회

	|| $isequal_string($strRKEY,GSBA410001)      	 // 서머타임 여부 및 뉴욕일자 TR

	|| $isequal_string($strRKEY,CSBC610901)      	 // 투자자정보 조회 (HTS/MTS)
	|| $isequal_string($strRKEY,CSBC610903)      	 // 투자자 정보 확인서 등록/ 투자성향 조회 (HTS/MTS)
	|| $isequal_string($strRKEY,CSBC610904)      	 // 투자자 고위험 선택 확인서(HTS/MTS)

	|| $isequal_string($strRKEY,CSBC730201)      	 // CDD등록대상조회
	|| $isequal_string($strRKEY,CSBC730301)      	 // 개인CDD조회
	|| $isequal_string($strRKEY,CSBC730302)      	 // 개인CDD등록
	|| $isequal_string($strRKEY,CSBC730101)      	 // 법인CDD조회
	|| $isequal_string($strRKEY,CSBC730102)      	 // 법인CDD등록

	|| $isequal_string($strRKEY,CSBC000401)      	 // 코드조회

	|| $isequal_string($strRKEY,DSBE121003)      	 // 
	|| $isequal_string($strRKEY,GSBB320601)      	 // 
	|| $isequal_string($strRKEY,GSBB321901)      	 // 
	|| $isequal_string($strRKEY,GSBB321902)      	 // 

	|| $isequal_string($strRKEY,GSBB010110)      	 
	|| $isequal_string($strRKEY,GSBB010160)      	 
	|| $isequal_string($strRKEY,GSBB010130)      	 
	|| $isequal_string($strRKEY,GSBB341701)      	 
	|| $isequal_string($strRKEY,GSBB455001)     
	|| $isequal_string($strRKEY,GSBB455003)     

	|| $isequal_string($strRKEY,GSBB331701)
	|| $isequal_string($strRKEY,GSBB331702)

	|| $isequal_string($strRKEY,GSBB332801)
	|| $isequal_string($strRKEY,GSBB332802)

	|| $isequal_string($strRKEY, GSBA942401)
	|| $isequal_string($strRKEY, GSBA921003)
	|| $isequal_string($strRKEY, GSBA921004)
	|| $isequal_string($strRKEY, GSBA921005)
	|| $isequal_string($strRKEY, GSBA921006)
	|| $isequal_string($strRKEY, GSBA921007)
	|| $isequal_string($strRKEY, GSBA921008)
	|| $isequal_string($strRKEY, GSBA942401)
	|| $isequal_string($strRKEY, GSBA942402)
	|| $isequal_string($strRKEY, GSBA942403) 
	|| $isequal_string($strRKEY, GSBA942404)	 
	|| $isequal_string($strRKEY, GSBD920201)

	|| $isequal_string($strRKEY, GSBH371201)
	
	){
		//$log(ApplicationHeader 해석 시작..***********);
		$setvar(
			apHeaderBlockCode  =$addstring($strRKEY,.APHeaderBlock.application_header)
			,pageBlockCode=$addstring($strRKEY,.PageBlock)
			,outBlockCode=$addstring($strRKEY,.OutBlock)
			,iApHeaderBlockSize = $map_getstructsize($p_socket_name,$apHeaderBlockCode)
			,iPageBlockSize=$map_getstructsize($p_socket_name,$pageBlockCode)
			,iOutBlockSize=$map_getstructsize($p_socket_name,$outBlockCode)
			,iApHeaderStartPos=0
			,iPageStartPos=$result($iApHeaderStartPos + $iApHeaderBlockSize)
			,iOutStartPos=$result($iPageStartPos + $iPageBlockSize)
		);
		/*
		$logvar(
			apHeaderBlockCode
			,pageBlockCode
			,outBlockCode
			,iApHeaderBlockSize
			,iPageBlockSize
			,iOutBlockSize
			,iApHeaderStartPos
			,iPageStartPos
			,iOutStartPos
		);
		$logvar(LEN_PACKET_LENGTH, LEN_MYMQ_TH,LEN_MYMQ_RH,POS_MYMQ_TH,POS_MYMQ_RH,POS_MYMQ_RU);
		*/
		$logvar_binary(RecvData All ,$strRecvVarName);
		// 임시로 사용 
		$setvar(
			tmp_total_recv = $getvarlen($strRecvVarName)
			,tmp_len_th = $LEN_MYMQ_TH
			,tmp_len_rh = $LEN_MYMQ_RH
			,tmp_len_header = $result($tmp_len_th + $tmp_len_rh)
			,tmp_len_remain = $result($tmp_total_recv - $tmp_len_header)
			,tmp_len_recv_data = $getvarlen(strRecvData)

		);
		$log(전체길이[$tmp_total_recv] = tmp_len_remain[$tmp_len_remain],tmp_len_header[$tmp_len_header], tmp_len_recv_data[$tmp_len_recv_data]);

		$logvar_binary(strRecvData,strRecvData);
		$delvar(strApHeaderData, strPageData, strOutBlockData);

		
		$setvar(
			tmp_is_pageBlock = false
			,tmp_is_outBlock = false
		);


		if($iApHeaderBlockSize>0){
			$memcpy(strApHeaderData,strRecvData,$iApHeaderStartPos,$iApHeaderBlockSize,true);
			//$logvar_binary(strApHeaderData,strApHeaderData);

			$map_getfielddata($p_socket_name,recv_TRCODE,MYMQ_APPLICATION_HEADER,TRCODE,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_SCNO,MYMQ_APPLICATION_HEADER,SCNO,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_LOIP,MYMQ_APPLICATION_HEADER,LOIP,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_AUIP,MYMQ_APPLICATION_HEADER,AUIP,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_MACA,MYMQ_APPLICATION_HEADER,MACA,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_USID,MYMQ_APPLICATION_HEADER,USID,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_CTYP,MYMQ_APPLICATION_HEADER,CTYP,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_CONT,MYMQ_APPLICATION_HEADER,CONT,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_OVER,MYMQ_APPLICATION_HEADER,OVER,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_RTYP,MYMQ_APPLICATION_HEADER,RTYP,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_RCOD,MYMQ_APPLICATION_HEADER,RCOD,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_PFLG,MYMQ_APPLICATION_HEADER,PFLG,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_MEMB,MYMQ_APPLICATION_HEADER,MEMB,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_BRCD,MYMQ_APPLICATION_HEADER,BRCD,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_AUTH,MYMQ_APPLICATION_HEADER,AUTH,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_CUSE,MYMQ_APPLICATION_HEADER,CUSE,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_epwd,MYMQ_APPLICATION_HEADER,epwd,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_eflg,MYMQ_APPLICATION_HEADER,eflg,strApHeaderData); 
			$map_getfielddata($p_socket_name,recv_UDEF,MYMQ_APPLICATION_HEADER,UDEF,strApHeaderData); 

			$setvar(recv_error_msg = $callaction(Act_Error_Message,$recv_RTYP,$recv_RCOD));
			$log(recv_eflag가 0일때만 다음 동작을 실행한다. [$recv_eflg]);
			$log(에러코드:[$g_menuCode][$strRKEY][$recv_RTYP][$recv_RCOD][$recv_error_msg] - [$recv_eflg]);
			
			if($recv_eflg == 1){	
				$closescreen(pop_host_msg); 		// 에러일때는 동글뱅이 멈춤 

				if($isequal_string($strRKEY,GSBB010010)
				|| $isequal_string($strRKEY,GSBB010020)
				|| $isequal_string($strRKEY,GSBB010030)
				|| $isequal_string($strRKEY,GSBB010040)
				|| $isequal_string($strRKEY,GSBB010050)
				|| $isequal_string($strRKEY,GSBB010060)
				){
					if($isequal_string($recv_RTYP,G) && $isequal_string($recv_RCOD,50224)){
						//$alertaction(Act_GoScreen_AccountChange,,계좌유형을 확인하십시오.\n\n계좌유형 변경화면으로\n이동하시겠습니까?,취소,확인);
						$callaction(fnPopover_AlertAction,Act_GoScreen_AccountChange,계좌유형을 확인하십시오.\n계좌유형 변경화면으로 이동하시겠습니까?,취소,확인);
						return;
					}
				}
				if($isequal_string($strRKEY,CSBLSIGN01)){
					//$alertaction(Act_Login_Error,로그인 에러,$recv_error_msg,확인);	
					$callaction(fnPopover_AlertAction,Act_Login_Error,$recv_error_msg,,확인);
					return;
				}

				if($isequal_string($recv_RTYP,G) && $isequal_string($recv_RCOD,90094)){
					$callaction(fnPopover_AlertAction,,$recv_error_msg,,확인);
					$closescreen(popscreen_loding_order);
					return;
				}

				$callaction(fnOpenAlarmScreenMsg,$recv_error_msg); 


				if($isequal_string($strRKEY,GSBB000101)      	 // 일괄청산일때 에러메세지 보여줘야함. 
				|| $isequal_string($strRKEY,GSBB000201)      	 // 일괄청산일때 에러메세지 보여줘야함. 
				|| $isequal_string($strRKEY,GSBB000601)
				|| $isequal_string($strRKEY,GSBB000602)
				){
					$log(********* 청산에러남.);
					$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,TRUE);
				}
				if(
				$isequal_string($strRKEY,GSOB390402)      	 // 이체수수료조회 팝업닫기
				){
					$closescreen(popscreen_1130_withdraw);	
				}

				//ACT_ERROR_MESSAGE
				if($isequal_string($strRKEY,CSBA000501)){		// 비밀번호 조회 
					$setvar(
						txt_account_pw.value=
						,btn_popscreen_passInput.value = 재입력 
						,lbl_account_pass_alarm.value = $recv_error_msg
					);
					$delvar(tmp_input_account_pwd_var, tmp_input_account_pwd_encvar);
					//$setvar(txt_account_pw.focus = true);
				}

				if($isequal_string($strRKEY,CSBA000801)){		// 회원탈퇴
					$setvar(tmp_error_str = $recv_error_msg);
					//49030 = 탈퇴 정상 , 49032 = 탈퇴해제 정상
					//if($isequal_string($recv_RCOD,49030) || $isequal_string($recv_RCOD,49032)  ){
					if($isequal_string($recv_RCOD,49030)){
						$log(*************회원탈퇴관련 정상 처리 경우 해당 영역************);
						$callaction($strAfterActionName);
						
					}else{
						$log(회원탈퇴관련 정상 처리 아닐경우 해당 영역************);
						$callaction(fnPopover_AlertAction,,$tmp_error_str,,확인);
						
					}
				}


				if($tmp_is_popscreen){
					//$alertaction(,,$recv_error_msg,확인);	 
					$callaction(fnPopover_AlertAction,,$recv_error_msg,,확인);
				}

				$mapstruct_getattrvalue($p_socket_name,$strRKEY, ERRORCALL,strErrorCallType);
				if($isequal_string($strErrorCallType,CALL)) {
					$map_callrecvaction($p_socket_name,$strRKEY,$strWKEY,TRUE);
				}
				return;	
			}

			if($isequal_string($strRKEY,CSBLOGIN)){		// 로그인
				$setvar_common(
					g_recv_TRCODE = $recv_TRCODE
					,g_recv_SCNO = $recv_SCNO
					,g_recv_LOIP = $recv_LOIP
					,g_recv_AUIP = $recv_AUIP
					,g_recv_MACA = $recv_MACA 
					,g_recv_USID = $recv_USID
					,g_recv_CTYP = $recv_CTYP
					,g_recv_CONT = $recv_CONT
					,g_recv_OVER = $recv_OVER
					,g_recv_RTYP = $recv_RTYP
					,g_recv_RCOD = $recv_RCOD
					,g_recv_PFLG = $recv_PFLG 
					,g_recv_MEMB = $recv_MEMB
					,g_recv_BRCD = $recv_BRCD
					,g_recv_AUTH = $recv_AUTH
					,g_recv_CUSE = $recv_CUSE
					,g_recv_UDEF = $recv_UDEF
				);
				$logvar(
					g_recv_TRCODE
					,g_recv_SCNO 
					,g_recv_LOIP 
					,g_recv_AUIP
					,g_recv_MACA 
					,g_recv_USID 
					,g_recv_CTYP
					,g_recv_CONT
					,g_recv_OVER
					,g_recv_RTYP 
					,g_recv_RCOD 
					,g_recv_PFLG 
					,g_recv_MEMB
					,g_recv_BRCD 
					,g_recv_AUTH 
					,g_recv_CUSE 
					,g_recv_UDEF 
				);
				if(!$isequal_string($recv_RCOD,00000) ){
					$setvar(tmp_error_str = $recv_error_msg);
					//$alertaction(Act_Login_Error,로그인 에러,$tmp_error_str,확인);	
					$callaction(fnPopover_AlertAction,Act_Login_Error,$tmp_error_str,,확인);
					
					// 수정필요 
					// 로그인 에러가 날 경우 로그인 정보들을 초기화하고 로그인 화면으로 보내야한다.


					return;
				}

			}
			if($isequal_string($strRKEY,CSBA000101)){		// 계좌정보 조회
				if(!$isequal_string($recv_RCOD,31051) ){
					$setvar(tmp_error_str = $recv_error_msg);
					//$alertaction(Act_Account_Get_Error,계좌 목록 에러,$tmp_error_str,확인);	
					$callaction(fnPopover_AlertAction,Act_Account_Get_Error,$tmp_error_str,,확인);
					return;
				}
			}
			

			if($isequal_string($strRKEY,CSBA000501)){		// 비밀번호 조회 
				if(!$isequal_string($recv_RCOD,00000) ){
					$setvar(tmp_error_str = $recv_error_msg);
					//$alertaction(,,$tmp_error_str,확인);	
					$callaction(fnPopover_AlertAction,,$tmp_error_str,,확인);
					return;
				}
				else{
					$map_parsebuffer($p_socket_name,$strRKEY,APHeaderBlock,$strWKEY,strApHeaderData,FALSE,TRUE);
					return;
				}
			}
			/*
			if($isequal_string($strRKEY,CSBC170102)      	 // 뉴스 및 시황 내용 조회 :정상이 빈값으로 내려온다. 
			//|| $isequal_string($strRKEY,GSBA400801) 	// 양건계좌정보 관리(개별조회)
			//|| $isequal_string($strRKEY,GSBA400811) 	// 계좌유형 변경신청
			
			)
			{
				if($strlen($recv_RCOD) > 0){
					$setvar(
						tmp_error_str = $recv_error_msg
					);
					$callaction(fnOpenAlarmScreenMsg,$tmp_error_str);
				}

			}
			//elseif($isequal_string($strRKEY,GSBB000101)      // 해외선물 매도/매수 주문(주문전자서명 검증)
			*/

			$logvar(strRKEY,strWKEY,recv_RCOD);
			// 정상처리라도 메세지를 보여야 하는 경우 
			if($isequal_string($strRKEY,GSBB000101)      // 해외선물 매도/매수 주문(주문전자서명 검증)
			|| $isequal_string($strRKEY,GSBA400811) 	// 계좌유형 변경신청
			|| $isequal_string($strRKEY,GSOB390811) 	// 환전입출금 - 고객용 (입출금)
			|| $isequal_string($strRKEY,DSBB000801) 	
			|| $isequal_string($strRKEY,CSBC710111) 	//  중복접속관리 허용 			
			|| $isequal_string($strRKEY,GSBA942403) 	//  HTS ID 미국주식옵션 시세조회 관리[등록/변경/해지]			
			){
					$setvar(	tmp_error_str = $recv_error_msg	);
					$callaction(fnOpenAlarmScreenMsg,$tmp_error_str);
			}			
			else{
				if($isequal_string($recv_RCOD,00000) 
				||  $isequal_string($recv_RCOD,10152)  		// 조회가 완료되었습니다. 
				||  $isequal_string($recv_RCOD,31051)  		// 정상적으로 조회되었습니다
				){
					
				}
				else{
					$setvar(
						tmp_error_str = $recv_error_msg
					);
					$callaction(fnOpenAlarmScreenMsg,$tmp_error_str);

				}
			}
			$logvar(recv_TRCODE, recv_SCNO, recv_LOIP, recv_AUIP,recv_MACA,recv_USID,recv_CTYP,recv_CONT,recv_OVER,recv_RTYP,recv_RCOD,recv_PFLG,recv_MEMB,recv_BRCD,recv_AUTH,recv_CUSE, recv_UDEF);
			
			$map_parsebuffer($p_socket_name,$strRKEY,APHeaderBlock,$strWKEY,strApHeaderData,FALSE,FALSE);
		}


		if($iPageBlockSize>0){
			$memcpy(strPageData,strRecvData,$iPageStartPos,$iPageBlockSize); 
			//$logvar_binary(strPageData,strPageData);
			$setvar(tmp_is_pageBlock = true);
		}
		if($iOutBlockSize>0){
			// 이후 반복이 있을 경우 수정해서 사용한다. 
			$setvar(
				,tmp_remain_len = $result($getvarlen(strRecvData) - $iOutStartPos)
				//,iOCCURS = $result($tmp_remain_len / $iOutBlockSize)
				,iOCCURS = $result_floor($tmp_remain_len / $iOutBlockSize)
				,iOCCURS_MOD = $result($tmp_remain_len % $iOutBlockSize)
			);
			$log(카운트:[$iOCCURS]=[$tmp_remain_len]/[$iOutBlockSize]); 
			$log(나머지:[$iOCCURS_MOD]); 

			if($iOCCURS_MOD > 0){
				$delvar(strOutBlockData_MOD);
				//$setvar(iOCCURS = $result($iOCCURS-1));
				$setvar(iOCCURS = $result($iOCCURS-0));
				$log(**** 나머지 있음 : $iOCCURS_MOD);
				$memcpy(strOutBlockData_MOD,strRecvData,$result($iOutBlockSize*$iOCCURS + $iOutStartPos),$iOCCURS_MOD);
			}
			$memcpy(strOutBlockData,strRecvData,$iOutStartPos,$result($iOutBlockSize*$iOCCURS));
			$setvar(tmp_is_outBlock = true);
			//$logvar_binary(strOutBlockData,strOutBlockData);
		}

		$logvar(tmp_is_pageBlock, tmp_is_outBlock);
		if($tmp_is_pageBlock && $tmp_is_outBlock){
			if($isequal_string($recv_RCOD,00000) || $isequal_string($recv_RCOD,10152) || $isequal_string($recv_RCOD,53102)
			|| $isequal_string($recv_RCOD,31051) // 이체출금 조회 
			|| $isequal_string($recv_RCOD,10151)  // 조회가 계속됩니다..
			
			){
				$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,FALSE);
				$map_parsebuffer($p_socket_name,$strRKEY,OutBlock,$strWKEY,strOutBlockData,FALSE,TRUE);
			}
			else{
				$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,TRUE);
			}
		}
		elseif($tmp_is_pageBlock){
			$log(******** pageBlock 만 있다.);

			if($isequal_string($strRKEY,CSBC170102)      	 // 뉴스 및 시황 내용 조회
			){
				$delvar(strDetailData);

				$map_getfielddata($p_socket_name,dataLEN,$pageBlockCode,SIZE,strPageData); 
				
				$log(뉴스시황 나와라....[$dataLEN]);
				$logvar(dataLEN,iPageBlockSize);

				
				$memcpy(strDetailData,strPageData,107,$dataLEN);
				//$logvar_binary(strDetailData,strDetailData);
			}
			$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,TRUE);
		}
		elseif($tmp_is_outBlock){
			$log(******** outBlock 만 있다.);
			$map_parsebuffer($p_socket_name,$strRKEY,OutBlock,$strWKEY,strOutBlockData,FALSE,TRUE);
		}
		else{
			$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strPageData,FALSE,TRUE);
		}
	}

	else{	
		$map_parsebuffer($p_socket_name,$strRKEY,PageBlock,$strWKEY,strRecvData,FALSE,TRUE);
	}
" /> 

<action id="Act_GoScreen_AccountChange" scope="common" 
value="
	if($Act_GoScreen_AccountChange_param1 == 1){
		$callaction(fnGoScreen,2360);
	}
" />
// 실시간 데이터를 쏜다.
<action id="Act_Network_SendRealData" scope="common" 
value="
	if($g_debug_real_not_send_flag){
		return;
	}
	if($g_is_background){	return;	}

	// 이전 실시간이 있으면 해제한다. 
	if($getarrayvarcount(pre_arr_realdata) > 0){
		$log(*************** 국내선물 실시간 해제 );
		$logarrayvar(pre_arr_realdata);
		$delvar(strArrRealTrData);
		$setvar(iDataCount=$setTokenString1(strArrRealTrData,pre_arr_realdata,D,0x3B));
		$delvar(strSendData,MYMQ_HEADER_PKTI_1, MYMQ_HEADER_FUNC);

		$setvar(
			 ,strDataLength=$getvarlen(strArrRealTrData)
			,LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName,MYMQ_TH)-4)
			,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH )
		);
		$logvar(strDataLength);

		// Packet Indicator OR 연산으로 추가 
		$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
		$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator

		$setvar(MYMQ_HEADER_FUNC=G); 		

		$map_getstructsenddata($g_SiseSocketName,MYMQ_TH,,strSendData); 	// TH 헤더 추가
		$addvar(strSendData,strArrRealTrData); 						// 실시간 RU

		$logvar_binary( Delete REALDATA-SEND ,strSendData);

		$sendvardata($g_SiseSocketName,REALTYPE,strSendData,0,,Act_Network_RecvData,TRUE);
		$delarrayvar(pre_arr_realdata);
	}
	if($getarrayvarcount(pre_arr_realdata_d) > 0){
		$log(*************** 국내선물 실시간 해제 );
		$logarrayvar(pre_arr_realdata_d);
		$delvar(strArrRealTrData);
		$setvar(iDataCount=$setTokenString1(strArrRealTrData,pre_arr_realdata_d,D,0x3B));
		$delvar(strSendData,MYMQ_HEADER_PKTI_1, MYMQ_HEADER_FUNC);

		$setvar(
			 ,strDataLength=$getvarlen(strArrRealTrData)
			,LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
			,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH )
		);
		$logvar(strDataLength);

		// Packet Indicator OR 연산으로 추가 
		$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
		$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator

		$setvar(MYMQ_HEADER_FUNC=G); 		

		$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가
		$addvar(strSendData,strArrRealTrData); 						// 실시간 RU

		$logvar_binary( Delete REALDATA-SEND ,strSendData);

		$sendvardata($g_SiseSocketName_DOMESTIC,REALTYPE,strSendData,0,,Act_Network_RecvData,TRUE);
		$delarrayvar(pre_arr_realdata_d);
	}

	if(!$callaction(fnIsDomesticScreen)){
		$setvar(tmp_socket_name = $g_SiseSocketName);
	}
	else{
		$setvar(tmp_socket_name = $g_SiseSocketName_DOMESTIC);
	}

	$log(실시간 등록해제  배열 : $tmp_socket_name);
	
	$delarrayvar(g_manager_realdata_del);
	$arraycopy_common(g_arr_realdata,g_manager_realdata_del);

	$delvar(strArrRealTrData);
	$setvar(iDataCount=$setTokenString1(strArrRealTrData,g_arr_realdata,A,0x3B));
	$logvar(strArrRealTrData);
	$delvar(strSendData,MYMQ_HEADER_PKTI_1, MYMQ_HEADER_FUNC);
	$setvar(
		 ,strDataLength=$getvarlen(strArrRealTrData)
		,LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
		,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH )
	);
	$setvar(reqid_real_domestic=$callaction(FNNETWORK_SISESOCKET_DOMESTIC_GETREQUESTID));
	$logvar(strDataLength);

	// Packet Indicator OR 연산으로 추가 
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator

	$setvar(MYMQ_HEADER_FUNC=G); 		

	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가
	$addvar(strSendData,strArrRealTrData); 						// 실시간 RU

	$logvar_binary( REALDATA-SEND ,strSendData);
	
	$sendvardata($tmp_socket_name,REALTYPE,strSendData,0,,Act_Network_RecvData,TRUE);


	if(!$callaction(fnIsDomesticScreen)){
		$arraycopy_common(g_arr_realdata,pre_arr_realdata);
		$logarrayvar(pre_arr_realdata);
	}
	else{
		$arraycopy_common(g_arr_realdata,pre_arr_realdata_d);	
		$logarrayvar(pre_arr_realdata_d);
	}
	$delarrayvar(g_arr_realdata);
" />
<action id="Act_RealData_StartNStop" scope="common" 
params="p_is_start, p_arrName, p_socket_name, p_is_back_stop" 
value="
	if($g_debug_real_not_send_flag){
		return;
	}

	if($strlen($p_arrName) < 1){
		$log(*********** 실시간 배열명 없다.[$p_arrName]);
		return;
	}

	// XML 내려온 경우 때문에 추가함.
	//if(!$isconnect($p_socket_name)){ 	$log(******Act_RealData_StartNStop [$p_socket_name]);     return;		}

	if($p_is_start){
		$setvar(tmp_startNstop = A);
	}
	else{
		$setvar(tmp_startNstop = D);
	}
	if(!$callaction(fnIsDomesticScreen)){
		$setvar(
			tmp_socket_name = $g_SiseSocketName
			,tmp_arr_name = pre_arr_realdata
		);
	}
	else{
		$setvar(
			tmp_socket_name = $g_SiseSocketName_DOMESTIC
			,tmp_arr_name = pre_arr_realdata_d
		);
	}
	// 배열이 있을 경우 해당 종목들을 보낸다.
	if($strlen($p_arrName) > 0){
		$setvar(tmp_arr_name = $p_arrName);
	}
	if($strlen($p_socket_name) > 0){
		$setvar(tmp_socket_name = $p_socket_name);
	}

	$log(실시간 시작,정지  배열 : $tmp_socket_name, $tmp_arr_name, $p_is_start);
	//$logarrayvar($tmp_arr_name);
	//if($g_isAndroid){
		if($p_is_back_stop){
		}
		else{
			// 실시간 관리 배열에 추가한다. 
			$setvar(
				,tmp_real_idx = $getarrayindex(g_manager_realdata,0,$p_arrName)
				,tmp_real_cnt = $getarrayvarcount(g_manager_realdata)
			);
			if($tmp_real_idx < 0){ 		$setvar(tmp_real_idx = $tmp_real_cnt);		}
			if($strlen($p_arrName) > 0){
				$setsubarray_common(g_manager_realdata,$tmp_real_idx,$p_arrName,$tmp_socket_name);
			}
		}
	//}

	$delvar(strArrRealTrData);
	$setvar(iDataCount=$setTokenString1(strArrRealTrData,$tmp_arr_name,$tmp_startNstop,0x3B));
	$logvar(strArrRealTrData);
	$delvar(strSendData,MYMQ_HEADER_PKTI_1, MYMQ_HEADER_FUNC);
	$setvar(
		 ,strDataLength=$getvarlen(strArrRealTrData)
		,LEN_MYMQ_TH = $result($map_getstructsize($g_SiseSocketName_DOMESTIC,MYMQ_TH)-4)
		,MYMQ_TH_PKT_LEN=$result($strDataLength+$LEN_MYMQ_TH )
	);
	$setvar(reqid_real_domestic=$callaction(FNNETWORK_SISESOCKET_DOMESTIC_GETREQUESTID));
	$logvar(strDataLength);

	// Packet Indicator OR 연산으로 추가 
	$setbit_or(MYMQ_HEADER_PKTI_1,0x04);	// Begin Packet Indicator
	$setbit_or(MYMQ_HEADER_PKTI_1,0x08);	// End Packet Indicator

	$setvar(MYMQ_HEADER_FUNC=G); 		

	$map_getstructsenddata($g_SiseSocketName_DOMESTIC,MYMQ_TH,,strSendData); 	// TH 헤더 추가
	$addvar(strSendData,strArrRealTrData); 						// 실시간 RU

	$logvar_binary( REALDATA-SEND ,strSendData);
	
	$sendvardata($tmp_socket_name,REALTYPE,strSendData,0,,Act_Network_RecvData,TRUE);
" /> 

// 종목검색
<action id="Act_Open_itemSearch" scope="common" 
params="p_after_action, p_title"
value="
	$callaction(Act_RealData_StartNStop,false); 		// 실시간을 끊는다. 
	
	if(!$callaction(fnIsDomesticScreen)){
		$log(***** 검색창 오픈 : 해외);

		//CME 통합 체크 안되어있을시 팝업띄움.
		$logvar(g_exch_CME_GROUP_check);
		if(!$g_exch_CME_GROUP_check){
			$callaction(fnPopover_AlertAction,fnGoSiseScreen,해외선물/옵션 실시간 시세 이용 신청 하시겠습니까?,취소,확인);
		}

		$setvar(
			lbl_item_search_title.value=$p_title
			,screen_item_search.hidden_all=false
			,screen_item_search_open =true
		);
	}
	else{
		if(!$callaction(fnIsDomestic_DayScreen)){	 	// 야간 
			$log(***** 검색창 오픈 : 야간 );
			$setvar(
				lbl_item_search_title_n.value=$p_title
				,screen_item_search_n.hidden_all=false
				,screen_item_search_n_open =true
			);
			$callaction(screen_item_search_n_onload);
		}
		else{								// 주간 
			$log(***** 검색창 오픈 : 주간  );
			$setvar(
				lbl_item_search_title_d.value=$p_title
				,screen_item_search_d.hidden_all=false
				,screen_item_search_d_open =true
			);
			$callaction(screen_item_search_d_onload);
		}
		
	}
" />
<action id="fnClosePopScreen" scope="common" 
paramlog="false"
value="
	// 모든팝업닫기
	//$closescreen_all();
	$closescreen(popscreen_orderConfirm);
	$closescreen(popscreen_orderConfirm_d);
	$closescreen(popscreen_orderConfirm_n);
	$closescreen(popscreen_limit_stop);
	$closescreen(popscreen_cancel_5220);
"/>
-->
// 수정필요 
<action id="EnterBackGround" scope="common" 
//paramlog="false"
params="
p_date
,p_hour
,p_minute" 
value="
	$webview_background(trading_webview); 		// 미국주식옵션에서 사용되는 웹뷰 컨트롤
	// 새버전 적용
	return; 		
" />
// 수정필요 
<action id="BecomeActive" scope="common" 
//paramlog="false"
parmas="p_day, p_hour, p_min, p_duration" 
value="
	// 새버전 적용
	$webview_active(trading_webview);  		// 미국주식옵션에서 사용되는 웹뷰 컨트롤	
" />
<!--
<action id="Act_BecomeActive_Connect" scope="common"
params="p_after_action"
value="
	$setvar(	tmp_connected_action = $p_after_action 	);

	$setvar(tmp_3gCheck=$get3gcheck($g_3gcheck_url)); 		//1:Wifi 2:블루투스,3:3G
	$logvar(tmp_3gCheck, g_3galarm);
	$callaction( fn3GAlarm_After_BecomeActive);
"/>
<action id="fn3GAlarm_After_BecomeActive" scope="common" 
value="
	// 국내선물 서버 연결 
	$callaction(Act_Network_Connect
		, $g_SiseSocketName_DOMESTIC
		, $g_serverIP_DOMESTIC
		, $g_serverPort_DOMESTIC
		, $g_strVersionReqStart_DOMESTIC
		, $g_strVersionReqEnd_DOMESTIC
		, 0
		, Act_Network_RecvData_Master_d 			
		, Act_Server_Connect_D_BecomeActive 			// 연결 후 액션 
	);
" />
<action id="Act_Server_Connect_D_BecomeActive" scope="common" 
params="p_socket_name, p_socket_no"
value="
	if($p_socket_no<0){
		$log(************* Act_Server_Connect_D 연결에러 );
		return;
	}
	$setvar(
		p_become_active = true
	);

	// 해외 선물 서버 연결 
	$callaction(Act_Network_Connect
		, $g_SiseSocketName
		, $g_SiseServerIP
		, $g_SiseServerPort
		, $g_strVersionReqStart
		, $g_strVersionReqEnd
		, 0
		, Act_Network_RecvData_Master 			
		,Act_Server_Connect_D_connected_BecomeActive
	);
" />
<action id="Act_Server_Connect_D_connected_BecomeActive" scope="common" 
params="p_socket_name, p_socket_no"
value="
	if($p_socket_no<0){
		$log(************* Act_Server_Connect_D_connected 연결에러 );
		return;
	}

	$callaction($tmp_connected_action);
" />
<action id="Act_Server_Connect_Order_connected_BecomeActive" scope="common"
params="p_socket_name, p_socket_no"
value="
	if($p_socket_no<0){
		$log(************* 주문체결 실시간 서버 연결에러 );
		$stopnstimer(TIMER_POLLING); 
		return;
	}

	$log(============================= 서버 연결 확인 =============================);

	$isconnect($g_SiseSocketName, p_SiseSocketName_IP);
	$isconnect($g_SiseSocketName_DOMESTIC, p_SiseSocketName_DOMESTIC_IP);
	$isconnect($g_RealSocketName_Order, p_RealSocketName_Order_IP);

	$log(* 국내    >>> $isconnect($g_SiseSocketName_DOMESTIC) [$p_SiseSocketName_DOMESTIC_IP]);
	$log(* 해외    >>> $isconnect($g_SiseSocketName) [$p_SiseSocketName_IP]);
	$log(* 주문체결 >>> $isconnect($g_RealSocketName_Order) [$p_RealSocketName_Order_IP]);

	$log(============================= 서버 연결 확인 =============================);

	$callaction(Act_MaploadNSetpath
		, $p_socket_name
		, $g_path_map
		, g_arrLoadmapFile
		, g_arrMapPathFile
		, xml
	);

	$setvar_common(g_iSocketNumber_ORDERREAL=$p_socket_no);

	$log(******* 현재 서버연결 : g_RealServerIP_Order:$g_RealServerIP_Order);
	$setvar(
		lbl_tmp_connect_ip.value = $g_RealServerIP_Order
	);

	$callaction($tmp_connected_action);

"/>
<action id="Act_BecomeActive_Connected_MASTER" scope="common"
value="
	if($g_is_background){	return;	}

	$callaction(Act_Download_MasterNXml_Start, $g_strVersionFilePath, $g_strVersionFileName, fnMasterNXmlDownloading_BecomeActive, fnMasterNXmlDownloadComplete_BecomeActive);
"/>
<action id="fnMasterNXmlDownloading_BecomeActive"  scope="common"
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	
	$setvar_common(	g_isDownload = true 	);
" />
<action id="fnMasterNXmlDownloadComplete_BecomeActive" scope="common"
value="
	if($p_error_cnt>0){
		$alertaction(fnMasterNXmlDownloadFail_BecomeActive,해외선물 마스터,다운로드가 실패하였습니다.\n다시 시도하시겠습니까?,다시시도);
	}
	else{       
		$logvar(g_isDownload);
		if($g_isDownload){
			$callaction(Act_Network_Disconnect_All);
			$openfile(plist/root/intro.xml);
			return;
		}
		// 파일 날짜 저장 - 보낼때 사용한다. 
		$log(***** 여기서 저장 해외 값 저장 :$save_strFile_date,$save_strFile_size);
		$callaction(fnConfig_SetValue,g_versionFile_date 	,$save_strFile_date);
		$callaction(fnConfig_SetValue,g_versionFile_size 	,$save_strFile_size);

		$callaction(Act_Download_Master_Start_d, fnMasterDownloading_d_BecomeActive, fnMasterDownloadComplete_d_BecomeActive);
	 }
"/>
<action id="fnMasterDownloading_d_BecomeActive"  scope="common"
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	
	$setvar_common(	g_isDownload_d = true 	);
" />
<action id="fnMasterDownloadComplete_d_BecomeActive" scope="common"
value="
	$log(실패갯수:$p_error_cnt, $g_isDownload_d);

	if($p_error_cnt>0){
		$alertaction(fnMasterNXmlDownloadFail,국내선물 마스터,다운로드가 실패하였습니다.\n다시 시도하시겠습니까?,다시시도);
	}
	else{       
		$logvar(g_isDownload_d);
		/*
		if($g_isDownload_d){
			$callaction(Act_Network_Disconnect_All);
			$openfile(plist/root/intro.xml);
			return;
		}
		*/
		// 파일 날짜 저장 - 보낼때 사용한다. 
		$log(***** 여기서 저장 국내 값 저장 :$save_strFile_date_d,$save_strFile_size_d);
		$callaction(fnConfig_SetValue,g_versionFile_date_d 	,$save_strFile_date_d);
		$callaction(fnConfig_SetValue,g_versionFile_size_d 	,$save_strFile_size_d);

		$callaction(Act_Download_XML_Start, fnXMLDownloading_BecomeActive, fnXMLDownloadComplete_BecomeActive);
	 }
" />
<action id="fnXMLDownloading_BecomeActive" scope="common"
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	$setvar_common(	,g_isDownload_xml = true 		);
" />
<action id="fnXMLDownloadComplete_BecomeActive" scope="common"
value="
	$setvar_common(g_is_master_relading = true );
	$callaction(Act_Network_Disconnect_All);
	$logvar(g_isDownload_xml);
	if($g_isDownload_xml){		// XML 다운로드가 있으면 
		$log(****** XML 다운로드 인트로로 보낸다.);
		$callaction(Act_Network_Disconnect_All);
		$openfile(plist/root/intro.xml);
		return;
	}
	//$closescreen(pop_host_msg);
	$log(********** 다시연결 );
	
	$callaction(Act_Server_Connect, Act_BecomeActive_Connected);
"/>
<action id="Act_BecomeActive_Connected" scope="common"
value="
	$log(******** Act_BecomeActive_Connected g_polling_time:$g_polling_time);
	$closescreen(pop_host_msg);
	$setvar_common(
		g_polling_fail_cnt = 0
		,g_polling_d_fail_cnt = 0
		,g_polling_r_fail_cnt = 0
	);
	$setnstimer(TIMER_POLLING,$g_polling_time,Act_Polling,TRUE);
	$logvar(g_menuCode);
	if($isequal_string($g_menuCode, 1920)){		$closescreen(pop_host_msg); return;		}		//로그인 화면에서 올라오는 화면은 로그인처리 하지 않는다.

	// 로그인 처리 
	$logvar(g_login_id, g_login_pwd, g_login_cert, g_login_type, g_login_kind, g_login_id_save,g_login_dn);
	$log(공동인증서 로그인 여부:$g_cert_login_status);
	$setvar(tmp_now_check = $now(yyyyMMddHHmm));
	
	$logvar(g_login_expiry, tmp_now_check,g_cert_login_keep);


	if($int64($g_login_expiry) > $int64($tmp_now_check) 	// 만료시간이 지나지 않았으면 
	//&& $g_cert_login_status 							// 현재 공동인증서 로그인 여부
	&& $g_cert_login_keep 								// 당일접속유지
	){
		
		$callaction(fnConfig_SetValue,g_cert_login_status,true); 

		if($g_login_type == 1){ 						// ID로그인 
			if($g_login_kind == 0 						// 0:시세전용
			|| $g_login_kind == 1						// 1:모의투자
			){
				$log(여기맞나?);
				$setvar(
					var_name_id 		= g_login_id 		// 아이디  변수명 
					,var_name_pwd 		= g_login_pwd 		// 비밀번호  변수명 
					,var_name_cert 		=  					// 공동인증서 변수명 
					,var_login_type 	= $g_login_type 	// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
					,var_login_kind 	= $g_login_kind 	//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
					,var_is_id_save 	= $g_login_id_save 	// 아이디 저장여부 
					,var_dn_value  		= 		 			// dn값 
				); 	
				$log(백그라운드 로그인 상태 - 1,[$var_login_type],[$var_login_kind]);
				$callaction(Act_Sise_Login_d, $var_name_id, $var_name_pwd, Act_BecomeActive_Login_End);
			}
			else{
				if($getvarlen(g_login_cert)<1){	$log(인증서패스워드 없음); $callaction(fnGoLoginScreen,1); 	return;		} 	
				$setvar(
					var_name_id 		= g_login_id 		// 아이디  변수명 
					,var_name_pwd 		= g_login_pwd 		// 비밀번호  변수명 
					,var_name_cert 		= g_login_cert 		// 공동인증서 변수명 
					,var_login_type 	= $g_login_type 	// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
					,var_login_kind 	= $g_login_kind 	//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
					,var_is_id_save 	= $g_login_id_save 	// 아이디 저장여부 
					,var_dn_value  		= 		 		// dn값 
				); 	
				$log(백그라운드 로그인 상태 - 2,[$var_login_type],[$var_login_kind]);
				$callaction(Act_Dn_Request,  $var_name_id, $var_name_pwd, $var_name_cert ,Act_BecomeActive_Login_End);
			}
		}	
		elseif($g_login_type == 2){ 				// dn로그인 
			if($getvarlen(g_login_cert)<1){	$log(인증서패스워드 없음); $callaction(fnGoLoginScreen,1); 	return;		} 	
			$setvar(
				var_name_id 		= $g_login_id 			// 아이디  변수명 
				,var_name_pwd 		=  						// 비밀번호  변수명 
				,var_name_cert 		= g_login_cert			// 공동인증서 변수명 
				,var_login_type 	= $g_login_type			// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
				,var_login_kind 	= $g_login_kind			// 로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
				,var_is_id_save 	= $g_login_id_save 		// 아이디 저장여부 
				,var_dn_value  		= $g_login_dn 			// dn값 
			); 	
			$log(백그라운드 로그인 상태 - 3,[$var_login_type],[$var_login_kind]);
			$callaction(Act_Id_Request, $var_dn_value, $var_name_cert ,Act_BecomeActive_Login_End,,$var_name_id);
		}
		elseif($g_login_type == 3){ 				// 지문로그인 
			$setvar(
				var_name_id 		= $g_login_id 						// 아이디  변수명 
				,var_name_pwd 		=  									// 비밀번호  변수명 
				,var_name_cert 		= g_fingerprint_login_cert_pwd_enc	// 공동인증서 변수명 
				,var_login_type 	= $g_login_type 					// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
				,var_login_kind 	= $g_login_kind 					//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
				,var_is_id_save 	= $g_login_id_save 					// 아이디 저장여부 
				,var_dn_value  		= $g_fingerprint_login_dn 			// dn값 
			); 	
			$log(백그라운드 로그인 상태 - 4,[$var_login_type],[$var_login_kind]);
			$callaction(Act_Id_Request, $var_dn_value, $var_name_cert ,Act_BecomeActive_Login_End,,$var_name_id);
		}
	}
	else{		
		//$callaction(fnGoLoginScreen,1); 		// 로그인 화면으로 보낸다. - 시세전용으로 로그인 할 수 없음.
		$callaction(fnConfig_SetValue,g_cert_login_status,); 

		if($g_login_type == 1){ 						// ID로그인 
			if($g_login_kind == 0 						// 0:시세전용
			|| $g_login_kind == 1						// 1:모의투자
			){
				$log(여기맞나?);
				$setvar(
					var_name_id 		= g_login_id 		// 아이디  변수명 
					,var_name_pwd 		= g_login_pwd 		// 비밀번호  변수명 
					,var_name_cert 		=  					// 공동인증서 변수명 
					,var_login_type 	= $g_login_type 	// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
					,var_login_kind 	= $g_login_kind 	//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
					,var_is_id_save 	= $g_login_id_save 	// 아이디 저장여부 
					,var_dn_value  		= 		 			// dn값 
				); 	
				$log(백그라운드 로그인 상태 - 5,[$var_login_type],[$var_login_kind]);
				$callaction(Act_Sise_Login_d, $var_name_id, $var_name_pwd, Act_BecomeActive_Login_End);
			}
			else{
				if($getvarlen(g_login_cert)<1){	$log(인증서패스워드 없음); $callaction(fnGoLoginScreen,1); 	return;		} 	
				
				$callaction(fnConfig_SetValue,g_login_kind,0); 		//시세전용으로 변경

				$setvar(
					var_name_id 		= g_login_id 		// 아이디  변수명 
					,var_name_pwd 		= g_login_pwd 		// 비밀번호  변수명 
					,var_name_cert 		= g_login_cert 		// 공동인증서 변수명 
					,var_login_type 	= $g_login_type 	// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
					,var_login_kind 	= $g_login_kind 	// 로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
					,var_is_id_save 	= $g_login_id_save 	// 아이디 저장여부 
					,var_dn_value  		= 		 		// dn값 
				); 	
				$log(백그라운드 로그인 상태 - 6,[$var_login_type],[$var_login_kind]);
				$callaction(Act_Dn_Request,  $var_name_id, $var_name_pwd, $var_name_cert ,Act_BecomeActive_Login_End);
			}
		}	
		elseif($g_login_type == 2){ 				// dn로그인 
			if($getvarlen(g_login_cert)<1){	$log(인증서패스워드 없음); $callaction(fnGoLoginScreen,1); 	return;		} 	

			$callaction(fnConfig_SetValue,g_login_kind,0); 		//시세전용으로 변경
			$setvar(
				var_name_id 		= $g_login_id 				// 아이디  변수명 
				,var_name_pwd 		=  							// 비밀번호  변수명 
				,var_name_cert 		= g_login_cert				// 공동인증서 변수명 
				,var_login_type 	= $g_login_type				// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
				,var_login_kind 	= $g_login_kind				//로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
				,var_is_id_save 	= $g_login_id_save 			// 아이디 저장여부 
				,var_dn_value  		= $g_login_dn 				// dn값 
			); 	
			$log(백그라운드 로그인 상태 - 7,[$var_login_type],[$var_login_kind]);
			$callaction(Act_Id_Request, $var_dn_value, $var_name_cert ,Act_BecomeActive_Login_End,,$var_name_id);
		}
		elseif($g_login_type == 3){ 				// 지문로그인 
			$callaction(fnConfig_SetValue,g_login_kind,0); 		//시세전용으로 변경

			$setvar(
				var_name_id 		= $g_login_id 						// 아이디  변수명 
				,var_name_pwd 		=  									// 비밀번호  변수명 
				,var_name_cert 		= g_fingerprint_login_cert_pwd_enc	// 공동인증서 변수명 
				,var_login_type 	= $g_login_type 					// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
				,var_login_kind 	= $g_login_kind 					// 로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
				,var_is_id_save 	= $g_login_id_save 					// 아이디 저장여부 
				,var_dn_value  		= $g_fingerprint_login_dn 			// dn값 
			); 	
			$log(백그라운드 로그인 상태 - 8,[$var_login_type],[$var_login_kind]);
			$callaction(Act_Id_Request, $var_dn_value, $var_name_cert ,Act_BecomeActive_Login_End,,$var_name_id);
		}
	}
" />
<action id="Act_Dn_Sise_Login"  scope="common" 
params="p_dn, p_after_action"
value="
	$setvar(
		,tmp_varname_cert 			= $p_dn
		,tmp_Act_Dn_Sise_Login_after_action 	= $p_after_action
		

		,IN_wktp 	= 2
		,IN_usid 	= 
		,IN_cadn	= $p_dn
		,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,Act_Dn_Sise_Login_After)
	);
" />
<action id="Act_Dn_Sise_Login_After" scope="common" 
value="
	$setvar(
		recv_dn_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_casn_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_capw_id_request 	= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_cass_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_usid_id_request 		= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	$logvar(
		recv_dn_id_request
		,recv_casn_id_request
		,recv_capw_id_request
		,recv_cass_id_request
		,recv_usid_id_request
	);
	$setvar(var_name_id = recv_usid_id_request); 		// 인증서 로그인시 아이디를 받아와서 저장한다. 

	if($isequal_string($recv_cass_id_request,3)
	|| $isequal_string($recv_cass_id_request,4)
	|| $isequal_string($recv_cass_id_request,A)
	|| $isequal_string($recv_cass_id_request,B)
	){
		//$alertaction(,,공동인증서 에러,확인);
		$callaction(fnPopover_AlertAction,,공동인증서 에러,,확인);
		return;
	}

	if($strlen($recv_usid_id_request) < 1){
		//$alertaction(,,서버에서 아이디를  가져오지 못하였습니댜.,확인);
		$callaction(fnPopover_AlertAction,,서버에서 아이디를  가져오지 못하였습니댜.,,확인);
		return;
	}

	$setvar(
		recv_dn_idx = $cert_getdnindex($recv_dn_id_request)
	);
	$logvar(recv_dn_idx);

	if($recv_dn_idx < 0){
		//$alertaction(Act_GoScreen_GetCertificate,,등록된 인증서가 없습니다.\n인증서를 가져오세요,확인);
		$callaction(fnPopover_AlertAction,Act_GoScreen_GetCertificate,등록된 인증서가 없습니다.\n인증서를 가져오세요,,확인);
		return;
	}

	$callaction(fnConfig_SetValue,g_login_id 	,$recv_usid_id_request);
	$callaction($tmp_Act_Dn_Sise_Login_after_action);
" />
// 체결서버 연결이 없다??
<action id="Act_BecomeActive_Login_End" scope="common"
value="
	$setvar_common(g_reconnect_processing = );
	$closescreen(pop_host_msg);
	
	// 로그인 시 설정파일 저장 
	$callaction(fnConfig_SetValue,g_login_id 	,$getvar($var_name_id));
	$callaction(fnConfig_SetValue,g_login_pwd 	,$getvar($var_name_pwd));
	$callaction(fnConfig_SetValue,g_login_cert 	,$getvar($var_name_cert));
	$callaction(fnConfig_SetValue,g_login_type 	,$var_login_type); 				// 로그인타입 - 1:ID로그인, 2:인증서로그인, 3:지문로그인
	$callaction(fnConfig_SetValue,g_login_kind 	,$var_login_kind);				// 로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
	$callaction(fnConfig_SetValue,g_login_id_save ,$var_is_id_save);
	$callaction(fnConfig_SetValue,g_login_dn 	,$var_dn_value);
	$logvar(g_login_id, g_login_pwd, g_login_cert, g_login_type, g_login_kind, g_login_id_save,g_login_dn);

	$setvar_common(
		g_user_id  		= $g_login_id
		,g_bLoginStatus = true  
	);
	$setvar_common(g_is_background = false); // 여기서 ? 
	$log(로그인타입:$g_login_type,로그인 종류:$g_login_kind);
	
	$callaction(fnLoginStatus_View); 		// 메뉴에 인증상태 셋팅 

	if($g_login_kind == 0){ 			// 시세전용이면 
		$setvar(
			tmp_certlogin 		= $getxmlvalue(MENUDATA,menu,certlogin,^|id == '$g_menuCode')
			,tmp_simulation 	= $getxmlvalue(MENUDATA,menu,simulation,^|id == '$g_menuCode')
			,tmp_s_login 		= $getxmlvalue(MENUDATA,menu,s_login,^|id == '$g_menuCode')              // 직원용 메뉴설정 
		);
		if($tmp_certlogin){ 		// 시세만 가능한 화면으로 이동해야한다.
			$callaction(fnGoScreen,1220);
		}
		else{
			$log(일단 여기 오는지 확인좀 아마 맞을거임1 [$g_menuCode]);
			$setnstimer(TIMER_QUICKMENU_VIEW,0.05,Act_MoveScreen_timer,FALSE);
			$log(일단 여기 오는지 확인좀 아마 맞을거임2 [$g_menuCode]);
		}
	}
	elseif($g_login_kind == 1){ 			// 모의투자 
		$callaction(Act_BecomeActive_Account_Get_Success);
	}
	elseif($g_login_kind == 2){ 			// 공동인증 
		$callaction(Act_BecomeActive_Account_Get_Success);
	}
" />
<action id="Act_MoveScreen_timer" scope="common"
value="
	$log(확인 ***** $g_menuCode);
	$callaction(fnGoScreen,$g_menuCode);
"/>
<action id="Act_BecomeActive_Account_Get_Success"  scope="common"
value="
	if($g_is_test_server){
		//$callaction(Fn_BecomeActive_Account_Get_Success); 						//이런식이면 개발서버에 붙지 않는다 
		$callaction(Act_GetIP_RealServer, Fn_BecomeActive_Account_Get_Success);
	}
	else{
		$callaction(Act_GetIP_RealServer, Fn_BecomeActive_Account_Get_Success);
	}
	
"/>
<action id="Fn_BecomeActive_Account_Get_Success"  scope="common"
value="

	$log(***** 여기서 요청 [$g_menuCode]);
	if($g_menuCode == 2130 || $g_menuCode == 5130 || $g_menuCode == 7130 || $g_menuCode == 8130 || $g_menuCode == 8131){ 		//차트화면 
		$callaction(fnGoScreen,$g_menuCode);
	}
	elseif($g_menuCode == 2131){
		$callaction(Act_RealData_StartNStop, true, g_arr_realdata_2131); 	// 실시간 데이터를 요청
	}
	elseif($g_menuCode == 2132){
		$callaction(fnGoScreen,$g_menuCode);
	}
	elseif($g_menuCode == 5131){
		$callaction(Act_RealData_StartNStop, true, g_arr_realdata_5131); 	// 실시간 데이터를 요청
	}
	elseif($g_menuCode == 5132){
		$callaction(fnGoScreen,$g_menuCode);
	}
	elseif($g_menuCode == 8110 		// 와치리스트
		|| $g_menuCode == 8180 		// 종합시세
		|| $g_menuCode == 8132 		// 미국주식차트
		|| $g_menuCode == 8133 		// 미국주식옵션차트
		|| $g_menuCode == 8210 		// 주문
		|| $g_menuCode == 8211 		// 정정주문
		|| $g_menuCode == 8240 		// 순미결제
	){
		$callaction(fnGoScreen,$g_menuCode);
		$log(***** dxFeed BecomeActive 실시간 재요청);
		$callaction(fnDxfeed_Real_Send);
	}
	else{
		$callaction(screen_base_onload);
	}
	//$callaction(screen_base_onload);
" />
<action id="Act_BecomeActive_Login_Success" scope="common" 
params="p_name_id, p_name_pwd, p_name_cert, p_login_kind, p_is_id_save" 
value="
	$closescreen(pop_host_msg);
	$callaction(fnGoScreen,$g_menuCode);
	return;

	//$setsocketaction($g_SiseSocketName,Act_Network_RecvData_Master,); 	// RecvAction 을 변경하여 보낸다. 
	//$setsocketaction($g_SiseSocketName_DOMESTIC,Act_Network_RecvData_Master_d,); 	// RecvAction 을 변경하여 보낸다. 

	//$setvar_common(g_isDownload = false);

	// 마스터와 XML을 다운로드한다.
	//$callaction(Act_Download_MasterNXml_Start, $g_strVersionFilePath, $g_strVersionFileName, Act_BecomeActive_MasterNXmlDownloading, Act_BecomeActive_MasterNXmlDownloadComplete);	
" />
<action id="Act_BecomeActive_MasterNXmlDownloading" scope="common" 
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	$setvar_common(g_isDownload = true);
" />
<action id="Act_BecomeActive_MasterNXmlDownloadComplete" scope="common" 
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="

	$log(실패갯수:$p_error_cnt, $g_isDownload);

	if($p_error_cnt>0){
		$alertaction(fnMasterNXmlDownloadFail,해외선물 Back,다운로드가 실패하였습니다.\n다시 시도하시겠습니까?,다시시도);
	}
	else{       
		// 국내선물 마스터 다운로드 
		$callaction(Act_Download_Master_Start_d, Act_BecomeActive_MasterDownloading_d, Act_BecomeActive_MasterDownloadComplete_d);
	 }
" />
<action id="Act_BecomeActive_MasterDownloading_d" scope="common" 
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	$setvar_common(g_isDownload = true);
" />
<action id="Act_BecomeActive_MasterDownloadComplete_d" scope="common" 
params="p_success_cnt, p_error_cnt, p_total_cnt" 
value="
	$log(**** 파일다운로드 여부:$g_isDownload);

	if($p_error_cnt>0){
		$alertaction(fnMasterNXmlDownloadFail,국내선물 Back,다운로드가 실패하였습니다.\n다시 시도하시겠습니까?,다시시도);
	}

	if($g_isDownload){
		$setvar_common(
			g_isDownload = false
		);
		$callaction(Act_Network_Disconnect_All );
		$openfile(plist/root/intro.xml); 
	}
	else{
		$setsocketaction($g_SiseSocketName,Act_Network_RecvData,); 	// RecvAction 을 변경하여 보낸다. 
		$setsocketaction($g_SiseSocketName_DOMESTIC,Act_Network_RecvData,); 	// RecvAction 을 변경하여 보낸다. 

		// 현재화면 다시 로드한다. 
		$config_getvalue_common(cf_g_menuCode,g_menuCode);
		// 현재 종목코드를 다시 로드한다
		$config_getvalue_common(cf_g_itemcode,g_itemcode);
		$config_getvalue_common(cf_g_itemcode_d,g_itemcode_d);
		$config_getvalue_common(cf_g_itemcode_n,g_itemcode_n);

		$closescreen(pop_host_msg);
		$callaction(fnGoScreen,$g_menuCode);
	}
" />
<action id="Act_Error_Message" scope="common" 
params="p_type, p_no" 
value="

	// 최초실행시 에러코드를 읽어오지 못하는 경우가 있음. - 티라미수 에뮬레이터에서 확인 
	if($$getarrayvarcount(g_arr_rcod)<1){
		$getcsvarray(g_arr_rcod,$g_path_down/dat/ErrorCode.ini,0x3D,1,common);
	}

	$setvar(
		,tmp_sel_code = $addstring($p_type,$p_no)
		,tmp_sel_error_idx = $getarrayindex(g_arr_rcod,0,$tmp_sel_code)
		,retStr = $getarrayvar(g_arr_rcod,$tmp_sel_error_idx,1)
	);
	// 20181210 홍현준 대리 요청사항 - 에러메세지 없으면 아래와 같이 
	if($strlen($retStr) < 1){	$setvar(retStr = 알 수 없는 문제로 전산실에 문의 바랍니다.);	}
	$setvar(
		retStr = $addstring([$p_type],[$p_no],$retStr)
	);
	return $retStr;
" />
-->
<action id="Act_Error_Message_Account" scope="common" 
params="p_err_code" 
value="

	// 최초실행시 에러코드를 읽어오지 못하는 경우가 있음. - 티라미수 에뮬레이터에서 확인 
	if($$getarrayvarcount(g_arr_rcod)<1){
		$getcsvarray(g_arr_rcod,$g_path_down/dat/ErrorCode.ini,0x3D,1,common);
	}

	$setvar(
		,tmp_sel_code = $p_err_code
		,tmp_sel_error_idx = $getarrayindex(g_arr_rcod,0,$tmp_sel_code)
		,retStr = $getarrayvar(g_arr_rcod,$tmp_sel_error_idx,1)
	);
	return $retStr;
" />
<!--
 // 계좌번호 온로드
<action id="combo_account_onload" value="
	
" /> // 디폴트 계좌를 반환한다.
<action id="Act_Account_Get_Default" scope="common" 
params="p_kind" 
value="
	if($isequal_strring($p_kind,G)){		return g_default_account_f;		} 	// 해외
	elseif($isequal_strring($p_kind,D)){	return g_default_account_d;		}	// 국내
	else{					return g_default_account;		}	// 공통 

" /> // 계좌 배열명을 리턴한다.
<action id="Act_Account_Get_ArrayName" scope="common" 
value="
	if($isequal_string($g_menuCode, 2210)
	|| $isequal_string($g_menuCode, 2220)
	){
		return g_arr_account_f; 		// 해외계좌 
	}
	elseif($isequal_string($g_menuCode, 5210)
	|| $isequal_string($g_menuCode, 5220)
	)
	{
		return g_arr_account_d; 		// 국내계좌 
	}
	else{
		return g_arr_account; 		// 전체계좌 
	}
" />

// 지정청산계좌 여부 판단
<action id="Act_Account_Is_Hedge" scope="common" 
params="p_account"
value="
	//$logarrayvar(g_arr_account);
	$setvar(
		,tmp_sel_acnt_idx = $getarrayindex(g_arr_account,1,$p_account)
		,tmp_is_hedge = $getarrayvar(g_arr_account,$tmp_sel_acnt_idx,12)
	);
	if($isequal_string($tmp_is_hedge,1)){
		return true;
	}
	else{
		return false;
	}
" />


<action id="Act_Account_Get" scope="common"
params="p_user_id, p_after_action"
value="
	//계좌정보 조회
	$setvar(	
		tmp_account_get_after_action = $p_after_action
		,IN_USER_ID = $p_user_id		//계좌번호
		,IN_USER_TP = 	H			//사용자구분

		,reqid_account_get = $callaction(FNSEND_ORDERDATA,CSBA000101,Input,,,,Act_Account_Get_After)
	);
"/>
<action id="Act_Account_Get_After" scope="common"
 scope="common"
value="
	$delarrayvar(g_arr_account_all_include_K);
	$delarrayvar(g_arr_account_all);
	$delarrayvar(g_arr_account);
	$delarrayvar(querry_account_data);
	$delarrayvar(g_arr_account_f);
	$delarrayvar(g_arr_account_d);

	$clearuserinfo_all();
	$setuserinfo(CSBA000101,$reqid_account_get,recv_account_data);
	$MakeUserQuery(querry_account_data,recv_account_data,OutBlock,1);
	//$makeuserarray_common(querry_account_data,g_arr_account);
	$makeuserarray_common(querry_account_data,g_arr_account_all_include_K,,true);


	//K 추가될 예정. 관련해서 MTS는 미사용 최대근 작업
	$getsearcharray(g_arr_account_all_include_K,g_arr_account_all,K,common,13,,NOTFIRST);

	// 계좌번호로 중복제거
	$arraycopy(g_arr_account_all,g_arr_account,true,true,false,true,1,1,common); 
	$arraysort(g_arr_account,,,1);


	//20230707 최대근 작업 계좌비밀번호 자동연결 관련
	$delvar(tmp_accout_connect_idx);
	$setvar(
		tmp_accout_connect_idx = $getarrayindex(g_arr_account,1,$g_accout_connect_acct_no)
	);
	$logvar(
		tmp_accout_connect_idx
		,g_accout_connect_acct_no
		,g_accout_connect_save_pwd
	);


	if($tmp_accout_connect_idx >= 0){
		$setvar(
			,tmp_accout_connect_group_nm 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,0)
			,tmp_accout_connect_acct_no 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,1)
			,tmp_accout_connect_acct_pswd 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,2)
			,tmp_accout_connect_acct_nm 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,3)
			,tmp_accout_connect_nick_nm 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,4)
			,tmp_accout_connect_rate 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,5)
			,tmp_accout_connect_levl 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,6)
			,tmp_accout_connect_mgn_cd 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,7)
			,tmp_accout_connect_kse_dang_yn 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,8)
			,tmp_accout_connect_cme_trad_yn 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,9)
			,tmp_accout_connect_auth_sect 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,10)
			,tmp_accout_connect_pwd_yn 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,11)
			,tmp_accout_connect_acnt_heg_sect 	= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,12)
			,tmp_accout_connect_sysm_tp 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,13)
			,tmp_accout_connect_emp_no 		= $getarrayvar(g_arr_account,$tmp_accout_connect_idx,14)
		);

		$setsubarray_common(g_arr_account,$tmp_accout_connect_idx,$tmp_accout_connect_group_nm,$tmp_accout_connect_acct_no,$tmp_accout_connect_acct_pswd,$tmp_accout_connect_acct_nm,$tmp_accout_connect_nick_nm,$tmp_accout_connect_rate,$tmp_accout_connect_levl,$tmp_accout_connect_mgn_cd,$tmp_accout_connect_kse_dang_yn,$tmp_accout_connect_cme_trad_yn,$tmp_accout_connect_auth_sect,$tmp_accout_connect_pwd_yn,$tmp_accout_connect_acnt_heg_sect,$tmp_accout_connect_sysm_tp,$tmp_accout_connect_emp_no,$g_accout_connect_save_pwd);



		$logarrayvar(g_arr_account);
	}

	// 국내계좌, 해외계좌 분리 
	$getsearcharray(g_arr_account,g_arr_account_f,G,common,13,,first); 		// 해외계좌 
	$getsearcharray(g_arr_account,g_arr_account_d,D,common,13,,first); 		// 국내계좌 

	$getsearcharray(g_arr_account_f,g_arr_account_f_l,0,common,12,,first); 		// 해외계좌 - 일반 
	$getsearcharray(g_arr_account_f,g_arr_account_f_g,1,common,12,,first); 		// 해외계좌 - 지정

	$logarrayvar(g_arr_account_all_include_K);
	$logarrayvar(g_arr_account_all);	
	$logarrayvar(g_arr_account);
	$logarrayvar(g_arr_account_f);
	$logarrayvar(g_arr_account_d);
	$logarrayvar(g_arr_account_f_l);
	$logarrayvar(g_arr_account_f_g);


	$setvar(
		tmp_default_idx_f = $getarrayindex(g_arr_account_f,1,$g_default_account_f)
		,tmp_default_idx_d = $getarrayindex(g_arr_account_d,1,$g_default_account_d)
		,tmp_default_idx = $getarrayindex(g_arr_account,1,$g_default_account)

		,tmp_default_idx_f_l = $getarrayindex(g_arr_account_f_l,1,$g_default_account_f_l)
		,tmp_default_idx_f_g = $getarrayindex(g_arr_account_f_g,1,$g_default_account_f_g)
	);
	if($tmp_default_idx_f < 0){	$setvar_common(g_default_account_f = $getarrayvar(g_arr_account_f,0,1));	}
	if($tmp_default_idx_d < 0){	$setvar_common(g_default_account_d = $getarrayvar(g_arr_account_d,0,1));	}
	if($tmp_default_idx < 0){	$setvar_common(g_default_account = $getarrayvar(g_arr_account,0,1));	}

	if($tmp_default_idx_f_l < 0){	$setvar_common(g_default_account_f_l = $getarrayvar(g_arr_account_f_l,0,1));	}
	if($tmp_default_idx_f_g < 0){	$setvar_common(g_default_account_f_g = $getarrayvar(g_arr_account_f_g,0,1));	}

	$callaction(Act_EXCH_Get, $getvar($p_name_id), $tmp_account_get_after_action);

	//$callaction($tmp_account_get_after_action);
" />
<action id="Act_Account_Default_Global"  scope="common"
value=" 
	if($g_menuCode < 2300){	return $g_default_account_f_l;		}
	elseif($g_menuCode > 8000 && $g_menuCode < 8300 ){	return $g_default_account_f_l;		}
	else{				return $g_default_account_f_g;	}

" />

<action id="Act_EXCH_Get" scope="common"
params="p_user_id, p_after_action"
value="
	//HTS 거래소별 시세조회 관리[종목선택시 사용]
	$setvar(	
		tmp_account_get_after_action = $p_after_action
		//,USID = $g_user_id
		,reqid_CSBA000105 = $callaction(FNSEND_ORDERDATA,CSBA000105,Input,,,,Act_EXCH_Get_After)
	);
" />

// changeCMEAuthority_20191128
<action id="Act_EXCH_Get_After_Process" scope="common" 
value="
	//$logvar_binary(Act_EXCH_Get_After_Process PageBlock,strPageData);
	$setvar(
		CSBA000105_ech1 = $recvmap_data(CSBA000105,PageBlock.ech1,$reqid_CSBA000105,trim)     //EXCH CME   (01:허용 00:불가)
		,CSBA000105_ech2 = $recvmap_data(CSBA000105,PageBlock.ech2,$reqid_CSBA000105,trim)    //EXCH EUREX (04:허용 00:불가)
		,CSBA000105_ech3 = $recvmap_data(CSBA000105,PageBlock.ech3,$reqid_CSBA000105,trim)    //EXCH SGX   (05:허용 00:불가)
		,CSBA000105_ech4 = $recvmap_data(CSBA000105,PageBlock.ech4,$reqid_CSBA000105,trim)    //EXCH HKE   (06:허용 00:불가)
		,CSBA000105_ech5 = $recvmap_data(CSBA000105,PageBlock.ech5,$reqid_CSBA000105,trim)    //EXCH ICE   (11:허용 00:불가)
		,CSBA000105_ech6 = $recvmap_data(CSBA000105,PageBlock.ech6,$reqid_CSBA000105,trim)    //EXCH OSE   (07:허용 00:불가)
		,CSBA000105_ech7 = $recvmap_data(CSBA000105,PageBlock.ech7,$reqid_CSBA000105,trim)    //EXCH CMX   (12:허용 00:불가)
		,CSBA000105_ech8 = $recvmap_data(CSBA000105,PageBlock.ech8,$reqid_CSBA000105,trim)    //EXCH NYM   (22:허용 00:불가)
		,CSBA000105_ech9 = $recvmap_data(CSBA000105,PageBlock.ech9,$reqid_CSBA000105,trim)    //EXCH CBT   (32:허용 00:불가)
		,CSBA000105_ech10 = $recvmap_data(CSBA000105,PageBlock.ech10,$reqid_CSBA000105,trim)    //EXCH BQT   (17:허용 00:불가)
		,CSBA000105_ech11 = $recvmap_data(CSBA000105,PageBlock.ech11,$reqid_CSBA000105,trim)    //EXCH OPRA   (26:허용 00:불가)
		,CSBA000105_ech13 = $recvmap_data(CSBA000105,PageBlock.ech11,$reqid_CSBA000105,trim)    //EXCH CBOE   (26:허용 00:불가)
	);

	$setvar_common(
		g_CSBA000105_exch_BQT = $recvmap_data(CSBA000105,PageBlock.ech10,$reqid_CSBA000105,trim)
		,g_CSBA000105_exch_OPRA = $recvmap_data(CSBA000105,PageBlock.ech11,$reqid_CSBA000105,trim)
		,g_CSBA000105_exch_CBOE = $recvmap_data(CSBA000105,PageBlock.ech13,$reqid_CSBA000105,trim) //지수 추가
	);

	$log(BQT,OPRA [ $CSBA000105_ech10 , $CSBA000105_ech11 , $g_CSBA000105_exch_BQT , $g_CSBA000105_exch_OPRA ]);  

	$delarrayvar(arr_EXCH_Total,arr_EXCH_Group);
	$setsubarray_common(arr_EXCH_Total,0,FCME,CME,$CSBA000105_ech1);
	$setsubarray_common(arr_EXCH_Total,1,FCME,CMX,$CSBA000105_ech7);
	$setsubarray_common(arr_EXCH_Total,2,FCME,NYM,$CSBA000105_ech8);
	$setsubarray_common(arr_EXCH_Total,3,FCME,CBT,$CSBA000105_ech9);
	$setsubarray_common(arr_EXCH_Total,4,FERX,ERX,$CSBA000105_ech2);
	$setsubarray_common(arr_EXCH_Total,5,FSGX,SGX,$CSBA000105_ech3);
	$setsubarray_common(arr_EXCH_Total,6,FHKE,HKE,$CSBA000105_ech4);
	$setsubarray_common(arr_EXCH_Total,7,FICE,ICE,$CSBA000105_ech5);
	$setsubarray_common(arr_EXCH_Total,8,FOSE,OSE,$CSBA000105_ech6);

	$setsubarray_common(arr_EXCH_Group,0,FCME,00);
	$setsubarray_common(arr_EXCH_Group,1,FERX,$CSBA000105_ech2);
	$setsubarray_common(arr_EXCH_Group,2,FSGX,$CSBA000105_ech3);
	$setsubarray_common(arr_EXCH_Group,3,FHKE,$CSBA000105_ech4);
	$setsubarray_common(arr_EXCH_Group,4,FICE,$CSBA000105_ech5);
	$setsubarray_common(arr_EXCH_Group,5,FOSE,$CSBA000105_ech6);
	
	$delarrayvar(arr_EXCH);
	$delvar_common(g_strListEACHSub);

	$setvar_common(g_strListEACHSub=|);
	$setvar(bCMESetting=false);
	if($isequal_string($CSBA000105_ech1,01)) {
		$setvar(bCMESetting=true);
		$addvardata(g_strListEACHSub,|CME);
	}
	if($isequal_string($CSBA000105_ech7,12)) {
		$setvar(bCMESetting=true);
		$addvardata(g_strListEACHSub,|CMX);
	}
	if($isequal_string($CSBA000105_ech8,22)) {
		$setvar(bCMESetting=true);
		$addvardata(g_strListEACHSub,|NYM);
	}
	if($isequal_string($CSBA000105_ech9,32)) {
		$setvar(bCMESetting=true);
		$addvardata(g_strListEACHSub,|CBT);
	}
	$addvardata(g_strListEACHSub,|);

	$delvar_common(g_strListEACHMain);
	$setvar_common(g_strListEACHMain=|);
	if($bCMESetting) {
		$addvardata(g_strListEACHMain,|01);
	}
	$addvardata(g_strListEACHMain,|$CSBA000105_ech2);
	$addvardata(g_strListEACHMain,|$CSBA000105_ech3);
	$addvardata(g_strListEACHMain,|$CSBA000105_ech4);
	$addvardata(g_strListEACHMain,|$CSBA000105_ech5);
	$addvardata(g_strListEACHMain,|$CSBA000105_ech6);
	$addvardata(g_strListEACHMain,|);

	$logvar(g_strListEACHMain);
	$logvar(g_strListEACHSub);

	if($bCMESetting){     
		$setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FCME,CME,01);   
		$setsubarray_common(arr_EXCH_Group,0,FCME,01);
	}
	// EUREX 는 사용하지 않는것 같아서 통일성있게 3글자로 바꿈..추후에 문제가 생기면 다시 생각..
	//if($isequal_string($CSBA000105_ech2,04)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FERX,EUREX,$CSBA000105_ech2); }
	if($isequal_string($CSBA000105_ech2,04)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FERX,ERX,$CSBA000105_ech2); }
	if($isequal_string($CSBA000105_ech3,05)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FSGX,SGX,$CSBA000105_ech3);   }
	if($isequal_string($CSBA000105_ech4,06)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FHKE,HKE,$CSBA000105_ech4);   }
	if($isequal_string($CSBA000105_ech5,11)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FICE,ICE,$CSBA000105_ech5);   }
	if($isequal_string($CSBA000105_ech6,07)){     $setsubarray_common(arr_EXCH,$getarrayvarcount(arr_EXCH),FOSE,OSE,$CSBA000105_ech6);   }

	$setvar(iArrCount=$getarrayvarcount(g_ArrFuturesExch));
	$log(Act_EXCH_Get_After_Process call Act_LoadMaster_Exch_Process Start count[$iArrCount]);
	for($iExchIndex = 0; $iExchIndex < $iArrCount; $iExchIndex++) {
		$setvar(strExch=$getarrayvar(g_ArrFuturesExch, $iExchIndex, 2));
		$callaction(Act_LoadMaster_Exch_Process,$strExch);
		$log(Act_EXCH_Get_After_Process call Act_LoadMaster_Exch_Process i[$iExchIndex] exch[$strExch]);
	}
	$log(HTS 거래소별 시세조회 관리);

	//20221111작업.
	//CME그룹 통합 체크 안되어있으면 해외 종목검색창 진입시 팝업창.
	//CME그룹 통합(CME,COMEX,NYMEX,CBOT)
	//20230821 : CME전부 체크되어있지않으면 팝업띄움을 하나라도 체크되어있지않다면 팝업띄움으로 변경
	if($isequal_string($CSBA000105_ech1,01)
	|| $isequal_string($CSBA000105_ech7,12)
	|| $isequal_string($CSBA000105_ech8,22)
	|| $isequal_string($CSBA000105_ech9,32)
	){
		$setvar_common(g_exch_CME_GROUP_check = true);
	}else{
		$setvar_common(g_exch_CME_GROUP_check = false);
	}
	$logarrayvar(arr_EXCH_Total);
	$logarrayvar(arr_EXCH_Group);
	$logarrayvar(arr_EXCH);
" />

<action id="Act_EXCH_Get_After" scope="common"
value="
	$callaction(Act_EXCH_Get_After_Process);
	$callaction($tmp_account_get_after_action);
" />

<action id="fnOpenPopScreen" scope="common"
params="p_file_path,p_title, p_close_action"
value="
	$setvar(
		tmp_import_file	= $p_file_path
		,tmp_import_title 	= $p_title
		,tmp_close_action 	= $p_close_action
		,tmp_is_popscreen 	= true
	);
	$logvar(
		tmp_import_file	
		,tmp_import_title 		
		,tmp_close_action 	
		,tmp_is_popscreen
	);

	$popscreen(popscreen_base);
" />
<popscreen id="popscreen_base" scope="common"
	width="$g_lcdWidth"
	height="$g_lcdHeight"
	onload=""
	onunload="$setvar(tmp_is_popscreen = );$callaction($tmp_close_action)"
	>
	<screen width="$super.width" height="$super.height" backcolor="ffffff">
		
		<screen  backcolor="00ff00">
			<import_dynamic filename="$tmp_import_file"/>
		</screen>
		<br/>
		<viewgroup 
			id="vg_popscreen_base"
			y="0"
			width="$super.width" height="$g_topHeight"	
			backcolor="464b4e" 
			>
			<label  fontsize="$g_fontsize_big1" fontname="$g_baseFontNameBold" align="center" valign="center" textcolor="ffffff" 
			value="$tmp_import_title " />
			<viewgroup id="popscreen_base_btn_history" x="0" width="$w($g_lcdWidth,12.4)" height="$this.remain_bottom" >
				<img src="$icon_back" x="$w($g_lcdWidth,2.6)" layout_vertical="center" />
				<button class="cs_button_none" onClicked="$closescreen(popscreen_base)" />
			</viewgroup>
			<viewgroup id="popscreen_base_btn_history_2" x="$w($g_lcdWidth,87.6)" width="$w($g_lcdWidth,12.4)" height="$this.remain_bottom" hidden="true">
				<img src="$icon_pop_cancel_w" x="$w($g_lcdWidth,2.6)" layout_vertical="center" />
				<button class="cs_button_none" onClicked="$closescreen(popscreen_base)" />
			</viewgroup>
		</viewgroup>
	</screen>
</popscreen>
<action id="popscreen_select_id_onload"  scope="common"
value="
	$setvar(vg_login_process_ing.hidden = false);
" />
<popscreen id="popscreen_select_id" scope="common" width="$g_lcdWidth" height="$g_lcdHeight" backcolor="ffffff" 
onload="popscreen_select_id_onload"
>
	<screen width="$super.width" height="$super.height"  backcolor="eeeeee">
		<viewgroup id="vg_top_title" width="$super.width" height="$g_topHeight"	
		backcolor="464b4e">
			<label id="lbl_title" fontsize="$g_fontsize_big1" fontname="$g_baseFontNameBold" align="center" valign="center" textcolor="ffffff" value="아이디 선택"/>
			<viewgroup id="btn_history" x="0" width="$w($g_lcdWidth,12.4)" height="$this.remain_bottom" >
				<img src="$icon_back" x="$w($g_lcdWidth,2.6)" layout_vertical="center" />
				<button class="cs_button_none" onClicked="$callaction(Act_select_no_id);" />
			</viewgroup>
		</viewgroup>
		<br/>
		<screen>
			<br height="$h($g_lcdHeight,1)"/>
			<table id="table_id_list" width="$this.remain_right" height="$this.remain_bottom"
			rowkey_count="20" nsrowlinecolor="none"
			onload="$setarraydata(table_id_list,arr_id_list);"
			>
				<tr width="$super.width" height="$h($g_lcdHeight,14)" blank="true"
				arraydata="0:key:trim"
				//onClicked="$alert(Act_table_id_list_select,[$this.key] 선택하였습니다.,,확인);"
				onClicked="$callaction(Act_table_id_list_select);"
				>
					<td width="$super.width" height="$super.height" >
						<br height="$h($g_lcdHeight,1)"/>
						<viewgroup width="$w($g_lcdWidth,33)">
						</viewgroup>
						<viewgroup width="$this.remain_right" height="$h($g_lcdHeight,12)" border_width="$g_roundHeight" border_color="c2c2c2" layout="center"
						>
							<br height="$h($g_lcdHeight,1.5)"/>
							<viewgroup width="$w($g_lcdWidth,12)">
							</viewgroup>
							<label fontsize="$g_fontSize_basic" textcolor="666666" width="$w($g_lcdWidth,14)" height="$h($g_lcdHeight,9)" value="아이디 :"/>
							<blank width="$w($g_lcdWidth,1)"/>
							<label fontsize="$g_fontSize_basic" textcolor="666666" height="$h($g_lcdHeight,9)" arraydata="0:value:trim" /><br/>
						</viewgroup>
						<br height="$h($g_lcdHeight,1)"/>
					</td>
				</tr>
			</table>
		</screen>
	</screen>
</popscreen>

<action id="Act_select_no_id" scope="common"
value="
	//$alertaction(,,선택된아이디가 없습니다.,확인);
	$callaction(fnPopover_AlertAction,,선택된아이디가 없습니다.,,확인);
	$closescreen(popscreen_select_id);
	$delvar_all(g_user_pw_cert_var_kind_2);
$logvar(g_user_pw_cert_var_kind_2);
"/>

<action id="Act_table_id_list_select" scope="common"
value="
	$logvar(var_select_div);
	//====================== 비밀번호 세팅 ==========================
	if($var_select_div == 1){		// 인증서 로그인의 경우
		$setvar(value_cert = g_user_pw_cert_var_kind_2);
	}
	elseif($var_select_div == 2){	// 지문 로그인의 경우
		$setvar(value_cert = g_fingerprint_login_cert_pwd_enc);
	}
	elseif($var_select_div == 3){	// 지문 등록의 경우
		$setvar(value_cert = 1191_g_user_pw_cert_var);
	}
	//============================================================
	//$logvar($getvar(g_user_pw_cert_var_kind_2));
	//$logvar($getvar(g_fingerprint_login_cert_pwd_enc));
	//$logvar($getvar(1191_g_user_pw_cert_var));
	$logvar(value_cert);
	
	$setvar(
					select_id 		= $this.key 		//선택한 아이디명
					,var_name_cert 	= $value_cert 		//비밀번호 변수명
					,var_dn_value 	= $value_dn 		//dn
	);
	$logvar(var_dn_value);
	$logvar(select_id);
	$logvar(var_name_cert);
	$closescreen(popscreen_select_id);

	if($var_select_div == 3){ 					//지문등록 액션호출
		$callaction(fnFingerPrintCertRegist);
		return;
	}
	$setvar(
		tmp_login_gubun = 2
	);
	$callaction(Act_Server_IP_Check_action_login);
	
"/>
-->
// 확인필요 - 비대면 영상통화 시 필요 
<action id="fn_push_receive" scope="common" 
value="
    $log(여기 푸쉬? action_login.xml $kindMessage);
    /*
    $logvar(
		p_noti_Body
		, p_noti_BodyLocalizationKey
		, p_noti_ClickAction
		, p_noti_Color
		, p_noti_Icon
		, p_noti_Sound
		, p_noti_Tag
		, p_noti_Title
		, p_noti_TitleLocalizationKey
	);
	*/
	$setvar(
		iVarCount 		= $fn_push_receive_paramcount
		, kindMessage 	= $getvar($fn_push_receive_param1)
	);
	// 임시로 로그남김..
	for($i = 1; $i <= $iVarCount; $i++) {
		$logvar($getvar(fn_push_receive_param$i));
	}
	//$logvar(apns_gcm.notification.body);
	//$logvar(apns_state,apns_category,apns_push_id,apns_push_type,apns_aps_alert);
	
	
	//$log(******** fn_push_receive : action_login.xml **********);
	$logvar(kindMessage);

	if($kindMessage == 0) {
		$setvar(strPushToken=$getvar($fn_push_receive_param2));
		$log(FN_PUSH_RECEIVE token receive [$strPushToken]);
		if($strlen($strPushToken) > 0){
			$setvar_common(p_APNS_RegKey = $strPushToken);
		}
	}
	else if($kindMessage == 1) {
		$log(FN_PUSH_RECEIVE 미실행중인 상태에서 푸시데이터 수신..);
		$SetIconBadgeNumber(0);
		// 미실행중일때는 intro_before 보다 먼저실행 - 안드로이드 
		if($g_isAndroid){
			if($strlen($apns_message) > 0){
				$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_work_no
        			,g_OUT_CALL_USER_ID = $apns_user_id
        		);
	    		$setvar_common(g_is_push_exec = true);
	    		$delvar(apns_message);
	    	}
	    }
	    else{
	    	$log(여기탔다.3);
        	$logvar(
        		apns_aps_work_no
        		,apns_aps_user_id
        	);
	    	if($strlen($apns_aps_work_no) > 0 && $strlen($apns_aps_user_id) > 0){
        		$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_aps_work_no
        			,g_OUT_CALL_USER_ID = $apns_aps_user_id
        		);
        		$setvar_common(g_is_push_exec = true);
        		$delvar(apns_aps_work_no,apns_aps_user_id);
        	}
        	else{
        		return;
        	}
	    }
        $log(푸쉬여부 action_login.xml:$g_is_push_exec);
    }
	else if($kindMessage == 2) {
		$SetIconBadgeNumber(0);
		$log(FN_PUSH_RECEIVE 백그라운드 상태에서 푸시데이터 수신..);
        $logvar(g_pre_push_id,apns_push_id);

        if($g_isAndroid){
        	$logvar(apns_message);
        	if($strlen($apns_message) > 0){
        		$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_work_no
        			,g_OUT_CALL_USER_ID = $apns_user_id
        		);
        		$delvar(apns_message);
        	}
        	else{
        		return;
        	}
        }
        else{
        	$log(여기탔다.2);
        	$logvar(
        		apns_aps_work_no
        		,apns_aps_user_id
        	);
        	if($strlen($apns_aps_work_no) > 0 && $strlen($apns_aps_user_id) > 0){
        		$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_aps_work_no
        			,g_OUT_CALL_USER_ID = $apns_aps_user_id
        		);
        		$delvar(apns_aps_work_no,apns_aps_user_id);
        	}
        	else{
        		return;
        	}
        }
        if(!$ssl_isconnect($g_SSLSocketName)) {	
			$callaction(fnPush_Recv_Start_Play);
		}
		else{
			// 여기 걸림.
			$setvar_common(g_is_push_alert = true);
			//$alertaction(fn_Mo_CALL_confirm,,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
			$callaction(fnPopover_AlertAction,fn_Mo_CALL_confirm,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
		}
	}
	else if($kindMessage == 3) {
		$SetIconBadgeNumber(0);
		if($g_isAndroid){
        	if($strlen($apns_message) > 0){
        		$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_work_no
        			,g_OUT_CALL_USER_ID = $apns_user_id
        		);
        		$delvar(apns_message);
        	}
        	else{
        		return;
        	}
        }
        else{
        	$log(여기탔다.1);
        	$logvar(
        		apns_aps_work_no
        		,apns_aps_user_id
        	);
        	if($strlen($apns_aps_work_no) > 0 && $strlen($apns_aps_user_id) > 0){
        		$setvar_common(
        			g_OUT_AGREE_WORK_NO = $apns_aps_work_no
        			,g_OUT_CALL_USER_ID = $apns_aps_user_id
        		);
        		$delvar(apns_aps_work_no,apns_aps_user_id);
        	}
        	else{
        		return;
        	}
        }
		if(!$ssl_isconnect($g_SSLSocketName)) {	
			$callaction(fnPush_Recv_Start_Play);
		}
		else{
			//$alertaction(fn_Mo_CALL_confirm,,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
			$callaction(fnPopover_AlertAction,fn_Mo_CALL_confirm,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
		}
		return;
	}
	else if($kindMessage == 5) {   // 안드로이드의 경우 포그라운드에서 메세지 클릭했을 때...
		$SetIconBadgeNumber(0);
		if($strlen($apns_work_no) > 0){		$setvar_common(g_OUT_AGREE_WORK_NO = $apns_work_no);	}
		if($strlen($apns_user_id) > 0){		$setvar_common(g_OUT_CALL_USER_ID = $apns_user_id);	}

		$log(FN_PUSH_RECEIVE    메세지클릭.);
	}
	else if($kindMessage == 4) {
		$log(=============>PUSH_RECEIVE 푸시 체크했는데 없는경우..);
		return;
	}
	else {
		$log(=============>PUSH_RECEIVE ELSE문 );
	}

	$SetIconBadgeNumber(0);
"/>
<action id="fnPush_Recv_Start_Play" scope="common"
value="
	$setvar_common(
		g_SSLSocketName = $callaction(Act_SSL_Connect,$g_serverIP_account,$g_serverPort_account_ssl,Act_SSL_Connected_push,Act_SSL_Closed,Act_SSL_RecvData)
	);
" />
<action id="fnStartVideo" scope="common"
value="
    //$saveBase64Image(파일명, 변수명);
	$setvar(
		//strVideo_DeviceId 		= $g_IN_REQUEST_TEL_NUM
		strVideo_DeviceId 			= $g_OUT_AGREE_WORK_NO 		//
		, strVideo_RoomCode 		= 1
		//, strVideo_RoomName 		= 유진투자선물TEST
		, strVideo_RoomName 		= 유진투자선물
		, strVideo_RoomMediaIP 		= $g_serverIP_account
		, strVideo_RoomMediaPort 	= $g_serverPort_account_video
		, strVideo_RoomLocalPort 	= 0
		, strVideo_RoomVoiceIP 		= $g_serverIP_account
		, strVideo_RoomVoicePort 	= $g_serverPort_account_sound
		, strVideo_UserConsultCode 	= 1
		, strVideo_UserConsultName 	= 1
		, strVideo_UserPartCode 	= 1
		, strVideo_UserPartName 	= 1
		, strVideo_UserName 		= $g_IN_AGREE_CLNT_NM
		, strVideo_UserPhone 		= $g_IN_REQUEST_TEL_NUM
		, strVideo_ConsultPhotoName = photo.bmp
	);
	$logvar(
		strVideo_DeviceId 			
		, strVideo_RoomCode 		
		, strVideo_RoomName 		
		, strVideo_RoomMediaIP 		
		, strVideo_RoomMediaPort 	
		, strVideo_RoomLocalPort 	
		, strVideo_RoomVoiceIP 		
		, strVideo_RoomVoicePort 	
		, strVideo_UserConsultCode 	
		, strVideo_UserConsultName 	
		, strVideo_UserPartCode 	
		, strVideo_UserPartName 	
		, strVideo_UserName 		
		, strVideo_UserPhone 		
		, strVideo_ConsultPhotoName 
	);
	$startVideo(fnStartVideoResult);
"/>
//영상 통화 요청 - 서버에서 모바일로 줌.
<action id="fnRecvSSL_MO_CALL" scope="common"
value="
	$setvar(
		recvSSL_body_WORK_NO 	= $json_getdata($jsonname,BODY.WORK_NO) 		//상담번호
		,recvSSL_body_USER_ID 	= $json_getdata($jsonname,BODY.USER_ID)			//상담사ID
	);
	$log(========= SSL 받은데이터 :영상통화 요청 ==============);
	$logvar(
		recvSSL_body_WORK_NO
		,recvSSL_body_USER_ID
	);

	if(!$isequal_string($recvSSL_body_WORK_NO,$g_OUT_AGREE_WORK_NO )){
		//$alertaction(,,WORK_NO 틀림.,확인);
		$callaction(fnPopover_AlertAction,,WORK_NO 틀림.,취소,확인);
		return;
	}
	$callaction(fnConfig_SetValue,g_OUT_CALL_USER_ID 	,$recvSSL_body_USER_ID);

	//$alertaction(fn_Mo_CALL_confirm,,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
	$callaction(fnPopover_AlertAction,fn_Mo_CALL_confirm,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
" />
<action id="fn_Mo_CALL_confirm"  scope="common"
params="p_btn_idx"
value="
	$stopnstimer(TIMER_MO_REQUEST);

	if($p_btn_idx == 1){
		$callaction(fnSendSSL_MO_PLAY);	
	}
	else{
		$callaction(fnSendSSL_MO_NOPLAY);		
	}
" />
// 영상통화 중지 
<action id="fnSendSSL_MO_STOP" scope="common"
value="	
	$setvar(	jsonName 		= MO_STOP 	);
	$json_create($jsonName);

	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0); 					// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,$jsonName);			// 

	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,$g_OUT_AGREE_WORK_NO); 	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,$g_OUT_CALL_USER_ID); 	// 상담사ID

	$json_print($jsonName);
	$delvar(strSSLSendData);
	$json_getfullstring($jsonName,strSSLSendData);
	$json_delete($jsonName);
	$logvar(strSSLSendData);
	$callaction(Act_SSL_SendData,$g_SSLSocketName,strSSLSendData);
" />
<action id="fnRecvSSL_MO_STOP"  scope="common"
value="
	$setvar(
		recvSSL_hdr_ret 	= $json_getdata($jsonname,HDR.RET)
		,recvSSL_hdr_msg 	= $json_getdata($jsonname,HDR.MSG)
	);
	$log(========= SSL 받은데이터 ==============);
	$logvar(recvSSL_hdr_ret);
	if(!$isequal_string($recvSSL_hdr_ret,OK)){	
		//$alertaction(,,$recvSSL_hdr_msg,확인);	
		$callaction(fnPopover_AlertAction,,$recvSSL_hdr_msg,,확인);
	}
" />
//영상 통화 거절
<action id="fnSendSSL_MO_NOPLAY" scope="common"
value="	
	$setvar(	jsonName 		= MO_NOPLAY 	);
	$json_create($jsonName);

	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0); 					// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,$jsonName);			// 

	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,$g_OUT_AGREE_WORK_NO); 	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,$g_OUT_CALL_USER_ID); 	// 상담사ID

	$json_print($jsonName);
	$delvar(strSSLSendData);
	$json_getfullstring($jsonName,strSSLSendData);
	$json_delete($jsonName);
	$logvar(strSSLSendData);
	$callaction(Act_SSL_SendData,$g_SSLSocketName,strSSLSendData);
" />
<action id="fnRecvSSL_MO_NOPLAY"  scope="common"
value="
	$setvar(
		recvSSL_hdr_ret 	= $json_getdata($jsonname,HDR.RET)
		,recvSSL_hdr_msg 	= $json_getdata($jsonname,HDR.MSG)
	);
	$log(========= SSL 받은데이터 ==============);
	$logvar(recvSSL_hdr_ret);
	if(!$isequal_string($recvSSL_hdr_ret,OK)){	
		//$alertaction(,,$recvSSL_hdr_msg,확인);	
		$callaction(fnPopover_AlertAction,,$recvSSL_hdr_msg,,확인);
	}
" />
//영상 통화 시작
<action id="fnSendSSL_MO_PLAY" scope="common"
value="	
	$log(영상통화 시작);
	$setvar(	jsonName 		= MO_PLAY 	);
	$json_create($jsonName);

	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0); 					// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,$jsonName);			// 

	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,$g_OUT_AGREE_WORK_NO); 	// 상담번호
	$json_setdata($jsonName,BODY,USER_ID,,$g_OUT_CALL_USER_ID); 	// 상담사ID

	$json_print($jsonName);
	$delvar(strSSLSendData);
	$json_getfullstring($jsonName,strSSLSendData);
	$json_delete($jsonName);
	$logvar(strSSLSendData);
	$callaction(Act_SSL_SendData,$g_SSLSocketName,strSSLSendData);
" />
<action id="fnRecvSSL_MO_PLAY"  scope="common"
value="
	$setvar(
		recvSSL_hdr_ret 	= $json_getdata($jsonname,HDR.RET)
		,recvSSL_hdr_msg 	= $json_getdata($jsonname,HDR.MSG)
	);
	$log(========= SSL 받은데이터 ==============);
	$logvar(recvSSL_hdr_ret);
	if(!$isequal_string($recvSSL_hdr_ret,OK)){	
		//$alertaction(,,$recvSSL_hdr_msg,확인);	
		$callaction(fnPopover_AlertAction,,$recvSSL_hdr_msg,,확인);
	}

	$callaction(fnStartVideo);
" />
<action id="fnRecvSSL_MO_SAVE" scope="common"
value="
	$setvar(
		recvSSL_body_WORK_NO 	= $json_getdata($jsonname,BODY.WORK_NO) 		//상담번호
		,recvSSL_body_USER_ID 	= $json_getdata($jsonname,BODY.USER_ID)			//상담사ID
	);
	$log(========= SSL 받은데이터 :fnRecvSSL_MO_SAVE ==============);
	$logvar(
		recvSSL_body_WORK_NO
		,recvSSL_body_USER_ID
	);

	$stopnstimer(TIMER_MO_REQUEST);
	$stopvideo();

	if(!$isequal_string($recvSSL_body_WORK_NO,$g_OUT_AGREE_WORK_NO )){
		//$alertaction(,,WORK_NO 틀림.,확인);
		$callaction(fnPopover_AlertAction,,WORK_NO 틀림.,,확인);
		return;
	}	
" />
<action id="fnRecvSSL_MO_RESULT"  scope="common"
value="
	$setvar(
		recvSSL_body_USER_ID 		= $json_getdata($jsonname,BODY.USER_ID)				//상담사ID
		,recvSSL_body_WORK_NO 		= $json_getdata($jsonname,BODY.WORK_NO) 			//상담번호
		,recvSSL_body_STAT 			= $json_getdata($jsonname,BODY.STAT) 				//ST11: 정상 처리 완료 ST13: 영상통화 거절
		,recvSSL_body_MSG 			= $json_getdata($jsonname,BODY.MSG) 				//메시지
		,recvSSL_body_ACNO 			= $json_getdata($jsonname,BODY.ACNO) 				//계좌번호(국내)
		,recvSSL_body_CYBR_ACCT_NO 	= $json_getdata($jsonname,BODY.CYBR_ACCT_NO) 		//연계계좌번호(국내)
		,recvSSL_body_ACNO2 		= $json_getdata($jsonname,BODY.ACNO2) 				//계좌번호(해외)
		,recvSSL_body_CYBR_ACCT_NO2 = $json_getdata($jsonname,BODY.CYBR_ACCT_NO2) 		//연계계좌번호(해외)
		,recvSSL_body_ERR_CODE = $json_getdata($jsonname,BODY.ERR_CODE) 				//에러코드

		,recvSSL_body_HTS_ID  = $json_getdata($jsonname,BODY.HTS_ID) 				//HTS_ID 
	);
	$setvar(recv_error_msg = $callaction(Act_Error_Message_Account,$recvSSL_body_ERR_CODE)); 

	$log(========= SSL 받은데이터 :fnRecvSSL_MO_RESULT ==============);
	$logvar(
		recvSSL_body_USER_ID 		
		,recvSSL_body_WORK_NO 		
		,recvSSL_body_STAT 			
		,recvSSL_body_MSG 			
		,recvSSL_body_ACNO 			
		,recvSSL_body_CYBR_ACCT_NO 	
		,recvSSL_body_ACNO2 		
		,recvSSL_body_CYBR_ACCT_NO2 
	);

	if($isequal_string($recvSSL_body_STAT,ST11)){
		//$alertaction(,,계좌개설이 정상적으로 처리되었습니다.,확인);
		$callaction(fnPopover_AlertAction,,계좌개설이 정상적으로 처리되었습니다.,,확인);
		// 비대면 절차개선 - 2020.09.28
		// 개설된 계좌번호 저장 
		$callaction(fnConfig_SetValue,g_save_acno,$recvSSL_body_ACNO);						// 계좌번호(국내)
		$callaction(fnConfig_SetValue,g_save_cybr_acct_no,$recvSSL_body_CYBR_ACCT_NO);		// 연계계좌번호(국내)
		$callaction(fnConfig_SetValue,g_save_acno2,$recvSSL_body_ACNO2);					// 계좌번호(해외)
		$callaction(fnConfig_SetValue,g_save_cybr_acct_no2,$recvSSL_body_CYBR_ACCT_NO2);	// 연계계좌번호(해외)

		$callaction(fnConfig_SetValue,g_save_hts_id,$recvSSL_body_HTS_ID);					// 계좌번호(해외)
		
		$logvar(
			g_save_acno
			,g_save_cybr_acct_no
			,g_save_acno2
			,g_save_cybr_acct_no2
			,g_save_hts_id
		);

		// 로그인 화면일 경우에는 팝업을 띄워야한다.
		$setvar(
			tmp_popscreen_name = $getcurr_popscreen()
		);
		if(!$isequal_string($tmp_popscreen_name,popscreen_open_account)){
			$popscreen(popscreen_open_account);	
		}
		$callaction(fnConfig_SetValue,g_save_keep_go,1); // 개설후 ID등록
		$callaction(Act_Open_Account_Move,1015);
		//$setvar_common(g_OUT_AGREE_WORK_NO = );


		
		return;
	}	
	elseif($isequal_string($recvSSL_body_STAT,ST12)){
		//$alertaction(,,신분증거절,확인);
		$callaction(fnPopover_AlertAction,,신분증거절,,확인);
		return;
	}
	elseif($isequal_string($recvSSL_body_STAT,ST13)){
		//$alertaction(,,영상통화가 거절되었습니다.,확인);
		$callaction(fnPopover_AlertAction,,영상통화가 거절되었습니다.,,확인);
		return;
	}
	elseif($isequal_string($recvSSL_body_STAT,ST14)){
		//$alertaction(,,$recv_error_msg,확인);
		$callaction(fnPopover_AlertAction,,$recv_error_msg,,확인);
		return;
	}
	else{
		//$alertaction(,,에러[$recvSSL_body_STAT][$recvSSL_body_MSG],확인);
		$callaction(fnPopover_AlertAction,,에러[$recvSSL_body_STAT][$recvSSL_body_MSG],,확인);
		return;
	}
" />
<action id="fnStartVideoResult"  scope="common"
params="result" 
value="
	$log(****** 영상결과  fnStartVideoResult);
	$callaction(fnSendSSL_MO_STOP);			
"/>
<action id="Act_SSL_Closed" scope="common"
value="
	$callaction(fnPopover_AlertAction,,SSL연결이 끊어졌습니다.,,확인);
"/>
<action id="Act_SSL_Connect" scope="common"
params="
p_serverIP
,p_serverPort
,p_connected_action
,p_closed_action
,p_recv_action
"
value="
	//$setvar(g_SSLSocketName=$ssl_connect(14.63.196.29,10110,ssl_connect_callaction,ssl_close_callaction,Act_SSL_RecvData));

	if($ssl_isconnect($g_SSLSocketName)) {	
		$callaction($p_connected_action,$g_SSLSocketName,true);
		return $g_SSLSocketName;
	}
	$setvar(
		ret_sockName = $ssl_connect($g_serverIP_account,$g_serverPort_account_ssl,$p_connected_action,$p_closed_action,$p_recv_action)
	);
	$log(ret_sockName:$ret_sockName);
	return $ret_sockName;
" />
<action id="Act_SSL_Connected_push"  scope="common"
params="
p_socket_name
,p_result
" 
value="
	$logvar(g_SSLSocketName,p_socket_name,p_result);
	if($comparevar(g_SSLSocketName,p_socket_name) != 0) {
		$alert(,ssl_connect_callaction 소켓명이 다르다.)
		return;
	}
	if(!$p_result) {
		$ssl_close($g_SSLSocketName);
		$delvar(g_SSLSocketName);
		$alert(,ssl_connect_callaction,접속 실패);
		return;
	}
	$log(SSL 서버 접속 성공 [$g_SSLSocketName]);
	if($bStringLength || $bNetLength) {
		$setvar(bRecvServerMultiStart=false);
	}
	else {
		$setvar(bRecvServerMultiStart=true);
	}	
	$callaction(fnSendSSL_MO_RECONNECT);
"/>
<action id="fnSendSSL_MO_RECONNECT"  scope="common"
value="
	$setvar(	jsonName 		= MO_RECONNECT 	);
	$json_create($jsonName);

	$json_setdata($jsonName,,HDR,,{});
	$json_setdata($jsonName,HDR,VER,,1.0); 					// 1.0 : 연동버전
	$json_setdata($jsonName,HDR,CMD,,$jsonName);			// 

	$json_setdata($jsonName,,BODY,,{});
	$json_setdata($jsonName,BODY,WORK_NO,,$g_OUT_AGREE_WORK_NO); 	// 상담번호

	$json_print($jsonName);
	$delvar(strSSLSendData);
	$json_getfullstring($jsonName,strSSLSendData);
	$json_delete($jsonName);
	$logvar(strSSLSendData);
	$callaction(Act_SSL_SendData,$g_SSLSocketName,strSSLSendData);
" />
<action id="fnRecvSSL_MO_RECONNECT"  scope="common"
value="
	$setvar(
		recvSSL_hrd_ret 		= $json_getdata($jsonname,HDR.RET)
		,recvSSL_hrd_msg 		= $json_getdata($jsonname,HDR.MSG)

		,recvSSL_body_result	= $json_getdata($jsonname,BODY.RESULT)
		,recvSSL_body_NAME		= $json_getdata($jsonname,BODY.NAME)

		,recvSSL_body_STAT		= $json_getdata($jsonname,BODY.STAT) 
		,recvSSL_body_USER_ID	= $json_getdata($jsonname,BODY.USER_ID) 
	/*
	ST01: 신청 대기 중
	ST02: 신분증 확인 중
	ST03: 영상통화 대기 중 (신분증 확인 완료)
	ST04: 영상 통화 중 (자동으로 영상통화 시작)
	ST05: 신청/변경대기중(영상통화완료)
	ST11: 정상 처리 완료
	ST12: 신분증 거절
	ST13: 영상통화 거절
	ST14: 신청/변경완료 실패
	*/

	);
	$log(========= SSL 받은데이터 ==============);
	$logvar(
		recvSSL_hrd_ret 	
		,recvSSL_hrd_msg 	
		,recvSSL_body_result	
		,recvSSL_body_NAME	
		,recvSSL_body_STAT	
		,recvSSL_body_USER_ID
	);
	if(!$isequal_string($recvSSL_hrd_ret,OK)){
		//$alertaction(,,$recvSSL_hrd_msg,확인);
		$callaction(fnPopover_AlertAction,,$recvSSL_hrd_msg,,확인);
		return;
	}
	
	if($g_is_push_alert){
		$setvar_common(g_is_push_alert = ); // 이미 되어었으므로 안함.
	}
	else{
		//$alertaction(fn_Mo_CALL_confirm,,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
		$callaction(fnPopover_AlertAction,fn_Mo_CALL_confirm,상담사로부터 영상통화가 신청되었습니다\n영상통화를 하시겠습니까?,취소,확인);
	}
"/>
<action id="Act_SSL_Connected_re"  scope="common"
params="
p_socket_name
,p_result
" 
value="
	$logvar(g_SSLSocketName,p_socket_name,p_result);
	if($comparevar(g_SSLSocketName,p_socket_name) != 0) {
		$alert(,ssl_connect_callaction 소켓명이 다르다.)
		return;
	}
	if(!$p_result) {
		$ssl_close($g_SSLSocketName);
		$delvar(g_SSLSocketName);
		$alert(,ssl_connect_callaction,접속 실패);
		return;
	}
	$log(SSL 서버 접속 성공 [$g_SSLSocketName]);
	if($bStringLength || $bNetLength) {
		$setvar(bRecvServerMultiStart=false);
	}
	else {
		$setvar(bRecvServerMultiStart=true);
	}	
	$callaction(Act_SSL_SendData,$g_SSLSocketName,$tmp_re_datavarname,$tmp_re_data); 
"/>
<action id="Act_SSL_SendData"  scope="common"
params="
p_socket_name
,p_datavarname
,p_data
" 
value="
	if($getvarlen(p_socket_name) <= 0) {	$alert(,Act_SSL_SendData 소켓명이 없습니다.);	return;		}
	if(!$ssl_isconnect($p_socket_name)) {	
		$setvar(
			tmp_re_datavarname = $p_datavarname
			,tmp_re_data = p_data
		);
		$setvar_common(
			g_SSLSocketName = $callaction(Act_SSL_Connect,$g_serverIP_account,$g_serverPort_account_ssl,Act_SSL_Connected_re,Act_SSL_Closed,Act_SSL_RecvData)
		);

		return;		
	}

	if($getvarlen($p_datavarname) <= 0) {
		if($getvarlen(p_data) <= 0) {		$alert(,Act_SSL_SendData 보낼 데이터가 없습니다.);	return;		}
		$setvar(dataname = p_data);
	}
	else {	$setvar(dataname = $p_datavarname);		}
	//$geteuckr($dataname);  // UTF-8사용하기로 함.

	$delvar(sSSLSendData);
	$delvar(sNewSSLSendData);

	if($bNetLength) {
		// 바이너리 길이를 셋팅하는 구조인 경우
		$addvardata_int(sSSLSendData,$getvarlen($dataname));
	}
	else if($bStringLength) {
		// 스크링 스타일이 길이를 셋팅하는 구조인 경우..길이의 사이즈가 4일 경우
		//$setvar(sSSLSendData = $format('%04d', $getvarlen($dataname)));
	}
	else {
		// 앞에 길이를 셋팅하지 않는 방법이면
		//$setvar(sSSLSendData=);
	}

	$addvar(sSSLSendData,$dataname);

	//$logvar(sSSLSendData);
	if($bBase64Encode) {
		$base64_encode(sSSLSendData,sNewSSLSendData);
	}
	else {
		$memcpy(sNewSSLSendData,sSSLSendData);
	}
	
	//$logvar(sNewSSLSendData,$dataname); 				// 메모리 보안때문에 로그를 남기면 안됨.

	if(!$ssl_send($p_socket_name,sNewSSLSendData)) {
		$alert(,Act_SSL_SendData 소켓[$p_socket_name]이 전송실패입니다.);
		$delvar(sNewSSLSendData);
		return;
	}
	$delvar(sNewSSLSendData);
	$delvar(sSSLSendData);
"/>

<action id="Act_SSL_RecvData"  scope="common"
params="
p_socket_name
,p_recvDataVar
"	
value="
	if($comparevar(g_SSLSocketName,p_socket_name) != 0) {		$alert(,Act_SSL_RecvData 소켓명이 다르다.)		return;		}

	if(!$bRecvServerMultiStart) {
		$delvar(strRecvData,sNewSSLRecvData,iLength);
		$setvar(bRecvServerMultiStart=true);
		if($bNetLength) {
			// 바이너리 길이를 셋팅하는 구조인 경우
			$memcpy(iLength,$p_recvDataVar,,4);
			$htonl(iLength);
			$memcpy(strRecvData,$p_recvDataVar,4,$result($getvarlen($p_recvDataVar) - 4));
			if($getvarlen(strRecvData) < $iLength) {
				$log(아직 데이터가 다 오지 않았다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
				return;
			}
			$log(모든 데이터가 도착했다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
			$setvar(bRecvServerMultiStart=false);
		}
		else if($bStringLength) {
			// 스크링 스타일이 길이를 셋팅하는 구조인 경우..길이의 사이즈가 4일 경우
			//$memcpy(iLength,$p_recvDataVar,,4);
			//$memcpy(strRecvData,$p_recvDataVar,4,$result($getvarlen($p_recvDataVar) - 4));
			//if($getvarlen(strRecvData) < $iLength) {
			//	$log(아직 데이터가 다 오지 않았다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
			//	return;
			//}
			//$log(모든 데이터가 도착했다. 1 LENGTH[$getvarlen(strRecvData)/$iLength]);
			//$setvar(bRecvServerMultiStart=false);
		}
		else {
			// 앞에 길이를 셋팅하지 않는 방법이면
			//$setvar(iLength=0);
			//$memcpy(strRecvData,$p_recvDataVar);
		}
	}
	else {
		$setvar(iRecvDataPos = $getvarlen(strRecvData));
		if($bNetLength || $bStringLength) {
			// 바이너리 길이를 셋팅하는 구조인 경우
			$memcpy(strRecvData,$p_recvDataVar,0,$getvarlen($p_recvDataVar),,$iRecvDataPos);
			if($getvarlen(strRecvData) < $iLength) {
				$log(아직 데이터가 다 오지 않았다. 2 LENGTH[$getvarlen(strRecvData)/$iLength]);
				return;
			}
			$log(모든 데이터가 도착했다. 2 LENGTH[$getvarlen(strRecvData)/$iLength]);
			$setvar(bRecvServerMultiStart=false);
		}
		else {
			// 앞에 길이를 셋팅하지 않는 방법이면
			//$setvar(iLength=0);
			//$memcpy(strRecvData,$p_recvDataVar);
		}
	}
	$logvar(iLength,strRecvData,bBase64Encode);
	if($bBase64Encode) {
		$base64_decode(strRecvData,sNewSSLRecvData);
	}
	else {
		$memcpy(sNewSSLRecvData,strRecvData);
	}
	$getutf8(sNewSSLRecvData);
	$log(Act_SSL_RecvData Call Success [$p_socket_name][sNewSSLRecvData]);

	$json_create($jsonName);
	$json_parsebuffer($jsonname,sNewSSLRecvData);

	$json_print($jsonname);

	$setvar(
		recv_hdr_cmd 	= $json_getdata($jsonname,HDR.CMD)
		,recv_hdr_ret 	= $json_getdata($jsonname,HDR.RET)
		,recv_callback_action = $addstring(fnRecvSSL_,$recv_hdr_cmd)
	);
	$logvar(
		recv_hdr_cmd 	
		,recv_hdr_ret 	
		,recv_callback_action 
	);

	if($g_is_4100_call){
		$callaction(fnRecvSSL_MO_RECONNECT_4100);
		$setvar_common(g_is_4100_call = );
	}
	else{
		$callaction($recv_callback_action);
	}
	

	$json_delete($jsonName);

	$logvar(sNewSSLRecvData);
	//$delvar($p_recvDataVar);
" />

<!--
<action id="fnUser_Login" scope="common"
params="
p_user_id_var 			// 아이디
,p_user_pwd_var			// 접속비밀번호
,p_user_cert_encvar 	// 공동인증서 변수명 
,p_login_type 			// 로그인타입  : 1:ID로그인, 2:인증서로그인, 3:지문로그인
,p_login_kind 			// 로그인 종류 : 0:시세전용, 1:모의투자, 2:공동인증로그인, 3:직원용
,p_is_id_save 			// 아이디 저장여부 
,p_user_dn 				// dn값 
,p_is_auto_login 		// 자동로그인 여부 
,p_login_expiry 		// 최종로그인시간
,p_success_action 		// 성공시 액션
,p_fail_action 			// 실패시 액션
"
value="
	$setvar(
		tmp_user_id 				= $getvar($p_user_id_var)
		,tmp_user_pwd 				= $getvar($p_user_pwd_var)
		,tmp_user_cert_enc 			= $getvar($p_user_cert_encvar)
		,tmp_login_type 			= $p_login_type
		,tmp_login_kind 			= $p_login_kind
		,tmp_is_id_save 			= $p_is_id_save
		,tmp_user_dn 				= $p_user_dn
		,tmp_is_auto_login 			= $p_is_auto_login
		,tmp_success_action 		= $p_success_action
		,tmp_fail_action 			= $p_fail_action
	);

	if($tmp_login_type == 1){ 			// ID로그인 
		if($strlen($tmp_user_id) < 1){ 	
			//$alertaction(,,fnUser_Login 아이디 없음.,확인); 	
			$callaction(fnPopover_AlertAction,,fnUser_Login 아이디 없음.,,확인);
			return;		
		}
		if($strlen($tmp_user_pwd) < 1){ 
			//$alertaction(,,fnUser_Login 비밀번호 없음.,확인); 	
			$callaction(fnPopover_AlertAction,,fnUser_Login 비밀번호 없음.,,확인);
			return;		
		}

		if($tmp_login_type == 0){ 				// 시세전용
			$setvar(tmp_CSBLOGIN_lutp = 1);
			// 국내서버 로그인 후 해외서버에 복사 필요
		}
		elseif($tmp_login_type == 1){ 			// 모의투자 
			$setvar(tmp_CSBLOGIN_lutp = 1);
			// 국내서버 로그인 후 해외서버에 복사 필요
		}
		elseif($tmp_login_type == 2){ 			// 공동인증로그인 
			if($strlen($tmp_user_cert_enc) < 1){ 
				//$alertaction(,,fnUser_Login 인증서비밀번호  없음.,확인); 	
				$callaction(fnPopover_AlertAction,,fnUser_Login 인증서비밀번호  없음.,,확인);
				return;		
			}
			$setvar(tmp_CSBLOGIN_lutp = 2);
			// 1.ID로 Dn값 요청 
			// 2.해당 인증서 비밀번호 체크 
		}
	}
	elseif($tmp_login_type == 2){ 		// 인증서로그인 


	}
	elseif($tmp_login_type == 3){ 		// 지문로그인 

	}

	else{
		
	}
" 
/>

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 사용자 ID로 Dn값 요청 
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<action id="fnUser_Dn_Req" scope="common"
params="
p_usid 
,p_success_action
,p_fail_action
"
value="
	$setvar(
		,tmp_User_Dn_Req_success_action 	= $p_success_action
		,tmp_User_Dn_Req_fail_action 		= $p_fail_action
		,IN_wktp 	= 1
		,IN_usid 	= $tmp_user_id
		,IN_cadn	= 
		,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,fnUser_Dn_Req_After)
	);
" />
<action id="fnUser_Dn_Req_After" 
params="
p_trcode
,p_reqid
,p_cls_buf
,p_param
"
value="
	$setvar_common(
		recv_User_Dn_Req_cadn 		= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_User_Dn_Req_casn 	= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_User_Dn_Req_capw 	= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_User_Dn_Req_cass 	= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_User_Dn_Req_usid 	= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	$logvar(
		recv_User_Dn_Req_cadn
		,recv_User_Dn_Req_casn
		,recv_User_Dn_Req_capw
		,recv_User_Dn_Req_cass
		,recv_User_Dn_Req_usid
	);

	if($isequal_string($recv_User_Dn_Req_capw,3)
	|| $isequal_string($recv_User_Dn_Req_capw,4)
	|| $isequal_string($recv_User_Dn_Req_capw,A)
	|| $isequal_string($recv_User_Dn_Req_capw,B)
	){
		//$alertaction($tmp_User_Dn_Req_fail_action,,공동인증서 에러,확인);		
		$callaction(fnPopover_AlertAction,$tmp_User_Dn_Req_fail_action,공동인증서 에러,,확인);
		return;
	}
	if($strlen($recv_User_Dn_Req_usid) < 1){	
		//$alertaction($tmp_User_Dn_Req_fail_action,,서버에서 아이디를  가져오지 못하였습니댜.,확인);		
		$callaction(fnPopover_AlertAction,$tmp_User_Dn_Req_fail_action,서버에서 아이디를  가져오지 못하였습니댜.,,확인);
		return;		
	}

	$setvar(tmp_dn_idx = $cert_getdnindex($recv_User_Dn_Req_cadn));
	$logvar(tmp_dn_idx);
	if($tmp_dn_idx < 0){	
		//$alertaction($tmp_User_Dn_Req_fail_action,,등록된 인증서가 없습니다.\n인증서를 가져오세요,확인);		
		$callaction(fnPopover_AlertAction,$tmp_User_Dn_Req_fail_action,등록된 인증서가 없습니다.\n인증서를 가져오세요,,확인);
		return;		
	}

	$callaction($tmp_User_Dn_Req_success_action);
"/>
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Dn으로 ID 요청 
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<action id="fnUser_Id_Req" scope="common"
params="
p_cadn 
,p_success_action
,p_fail_action
"
value="
	
	$setvar(
		,tmp_User_Id_Req_success_action 	= $p_success_action
		,tmp_User_Id_Req_fail_action 		= $p_fail_action

		,IN_wktp 	= 2
		,IN_usid 	= 
		,IN_cadn	= $p_cadn
		,reqid_CSBLSIGN01 = $callaction(FNSEND_ORDERDATA,CSBLSIGN01,Input,,,,fnUser_Id_Req_After)
	);
" />
<action id="fnUser_Id_Req_After" 
params="
p_trcode
,p_reqid
,p_cls_buf
,p_param
"
value="
	$setvar_common(
		recv_User_Id_Req_cadn 	= $recvmap_data(CSBLSIGN01,PageBlock.cadn,$reqid_CSBLSIGN01,trim) 
		,recv_User_Id_Req_casn 	= $recvmap_data(CSBLSIGN01,PageBlock.casn,$reqid_CSBLSIGN01,trim) 
		,recv_User_Id_Req_capw 	= $recvmap_data(CSBLSIGN01,PageBlock.capw,$reqid_CSBLSIGN01,trim) 
		,recv_User_Id_Req_cass 	= $recvmap_data(CSBLSIGN01,PageBlock.cass,$reqid_CSBLSIGN01,trim) 
		,recv_User_Id_Req_usid 	= $recvmap_data(CSBLSIGN01,PageBlock.usid,$reqid_CSBLSIGN01,trim) 
	);
	$logvar(
		recv_User_Id_Req_cadn
		,recv_User_Id_Req_casn
		,recv_User_Id_Req_capw
		,recv_User_Id_Req_cass
		,recv_User_Id_Req_usid
	);

	if($isequal_string($recv_User_Id_Req_capw,3)
	|| $isequal_string($recv_User_Id_Req_capw,4)
	|| $isequal_string($recv_User_Id_Req_capw,A)
	|| $isequal_string($recv_User_Id_Req_capw,B)
	){
		//$alertaction($tmp_User_Id_Req_fail_action,,공동인증서 에러,확인);		
		$callaction(fnPopover_AlertAction,$tmp_User_Id_Req_fail_action,공동인증서 에러,,확인);
		return;
	}
	if($strlen($recv_User_Id_Req_usid) < 1){	
		//$alertaction($tmp_User_Id_Req_fail_action,,서버에서 아이디를  가져오지 못하였습니댜.,확인);		
		$callaction(fnPopover_AlertAction,$tmp_User_Id_Req_fail_action,서버에서 아이디를  가져오지 못하였습니댜.,,확인);
		return;		
	}

	$callaction($tmp_User_Id_Req_success_action);
"/>

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 로그인 TR 
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<action id="fnUser_Login_SendTR" scope="common"
parmas="
p_usid 
,p_pswd
,p_lutp
,p_cadn
,p_success_action
,p_fail_action
"
value="
	$setvar(
		,tmp_User_Login_SendTR_success_action 	= $p_success_action
		,tmp_User_Login_SendTR_fail_action 		= $p_fail_action

		,IN_ctyp 	= $g_channel_type				// 접속매체구분(1:HTS, 2:MTS, 3:WTS)
		,IN_cont 	= $g_connect_type				// 접속사용자구분(H:HTS, F:FRONT, B:BACKOFFICE)
		//,IN_loip 	= $deviceinfo(IPADDRESS)		// 로컬IP
		,IN_loip 	= $g_ip_local					// 로컬IP
		,IN_maca 	= $g_mac_address 				// 하드웨어MAC
		,IN_clnm 	=  								// ClientPcName
		,IN_usid 	= $p_usid  		 				// 사용자아이디
		,IN_pswd 	= $p_pswd 			  			// 사용자패스워드
		,IN_lutp 	= $p_lutp						// 로그인구분(1:일반,2:인증서)
		,IN_cadn 	= $p_cadn 						// 인증서DN값

		,reqid_CSBLOGIN = $callaction(FNSEND_ORDERDATA,CSBLOGIN,Input,,,,fnUser_Login_SendTR_After)
	);
" />
<action id="fnUser_Login_SendTR_After" 
params="
p_trcode
,p_reqid
,p_cls_buf
,p_param
"
value="
	$setvar_common(
		g_recv_UserName 	= $recvmap_data(CSBLOGIN,PageBlock.UserName,$reqid_CSBLOGIN,trim)  		//사용자이름
		,g_recv_stat 		= $recvmap_data(CSBLOGIN,PageBlock.stat,$reqid_CSBLOGIN,trim) 			//ID상태
		,g_recv_mutl 		= $recvmap_data(CSBLOGIN,PageBlock.mutl,$reqid_CSBLOGIN,trim) 			//중복로그인여부
		,g_recv_warn 		= $recvmap_data(CSBLOGIN,PageBlock.warn,$reqid_CSBLOGIN,trim) 			//위험고지
		,g_recv_ltim		= $recvmap_data(CSBLOGIN,PageBlock.ltim,$reqid_CSBLOGIN,trim) 			//직전 접속시간
		,g_recv_otim		= $recvmap_data(CSBLOGIN,PageBlock.otim,$reqid_CSBLOGIN,trim) 			//직전 접속해제시간
		,g_recv_ipad		= $recvmap_data(CSBLOGIN,PageBlock.ipad,$reqid_CSBLOGIN,trim) 			//직전 접속 IP정보
		,g_recv_jgtp		= $recvmap_data(CSBLOGIN,PageBlock.jgtp,$reqid_CSBLOGIN,trim) 			//국내선물 장구분 1:야간장 2:주간장
		,g_recv_kodt		= $recvmap_data(CSBLOGIN,PageBlock.kodt,$reqid_CSBLOGIN,trim) 			//국내선물 영업일자
		,g_g_recv_gldt		= $recvmap_data(CSBLOGIN,PageBlock.gldt,$reqid_CSBLOGIN,trim) 			//해외선물 영업일자
		,g_recv_idno		= $recvmap_data(CSBLOGIN,PageBlock.idno,$reqid_CSBLOGIN,trim) 			//WEB -주민등록번호
		,g_recv_cadn		= $recvmap_data(CSBLOGIN,PageBlock.cadn,$reqid_CSBLOGIN,trim) 			//WEB -CA DN value
	);
	// 256byte 헤더 복사해서 함. 
	$callaction(Act_Sise_Login); 		// 서버응답 없음.

	$callaction($tmp_User_Login_SendTR_success_action);
"/>
-->
<import filename="plist/root/common/action_login_n.xml" />


























